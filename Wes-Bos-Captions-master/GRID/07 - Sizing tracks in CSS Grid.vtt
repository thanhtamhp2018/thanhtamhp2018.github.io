WEBVTT

1
00:00:00.267 --> 00:00:03.460 line:15% 
(rock music)

2
00:00:03.460 --> 00:00:05.721
<v Wes>Alright let's talk about actually sizing our</v>

3
00:00:05.721 --> 00:00:08.842
rows and our columns or sizing our tracks in CSS grid

4
00:00:08.842 --> 00:00:11.724
and we're gonna have that relates to the box model.

5
00:00:11.724 --> 00:00:15.232
So open up 07 sizing tracks and the starter file

6
00:00:15.232 --> 00:00:18.144
that we have here, whoa I've got 15 different ones

7
00:00:18.144 --> 00:00:21.982
in here now let's go ahead and make a bunch of columns.

8
00:00:21.982 --> 00:00:25.028
We'll say grid-template-columns and so far we have

9
00:00:25.028 --> 00:00:28.176
just been using pixels because it's sort of the easiest

10
00:00:28.176 --> 00:00:31.464
to understand, 200px, 200px give it a save

11
00:00:31.464 --> 00:00:33.422
you see that we have that.

12
00:00:33.422 --> 00:00:36.156
Now what happens if we use percentages, cause I know

13
00:00:36.156 --> 00:00:38.971
a lot of you will think like oh I would like to be

14
00:00:38.971 --> 00:00:43.138
25%, 25%, 25% 25% right it all adds up to 100%

15
00:00:46.465 --> 00:00:50.149
well now start to get that horizontal scroll

16
00:00:50.149 --> 00:00:51.633
and why is that?

17
00:00:51.633 --> 00:00:55.800
Well that's because we are really doing 25+25+25+25

18
00:00:57.227 --> 00:01:00.727
+20px+20px+20px in between.

19
00:01:02.401 --> 00:01:04.637
So we're really 60 pixels over and that's what's causing

20
00:01:04.637 --> 00:01:06.195
that horizontal scroll.

21
00:01:06.195 --> 00:01:08.415
So it's not that great idea to use percentages

22
00:01:08.415 --> 00:01:11.294
to add up to 100%, don't get me wrong you can always

23
00:01:11.294 --> 00:01:14.461
use percentages to maybe take up half of something

24
00:01:14.461 --> 00:01:17.295
or 80% of something or a quarter of something but

25
00:01:17.295 --> 00:01:19.637
if you're trying to do the whole song and dance

26
00:01:19.637 --> 00:01:22.469
where you're trying to add up your values and then

27
00:01:22.469 --> 00:01:26.641
subtract your grid gap from it, it's just going to be

28
00:01:26.641 --> 00:01:28.094
a big headache.

29
00:01:28.094 --> 00:01:31.095
So rather than use percentages in most case we're actually

30
00:01:31.095 --> 00:01:33.857
going to be using what's called the fr unit

31
00:01:33.857 --> 00:01:36.945
and that's what's referred to as the fractional unit.

32
00:01:36.945 --> 00:01:39.137
So let's explain how this actually works.

33
00:01:39.137 --> 00:01:42.675
Let's start off with just two columns, 200px, 200px

34
00:01:42.675 --> 00:01:46.289
and give that a save, you'll notice that, here let's put

35
00:01:46.289 --> 00:01:50.456
a big ol border on our grid, so border: 10px solid,

36
00:01:51.794 --> 00:01:54.127
let's var it up, var yellow.

37
00:01:56.669 --> 00:02:00.225
So this is our grid here which is the yellow, but we're

38
00:02:00.225 --> 00:02:04.065
not using all of it that's because we've defined them

39
00:02:04.065 --> 00:02:06.781
in pixels so what would be great is if we could

40
00:02:06.781 --> 00:02:09.495
just evenly distribute each of the columns.

41
00:02:09.495 --> 00:02:13.155
And that's where the fr unit comes in, the fractional unit.

42
00:02:13.155 --> 00:02:17.009
What it does is, fractional units represent the amount

43
00:02:17.009 --> 00:02:21.176
of space left, after all the elements are laid out.

44
00:02:23.117 --> 00:02:27.915
So what happens is CSS Grid will first go and lay out

45
00:02:27.915 --> 00:02:31.185
all of the columns that it needs to that have an explicit

46
00:02:31.185 --> 00:02:34.515
width or have an explicit height in terms of rows.

47
00:02:34.515 --> 00:02:38.355
So what it will do is it will say 200px and then 200px

48
00:02:38.355 --> 00:02:42.438
and if I wanted to add a third column called 1fr,

49
00:02:43.335 --> 00:02:45.449
what that's going to do is it's going to say well

50
00:02:45.449 --> 00:02:49.449
this much is extra here, so I'm going to take up

51
00:02:51.077 --> 00:02:52.469
that much, so if I give that a save now.

52
00:02:52.469 --> 00:02:54.917
You'll see that that third column is now going to

53
00:02:54.917 --> 00:02:57.749
take up however much room is left.

54
00:02:57.749 --> 00:03:00.721
If I were to increase this to 400px there's going to be

55
00:03:00.721 --> 00:03:04.888
quite a bit less left and 1fr is going to stand for that.

56
00:03:06.377 --> 00:03:10.141
Interesting, okay now let's bring it back to just 200px

57
00:03:10.141 --> 00:03:13.517
now I just have one column and lots of extra space.

58
00:03:13.517 --> 00:03:17.909
If I were to say 1fr, 1fr each of these two new columns

59
00:03:17.909 --> 00:03:21.794
are going to take up one amount of the, they're sorta

60
00:03:21.794 --> 00:03:23.849
gonna split it between them and they're each

61
00:03:23.849 --> 00:03:27.675
gonna be the same size, now if you've used a flex grow

62
00:03:27.675 --> 00:03:30.917
or a flex shrink value this is works very similar to that.

63
00:03:30.917 --> 00:03:33.437
In that you can start to double up these values.

64
00:03:33.437 --> 00:03:36.285
So these aren't like pixels or percentages or anything

65
00:03:36.285 --> 00:03:39.569
they're just in proportion to how much free space is left.

66
00:03:39.569 --> 00:03:42.315
So if this one is 2fr, this one is going to take up

67
00:03:42.315 --> 00:03:45.915
twice as much of the free space as this one.

68
00:03:45.915 --> 00:03:48.645
So it does stand for fractional units but I kinda like

69
00:03:48.645 --> 00:03:52.228
the idea of it standing for free space, fr.

70
00:03:53.477 --> 00:03:57.465
So now we see that the 2fr is taking up twice the amount

71
00:03:57.465 --> 00:03:59.445
of free space as that one.

72
00:03:59.445 --> 00:04:01.577
Now that's great, because what I will often do,

73
00:04:01.577 --> 00:04:03.977
is instead of using pixels at all if I just wanna

74
00:04:03.977 --> 00:04:07.644
split it up really evenly I'll just do, 1fr,

75
00:04:08.565 --> 00:04:10.454
and I'll just do that, whoa, I'll do that a couple of times

76
00:04:10.454 --> 00:04:14.341
over and over, one two three four and that will give me

77
00:04:14.341 --> 00:04:17.834
four equal columns and again the way that the browser

78
00:04:17.834 --> 00:04:22.381
is going to be laying this out is that first it will

79
00:04:22.381 --> 00:04:25.464
take away any hard needs that it has.

80
00:04:26.581 --> 00:04:30.285
And in our case it needs to take away 60 pixels

81
00:04:30.285 --> 00:04:34.829
because it has 20, 20, and 20 in the grid gap.

82
00:04:34.829 --> 00:04:37.321
And then you've got a whole bunch of space left

83
00:04:37.321 --> 00:04:39.975
and it will just evenly distribute the values

84
00:04:39.975 --> 00:04:41.505
between all of them.

85
00:04:41.505 --> 00:04:43.621
Let's look at how that would look if we have

86
00:04:43.621 --> 00:04:48.189
grid template rows in our case if I give that a save,

87
00:04:48.189 --> 00:04:49.469
nothing changed.

88
00:04:49.469 --> 00:04:53.636
And why is that, well by default the height of the a grid

89
00:04:54.481 --> 00:04:57.301
and this is very similar to display block elements.

90
00:04:57.301 --> 00:05:00.121
The default height of an element is just however high

91
00:05:00.121 --> 00:05:03.373
the contents are but the default width of the element

92
00:05:03.373 --> 00:05:06.493
is as wide as the actual view port that we have.

93
00:05:06.493 --> 00:05:10.079
I have some margin on the body here so things don't butt

94
00:05:10.079 --> 00:05:12.221
up right against the browser.

95
00:05:12.221 --> 00:05:13.293
So what could we do there?

96
00:05:13.293 --> 00:05:16.293
Well you could put an explicit height on the container

97
00:05:16.293 --> 00:05:19.143
so you could say height, I don't know something

98
00:05:19.143 --> 00:05:23.226
like 600px and now you'll see that because we now

99
00:05:24.197 --> 00:05:27.245
have a hard height to our grid, each of 'em are gonna

100
00:05:27.245 --> 00:05:30.317
take up the amount and if I were to take the second one

101
00:05:30.317 --> 00:05:34.217
and maybe make it 10fr, you'll notice that the second

102
00:05:34.217 --> 00:05:37.157
row is taking up 10 times the amount of the free space

103
00:05:37.157 --> 00:05:38.897
as the rest of 'em.

104
00:05:38.897 --> 00:05:42.573
So fr units are extremely helpful before you reach

105
00:05:42.573 --> 00:05:45.305
for percentages and again let me show you,

106
00:05:45.305 --> 00:05:48.169
you could do 50% here and what that will do is it'll

107
00:05:48.169 --> 00:05:52.502
first take 50% and then we have some free units but do not

108
00:05:52.502 --> 00:05:56.669
try to add up to 100% rather try to reach for your fr units

109
00:05:57.835 --> 00:06:01.493
in there, similarly we can also use pixels, and rems and ems

110
00:06:01.493 --> 00:06:03.593
and any other units that you're used to.

111
00:06:03.593 --> 00:06:07.359
But I find myself primarily using rems

112
00:06:07.359 --> 00:06:09.609
and fr units in most cases.

113
00:06:10.539 --> 00:06:11.799
The next think I want to talk to you about

114
00:06:11.799 --> 00:06:14.423
is the auto keyword so let's get rid of the

115
00:06:14.423 --> 00:06:17.707
rows here and let's get rid of all our columns

116
00:06:17.707 --> 00:06:20.691
and what's the difference if I have auto and 1fr?

117
00:06:20.691 --> 00:06:22.311
Well let's give it a save you can see that auto will

118
00:06:22.311 --> 00:06:26.003
just adjust to the max size of the content so right now

119
00:06:26.003 --> 00:06:29.527
you can see that it's likely the 13 or the 15 whatever

120
00:06:29.527 --> 00:06:31.823
is the widest content that is defining

121
00:06:31.823 --> 00:06:34.191
the width of this column.

122
00:06:34.191 --> 00:06:36.351
So if I were to go into 3 and make it something

123
00:06:36.351 --> 00:06:40.717
like Wes Bos Is Cool, you'll see that the entire column

124
00:06:40.717 --> 00:06:43.656
becomes wider because that one element

125
00:06:43.656 --> 00:06:46.523
is autosizing that column.

126
00:06:46.523 --> 00:06:49.297
What you might expect here is that the one and the five

127
00:06:49.297 --> 00:06:51.607
and the seven would just be much smaller

128
00:06:51.607 --> 00:06:55.763
and only this one would go wider and what we really need

129
00:06:55.763 --> 00:06:58.779
to know here about CSS grid is that it's a grid.

130
00:06:58.779 --> 00:07:01.356
It's not going to just loosely place itself,

131
00:07:01.356 --> 00:07:02.977
a lot of times people think that you can

132
00:07:02.977 --> 00:07:05.543
sorta do a Pintrest based layout where everything just

133
00:07:05.543 --> 00:07:08.335
fits into each other and while that sorta is possible,

134
00:07:08.335 --> 00:07:11.695
we'll go into some examples in the future once we get

135
00:07:11.695 --> 00:07:14.499
into more real world stuff, what you need to know is that

136
00:07:14.499 --> 00:07:17.755
the auto keyword will just automatically size it

137
00:07:17.755 --> 00:07:19.359
as far as you want, and we can mix and match that again

138
00:07:19.359 --> 00:07:23.526
if I do auto 1fr again they'll sort of just go back

139
00:07:24.487 --> 00:07:25.807
and forth, back and forth.

140
00:07:25.807 --> 00:07:28.507
Now interesting so you see that these ones are really small

141
00:07:28.507 --> 00:07:31.747
because the 13 is deciding the width whereas this one is

142
00:07:31.747 --> 00:07:35.077
pretty wide because the Wes Bos Is Cool

143
00:07:35.077 --> 00:07:36.683
is defining the width.

144
00:07:36.683 --> 00:07:40.043
That's auto and fr unit, let's see ya in the next one.

145
00:07:40.043 --> 00:07:42.460
(rock music)

