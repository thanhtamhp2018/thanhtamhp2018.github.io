WEBVTT

1
00:00:03.509 --> 00:00:05.061
<v Instructor>So, this one is,</v>

2
00:00:05.061 --> 00:00:06.901
sort of a album layout examples,

3
00:00:06.901 --> 00:00:07.960
pretty standard thing to have

4
00:00:07.960 --> 00:00:10.201
where you chop these cards on the screen

5
00:00:10.201 --> 00:00:11.712
and you have an image to the left,

6
00:00:11.712 --> 00:00:13.741
and you have some text to the right.

7
00:00:13.741 --> 00:00:15.803
However, there is like a lot of little delicate stuff

8
00:00:15.803 --> 00:00:18.181
that you need to keep in mind here.

9
00:00:18.181 --> 00:00:20.291
So, this one is going to teach us both

10
00:00:20.291 --> 00:00:24.166
about how to nest grid inside of another grid,

11
00:00:24.166 --> 00:00:26.131
as well as give us some practice

12
00:00:26.131 --> 00:00:29.371
with using auto-fit and minmax.

13
00:00:29.371 --> 00:00:31.371
So, kinda the cool thing about this is that

14
00:00:31.371 --> 00:00:34.779
there are no media queries in this entire thing,

15
00:00:34.779 --> 00:00:37.752
yet, it is completely responsive, meaning that,

16
00:00:37.752 --> 00:00:40.853
as big as it goes you have four and as it gets smaller

17
00:00:40.853 --> 00:00:44.224
it snaps down to three, down to two, and then eventually,

18
00:00:44.224 --> 00:00:47.390
once it's too small, it'll snap down to a column of one,

19
00:00:47.390 --> 00:00:49.748
without having to write any sort of media queries,

20
00:00:49.748 --> 00:00:51.281
which I think it's pretty neat.

21
00:00:51.281 --> 00:00:55.156
So, let's go ahead and get started on that.

22
00:00:55.156 --> 00:00:57.406
I'm gonna open this one up,

23
00:00:58.265 --> 00:01:00.745
on another tab so we can reference it,

24
00:01:00.745 --> 00:01:03.133
open up the starter file, and what I've done,

25
00:01:03.133 --> 00:01:05.476
looks like some HTML that we've got here,

26
00:01:05.476 --> 00:01:07.935
so, we have div of the class albums,

27
00:01:07.935 --> 00:01:09.156
that's gonna be our grid,

28
00:01:09.156 --> 00:01:13.668
and then each album is going to have some artwork,

29
00:01:13.668 --> 00:01:16.857
just some random image coming off of unsplash,

30
00:01:16.857 --> 00:01:20.785
and then inside of that we will have our album details,

31
00:01:20.785 --> 00:01:22.647
which go to the right of it, so,

32
00:01:22.647 --> 00:01:25.225
initially when I try to do this one I actually thought

33
00:01:25.225 --> 00:01:27.895
I could get away with not having the sort of

34
00:01:27.895 --> 00:01:30.985
album details wrapper div and just have,

35
00:01:30.985 --> 00:01:34.036
like the h2 as a sibling to the image.

36
00:01:34.036 --> 00:01:36.697
And while I do find with CSS script you do,

37
00:01:36.697 --> 00:01:39.526
you have a lot less wrapper components,

38
00:01:39.526 --> 00:01:40.988
you still have to have, I mean,

39
00:01:40.988 --> 00:01:42.897
this case was a really good use case of,

40
00:01:42.897 --> 00:01:44.696
when sometimes you need to wrap

41
00:01:44.696 --> 00:01:46.988
a bunch of elements in a wrapper div.

42
00:01:46.988 --> 00:01:49.895
So, we have our album details as h2, a paragraph,

43
00:01:49.895 --> 00:01:52.857
another paragraph, which is the artist,

44
00:01:52.857 --> 00:01:55.719
and then, sometimes there's multiple descriptions,

45
00:01:55.719 --> 00:01:58.216
and sometimes there's just one description

46
00:01:58.216 --> 00:01:59.559
that we have here, and we wanna have it

47
00:01:59.559 --> 00:02:02.249
vertically centered inside of this card,

48
00:02:02.249 --> 00:02:04.017
so regardless of where we are at.

49
00:02:04.017 --> 00:02:05.451
So, let's kick it off here.

50
00:02:05.451 --> 00:02:07.256
First things we're gonna do and, by the way,

51
00:02:07.256 --> 00:02:09.560
you should pause this and try to do it yourself

52
00:02:09.560 --> 00:02:13.727
before we move along, but other than that let's get rolling.

53
00:02:14.960 --> 00:02:17.738
So, I'm going to start off with the actual grid,

54
00:02:17.738 --> 00:02:20.120
which is the albums, so, albums,

55
00:02:20.120 --> 00:02:22.218
we're going to display grid,

56
00:02:22.218 --> 00:02:26.029
and how wide should each grid template be?

57
00:02:26.029 --> 00:02:28.362
Well, grid-template-columns.

58
00:02:29.346 --> 00:02:31.836
We're going to repeat and we're gonna use that other one,

59
00:02:31.836 --> 00:02:35.163
like we did before, we're gonna say auto-fit,

60
00:02:35.163 --> 00:02:38.044
and, let's just give it a hard 100 pixels.

61
00:02:38.044 --> 00:02:39.916
So, however many 100 pixels once worked.

62
00:02:39.916 --> 00:02:42.946
Obviously, that's not going to work very well,

63
00:02:42.946 --> 00:02:46.468
so what we really need to do here

64
00:02:46.468 --> 00:02:49.863
is to change this to be a minmax.

65
00:02:49.863 --> 00:02:53.451
At a minimum I want it to be 400 pixels

66
00:02:53.451 --> 00:02:57.874
and at a maximum I want it to be 100% wide, which is 1fr.

67
00:02:57.874 --> 00:02:59.943
And then, what this will do is that,

68
00:02:59.943 --> 00:03:02.153
sort of the size of the content inside of it

69
00:03:02.153 --> 00:03:04.935
we'll figure out how many can fit on a page.

70
00:03:04.935 --> 00:03:06.703
So that's looking pretty good,

71
00:03:06.703 --> 00:03:08.298
that's just the basis of our grid.

72
00:03:08.298 --> 00:03:12.423
Let's go down to the album, and style that a little bit,

73
00:03:12.423 --> 00:03:15.923
just the background, we're gonna put rgba,

74
00:03:16.909 --> 00:03:20.423
on it some box-shadow, looking good,

75
00:03:20.423 --> 00:03:22.794
looking good, let's go back up to our grid here

76
00:03:22.794 --> 00:03:26.692
and say grid-gap, I don't know, 20px?

77
00:03:26.692 --> 00:03:28.976
It's looking pretty good, our album.

78
00:03:28.976 --> 00:03:32.067
You should have some padding of 20px on it.

79
00:03:32.067 --> 00:03:35.238
Now, how do I actually get the image and the text

80
00:03:35.238 --> 00:03:38.901
to go side by side, if the albums is the grid

81
00:03:38.901 --> 00:03:42.040
and the album is the grid item,

82
00:03:42.040 --> 00:03:45.432
how do I use grid on the actual album itself?

83
00:03:45.432 --> 00:03:47.791
And this is very similar to flex-box in that

84
00:03:47.791 --> 00:03:51.374
your grid item can also be a grid container

85
00:03:52.253 --> 00:03:53.832
at the exact same time.

86
00:03:53.832 --> 00:03:56.472
So even though, album is itself a grid item,

87
00:03:56.472 --> 00:03:59.635
we can display grid right on it,

88
00:03:59.635 --> 00:04:02.203
and then we're going to make two columns,

89
00:04:02.203 --> 00:04:03.915
and if we've looked at this version here,

90
00:04:03.915 --> 00:04:06.685
we're gonna make one column that is 150 pixels wide

91
00:04:06.685 --> 00:04:11.216
for the image, and then, the rest, for the descriptions.

92
00:04:11.216 --> 00:04:14.027
So, say grid-template-columns

93
00:04:14.027 --> 00:04:16.424
and we're gonna have 150 pixels for the first one,

94
00:04:16.424 --> 00:04:19.795
and then a 1fr for whatever is left after that,

95
00:04:19.795 --> 00:04:21.765
and you see that the values

96
00:04:21.765 --> 00:04:23.427
are butting up against each other.

97
00:04:23.427 --> 00:04:26.827
We'll have a grid-gap, 20px maybe, so it's not bumping up,

98
00:04:26.827 --> 00:04:29.577
maybe I'll pop that down to 10px.

99
00:04:30.946 --> 00:04:34.040
Good, now I want inside of this album here,

100
00:04:34.040 --> 00:04:37.530
I want everything to be vertically centered,

101
00:04:37.530 --> 00:04:40.363
so, you tell me, it's align-items,

102
00:04:44.381 --> 00:04:46.083
going to be center,

103
00:04:46.083 --> 00:04:47.028
that over to be centered.

104
00:04:47.028 --> 00:04:49.028
They are being very big.

105
00:04:50.902 --> 00:04:52.428
Let's try to debug it.

106
00:04:52.428 --> 00:04:54.419
Actually I don't know why they are being so big,

107
00:04:54.419 --> 00:04:57.419
let's see what is then causing that.

108
00:04:59.316 --> 00:05:01.878
grid-template-columns, I'll turn on,

109
00:05:01.878 --> 00:05:04.437
let's get our dev tools out, we'll go to layout,

110
00:05:04.437 --> 00:05:07.126
we'll turn on one of the album

111
00:05:07.126 --> 00:05:10.363
and see what we're dealing with here.

112
00:05:10.363 --> 00:05:13.264
Something is causing it to be big.

113
00:05:13.264 --> 00:05:14.942
What could it be?

114
00:05:14.942 --> 00:05:18.041
Not that, not that, not that.

115
00:05:18.041 --> 00:05:19.393
oh, you know what?

116
00:05:19.393 --> 00:05:22.729
Maybe it's the natural, is that what it might be?

117
00:05:22.729 --> 00:05:26.896
The natural size of the image tag, 300 pixels high?

118
00:05:27.940 --> 00:05:30.509
And how high are these things?

119
00:05:30.509 --> 00:05:33.519
Width 340, yep, so it's 300 pixels high

120
00:05:33.519 --> 00:05:36.709
plus the 20 pixels of margin.

121
00:05:36.709 --> 00:05:39.207
Our 20 pixels of grid-gap that's causing it,

122
00:05:39.207 --> 00:05:41.418
so, actually, that's really interesting

123
00:05:41.418 --> 00:05:43.949
little bug that we ran into there,

124
00:05:43.949 --> 00:05:48.116
because the natural image height was 300 pixels,

125
00:05:49.180 --> 00:05:53.094
it was actually causing it to be bigger

126
00:05:53.094 --> 00:05:54.636
that it actually should be.

127
00:05:54.636 --> 00:05:56.904
So, how do we fix that?

128
00:05:56.904 --> 00:06:00.415
Let's take a look, I'm willing to bet

129
00:06:00.415 --> 00:06:04.318
if we select one of our images,

130
00:06:04.318 --> 00:06:06.158
which is album__artwork,

131
00:06:06.158 --> 00:06:07.830
so, give ourselves a selector here

132
00:06:07.830 --> 00:06:09.918
and give that a width of 100%

133
00:06:09.918 --> 00:06:13.390
so it spans the entire width of its column.

134
00:06:13.390 --> 00:06:14.223
Does that fix?

135
00:06:14.223 --> 00:06:15.056
There you go, that fixed it.

136
00:06:15.056 --> 00:06:16.858
And that, I guess, that will kick into.

137
00:06:16.858 --> 00:06:21.837
I'm very curious to see if chrome does the exact same thing.

138
00:06:21.837 --> 00:06:23.337
Let's take a look.

139
00:06:25.769 --> 00:06:28.690
Uh, there, that's a little bit more of,

140
00:06:28.690 --> 00:06:33.330
some more info because, what was happening here,

141
00:06:33.330 --> 00:06:37.500
is that the column is only 150 pixels wide,

142
00:06:37.500 --> 00:06:41.547
but I had not set my images to be 100 pixels wide.

143
00:06:41.547 --> 00:06:42.861
So, in the case of Firefox,

144
00:06:42.861 --> 00:06:44.941
they were automatically resizing it,

145
00:06:44.941 --> 00:06:48.530
in the case of Chrome, it's spilling outside of the column,

146
00:06:48.530 --> 00:06:51.170
and that's what's actually computing

147
00:06:51.170 --> 00:06:52.919
the actual height of the image.

148
00:06:52.919 --> 00:06:57.428
So, by adding a width 100%, what it will do is

149
00:06:57.428 --> 00:07:00.269
it actually forces the image to size itself

150
00:07:00.269 --> 00:07:04.337
not based on its natural 300 pixel width

151
00:07:04.337 --> 00:07:07.687
but based on the available space for it,

152
00:07:07.687 --> 00:07:10.167
which is 150 pixels for the container,

153
00:07:10.167 --> 00:07:13.479
and then that will, in turn, kick the height

154
00:07:13.479 --> 00:07:15.018
to resize itself as well,

155
00:07:15.018 --> 00:07:17.039
'cause the images are proportional.

156
00:07:17.039 --> 00:07:19.549
So, a little good thing to know there,

157
00:07:19.549 --> 00:07:21.256
and I guess, opening it up in another browser

158
00:07:21.256 --> 00:07:23.829
would've showed me a little quicker.

159
00:07:23.829 --> 00:07:25.468
Good, so we've got this,

160
00:07:25.468 --> 00:07:27.559
they are vertically centering themselves on there.

161
00:07:27.559 --> 00:07:31.309
I'm gonna go to my album and say color: white

162
00:07:32.490 --> 00:07:35.407
and change up the font-weight: 100.

163
00:07:37.431 --> 00:07:39.764
Beauty, looking really good.

164
00:07:40.969 --> 00:07:44.218
Now, as we resize it, you should see that

165
00:07:44.218 --> 00:07:47.109
we have more on the screen as we have more space,

166
00:07:47.109 --> 00:07:49.780
and you can play around with the actual size,

167
00:07:49.780 --> 00:07:52.833
this way, we can go down to 300 pixels and fit them.

168
00:07:52.833 --> 00:07:56.124
What is really neat about using this grid-template-columns,

169
00:07:56.124 --> 00:08:00.913
and fit as many in as long as they are, at least 300 pixels,

170
00:08:00.913 --> 00:08:03.393
is that this layout, this grid that we did here,

171
00:08:03.393 --> 00:08:08.124
currently it's bound by the resizing of the browser,

172
00:08:08.124 --> 00:08:11.392
but if I had this album grid, maybe two grids side by side,

173
00:08:11.392 --> 00:08:14.851
and one of them was like, 30% of the browser,

174
00:08:14.851 --> 00:08:18.211
and the other one was 70% of the browser,

175
00:08:18.211 --> 00:08:22.561
they would only show, maybe one in the first column,

176
00:08:22.561 --> 00:08:25.025
and then two in the actual second column,

177
00:08:25.025 --> 00:08:26.975
so I would have two grids side by side,

178
00:08:26.975 --> 00:08:29.036
and it's almost, sort of, like element queries

179
00:08:29.036 --> 00:08:30.766
are container queries there,

180
00:08:30.766 --> 00:08:33.437
where they would just fit as many as they can

181
00:08:33.437 --> 00:08:35.490
in the parent container, and in this case,

182
00:08:35.490 --> 00:08:38.849
the parent container is as wide as it will actually go.

183
00:08:38.849 --> 00:08:41.269
So, hopefully you learned a thing or two there

184
00:08:41.269 --> 00:08:43.280
about nesting grids, let's move into the next one,

185
00:08:43.280 --> 00:08:46.197
which is building an image gallery.

