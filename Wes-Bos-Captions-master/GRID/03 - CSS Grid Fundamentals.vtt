WEBVTT

1
00:00:03.504 --> 00:00:04.337
<v Instructor>All right,</v>

2
00:00:04.337 --> 00:00:05.282
let's get started with some fundamentals.

3
00:00:05.282 --> 00:00:07.458
Open up 03 - CSS Grid Fundamentals

4
00:00:07.458 --> 00:00:09.266
and go into the START file.

5
00:00:09.266 --> 00:00:11.610
I also have it open in my editor here.

6
00:00:11.610 --> 00:00:13.538
Now before we even write anything,

7
00:00:13.538 --> 00:00:17.083
let's understand what is a grid, and what is a relationship.

8
00:00:17.083 --> 00:00:20.562
So I've created this really nice diagram here

9
00:00:20.562 --> 00:00:22.163
that we're gonna use to understand,

10
00:00:22.163 --> 00:00:25.538
and the idea behind a grid is that you're gonna take a div,

11
00:00:25.538 --> 00:00:28.866
or a paragraph tag, or any element on the page,

12
00:00:28.866 --> 00:00:31.250
and you are going to display:grid it,

13
00:00:31.250 --> 00:00:32.994
and by display:grid-ding it,

14
00:00:32.994 --> 00:00:36.314
that opens up the ability to sort of slice and dice

15
00:00:36.314 --> 00:00:40.481
that one div that we used to have into an actual grid,

16
00:00:41.538 --> 00:00:43.754
where it's just a bunch of places

17
00:00:43.754 --> 00:00:45.989
that we can place our items.

18
00:00:45.989 --> 00:00:48.666
Now, once you've actually sliced and diced your grid,

19
00:00:48.666 --> 00:00:51.011
you're gonna have items inside of that grid,

20
00:00:51.011 --> 00:00:53.730
and then we can place them anywhere on it.

21
00:00:53.730 --> 00:00:56.579
So let's say I went ahead and took this div here,

22
00:00:56.579 --> 00:00:58.746
and sliced it into a grid,

23
00:00:59.716 --> 00:01:02.023
and I said it has one, two, three, four, five,

24
00:01:02.023 --> 00:01:03.623
six different columns.

25
00:01:03.623 --> 00:01:06.031
Some of them are bigger, some of them are smaller,

26
00:01:06.031 --> 00:01:09.031
and then I have one, two, three, four, five rows,

27
00:01:09.031 --> 00:01:11.652
so you can go ahead and explicitly define

28
00:01:11.652 --> 00:01:14.164
your columns and your rows, and then what you can do is

29
00:01:14.164 --> 00:01:17.908
let me get a different color here for science's sake.

30
00:01:17.908 --> 00:01:20.348
You can take your items that are inside of that grid,

31
00:01:20.348 --> 00:01:22.796
and it's gonna allow us to really just lay them out

32
00:01:22.796 --> 00:01:24.852
wherever it is that we want it.

33
00:01:24.852 --> 00:01:26.100
Oh, I gotta

34
00:01:26.100 --> 00:01:27.756
How does Microsoft Paint work?

35
00:01:27.756 --> 00:01:28.589
There we go.

36
00:01:28.589 --> 00:01:29.908
Some fuchsia.

37
00:01:29.908 --> 00:01:32.668
So like let's say I wanted to go from here to here.

38
00:01:32.668 --> 00:01:33.589
Good, no problem.

39
00:01:33.589 --> 00:01:35.916
I could take this one and go here to here.

40
00:01:35.916 --> 00:01:38.458
I wanted to span it all the way across.

41
00:01:38.458 --> 00:01:40.154
That would be no problem like that.

42
00:01:40.154 --> 00:01:42.786
If I only wanted to span it two different ones,

43
00:01:42.786 --> 00:01:43.619
I could do that.

44
00:01:43.619 --> 00:01:47.394
If I wanted to span it multiple rows

45
00:01:47.394 --> 00:01:49.306
I totally could as well.

46
00:01:49.306 --> 00:01:51.362
That's the whole idea behind CSS Grid is

47
00:01:51.362 --> 00:01:56.227
you take an element, dice it up into columns and rows,

48
00:01:56.227 --> 00:01:59.602
these things are collectively referred to as tracks,

49
00:01:59.602 --> 00:02:02.618
and then, once you have all of your tracks in your element,

50
00:02:02.618 --> 00:02:04.970
you can take your items and lay them out

51
00:02:04.970 --> 00:02:07.754
anywhere inside of this grid that we want

52
00:02:07.754 --> 00:02:10.492
without any need for positioning,

53
00:02:10.492 --> 00:02:12.921
top, left, bottom, position-absolute,

54
00:02:12.921 --> 00:02:15.441
all those sort of hacks that we've had before.

55
00:02:15.441 --> 00:02:16.553
Now there's a lot more to it.

56
00:02:16.553 --> 00:02:19.785
There's a whole concept of implicit and explicit grid,

57
00:02:19.785 --> 00:02:21.561
and we're gonna go into all those examples.

58
00:02:21.561 --> 00:02:23.769
That's the base idea that we have there.

59
00:02:23.769 --> 00:02:27.151
So let's go ahead and start making our own grid.

60
00:02:27.151 --> 00:02:29.151
I'm in the body tag here and I want a container,

61
00:02:29.151 --> 00:02:31.269
and inside of that I want a bunch of items.

62
00:02:31.269 --> 00:02:33.903
So I have a div with a class of item, and inside of that,

63
00:02:33.903 --> 00:02:37.589
I'm going to have an item with a dollar sign inside of it,

64
00:02:37.589 --> 00:02:39.501
and that's gonna give us one, two, three, four,

65
00:02:39.501 --> 00:02:41.497
multiply that by 10.

66
00:02:41.497 --> 00:02:44.497
So .item{$}*10, I'm gonna hit Enter,

67
00:02:45.917 --> 00:02:49.252
that's gonna spit out a div with a class of item,

68
00:02:49.252 --> 00:02:51.740
and then one through 10 inside of it.

69
00:02:51.740 --> 00:02:54.210
Now if you pop open a pair of style tags,

70
00:02:54.210 --> 00:02:56.683
and you can put your style tags above or below,

71
00:02:56.683 --> 00:02:58.810
and I'll likely be doing them below,

72
00:02:58.810 --> 00:03:01.530
just for viewability's sake.

73
00:03:01.530 --> 00:03:03.154
I don't know if viewability is a thing,

74
00:03:03.154 --> 00:03:05.162
but just so that you can see the HTML

75
00:03:05.162 --> 00:03:06.498
and see the CSS that I'm writing,

76
00:03:06.498 --> 00:03:08.075
but more likely,

77
00:03:08.075 --> 00:03:12.242
you're going to have your CSS being linked in in a CSS file.

78
00:03:13.096 --> 00:03:16.417
In there, we're going to take our container

79
00:03:16.417 --> 00:03:20.167
and display:grid, because much like flex-box,

80
00:03:21.056 --> 00:03:24.139
the whole CSS Grid thing is all about

81
00:03:25.271 --> 00:03:26.615
this sort of delicate dance

82
00:03:26.615 --> 00:03:29.679
between what's called the CSS Grid container

83
00:03:29.679 --> 00:03:31.872
and the CSS Grid items.

84
00:03:31.872 --> 00:03:35.543
So when you actually display:grid on a container,

85
00:03:35.543 --> 00:03:38.592
you make all of its direct children,

86
00:03:38.592 --> 00:03:41.207
so every element that is directly inside of it,

87
00:03:41.207 --> 00:03:44.903
you make that a CSS Grid item without having to do

88
00:03:44.903 --> 00:03:46.399
there is no, like, display

89
00:03:46.399 --> 00:03:47.991
like we don't have to take, like, item

90
00:03:47.991 --> 00:03:51.919
and say display:grid item, or griddit,

91
00:03:51.919 --> 00:03:53.360
or I don't know what it would be called,

92
00:03:53.360 --> 00:03:55.839
but it already is a grid item

93
00:03:55.839 --> 00:03:57.799
without us even having to say it.

94
00:03:57.799 --> 00:04:01.471
Now simply displaying grid on a container doesn't do much.

95
00:04:01.471 --> 00:04:04.888
That's because we have yet to slice and dice our container

96
00:04:04.888 --> 00:04:09.127
into something that has a bunch of columns or rows.

97
00:04:09.127 --> 00:04:10.912
So the way that we can do that is

98
00:04:10.912 --> 00:04:14.055
the very easiest way is to explicitly say

99
00:04:14.055 --> 00:04:16.479
how big we would like each of these to be.

100
00:04:16.479 --> 00:04:20.646
So we could go into here and say grid-template-columns

101
00:04:25.167 --> 00:04:28.089
and just go ahead and define all of the different columns

102
00:04:28.089 --> 00:04:28.922
that we'd want.

103
00:04:28.922 --> 00:04:30.472
So let's say we wanted three columns,

104
00:04:30.472 --> 00:04:32.151
each of them being 100 pixels.

105
00:04:32.151 --> 00:04:36.783
We say 100px, 100px, 100px, and give that a save,

106
00:04:36.783 --> 00:04:39.064
and what's gonna happen is the browser

107
00:04:39.064 --> 00:04:42.183
is automatically going to take this container and say,

108
00:04:42.183 --> 00:04:45.703
okay, well it needs to be 300 pixels wide,

109
00:04:45.703 --> 00:04:48.071
because they only asked for three columns,

110
00:04:48.071 --> 00:04:50.031
each of them being 100 pixels wide,

111
00:04:50.031 --> 00:04:53.496
and then it will take each of the grid items,

112
00:04:53.496 --> 00:04:55.575
remember, each of the immediate children

113
00:04:55.575 --> 00:04:59.223
of your grid container is considered a grid item,

114
00:04:59.223 --> 00:05:01.103
and it's just gonna start to lay them out

115
00:05:01.103 --> 00:05:02.417
inside of the grid.

116
00:05:02.417 --> 00:05:05.831
So we have one, two, three columns,

117
00:05:05.831 --> 00:05:08.935
and then the rows are automatically created as we go on.

118
00:05:08.935 --> 00:05:11.447
We're gonna go into that a little bit in a video or two.

119
00:05:11.447 --> 00:05:13.015
It's called the implicit grid,

120
00:05:13.015 --> 00:05:15.515
but we'll master this for now.

121
00:05:16.487 --> 00:05:18.175
Now if they're all squished together,

122
00:05:18.175 --> 00:05:20.871
we can add something called the grid gap,

123
00:05:20.871 --> 00:05:23.528
and let's just make 20px on side of that,

124
00:05:23.528 --> 00:05:25.184
and what that's gonna do is it's going to give you

125
00:05:25.184 --> 00:05:29.288
some spacing in between each of your columns and your rows.

126
00:05:29.288 --> 00:05:30.993
Again, these columns and these rows

127
00:05:30.993 --> 00:05:32.826
are collectively called tracks,

128
00:05:32.826 --> 00:05:35.784
so grid-gap is going to put some sort of like

129
00:05:35.784 --> 00:05:37.224
it's very much like margin,

130
00:05:37.224 --> 00:05:39.808
and it's gonna go in between each of your tracks.

131
00:05:39.808 --> 00:05:41.528
Now, well, what else can we do here?

132
00:05:41.528 --> 00:05:43.505
You can specify different values that you want.

133
00:05:43.505 --> 00:05:46.269
So maybe you wanted 200 pixels.

134
00:05:46.269 --> 00:05:50.142
Maybe you wanted one to be 500 pixels,

135
00:05:50.142 --> 00:05:53.670
and then you want one to be 50px.

136
00:05:53.670 --> 00:05:55.766
You can do that, and it's just going to

137
00:05:55.766 --> 00:05:58.182
By default, the items that are inside of that cell

138
00:05:58.182 --> 00:06:00.254
are going to just be stretched across,

139
00:06:00.254 --> 00:06:01.766
and we'll look at some of the different properties

140
00:06:01.766 --> 00:06:05.174
that we can use to align them, and center them, and whatnot,

141
00:06:05.174 --> 00:06:06.646
all the way across.

142
00:06:06.646 --> 00:06:08.358
Well, that's good, and by the way,

143
00:06:08.358 --> 00:06:10.430
pixels aren't the only thing that we can use here.

144
00:06:10.430 --> 00:06:13.470
We're gonna be going into different values, but if you have

145
00:06:13.470 --> 00:06:16.206
you can mix and match them with a 50rem,

146
00:06:16.206 --> 00:06:18.958
and that would be fairly large,

147
00:06:18.958 --> 00:06:22.110
or you can use pixels, you can use percentages,

148
00:06:22.110 --> 00:06:23.814
although, before you go willy-nilly

149
00:06:23.814 --> 00:06:26.398
thinking about how you used to do things

150
00:06:26.398 --> 00:06:28.350
with floats and percentages,

151
00:06:28.350 --> 00:06:30.230
hold off the percentages just for now,

152
00:06:30.230 --> 00:06:33.558
because we are going to go into a unit called the fr unit,

153
00:06:33.558 --> 00:06:35.750
which will replace your need for percentages

154
00:06:35.750 --> 00:06:39.198
in quite a lot of these different values as you want.

155
00:06:39.198 --> 00:06:41.278
You can also use the auto keyword,

156
00:06:41.278 --> 00:06:44.166
so let me bring this back to 100 pixels, auto,

157
00:06:44.166 --> 00:06:46.454
and what that will do is it will just sort of

158
00:06:46.454 --> 00:06:50.518
You see how, now, look at this, whoo, as it's responsive.

159
00:06:50.518 --> 00:06:52.374
What that does is it says it will

160
00:06:52.374 --> 00:06:54.111
automatically lay out these columns

161
00:06:54.111 --> 00:06:56.550
that we told it to be the width,

162
00:06:56.550 --> 00:06:59.406
and then it will just automatically lay out

163
00:06:59.406 --> 00:07:00.398
the rest of them.

164
00:07:00.398 --> 00:07:03.798
So it gave 500 pixels here, it gave 50 pixels here,

165
00:07:03.798 --> 00:07:05.366
it gave 100 pixels here, and it's like,

166
00:07:05.366 --> 00:07:08.646
oh, I got this much extra left over.

167
00:07:08.646 --> 00:07:10.167
I'm going to just take it all.

168
00:07:10.167 --> 00:07:11.702
I'm going to automatically lay myself out,

169
00:07:11.702 --> 00:07:16.038
and that sets us up for kind of fluid, or responsive values,

170
00:07:16.038 --> 00:07:18.894
like, how many times have your tried to do that in the past,

171
00:07:18.894 --> 00:07:23.894
where maybe you wanted a fixed sidebar of 300 pixels,

172
00:07:23.894 --> 00:07:26.326
and then you just want the rest to be there.

173
00:07:26.326 --> 00:07:28.758
Well, that's very simple in CSS Grid,

174
00:07:28.758 --> 00:07:32.046
because you can just drag and drop the value here,

175
00:07:32.046 --> 00:07:35.486
and that one will always stay fixed value.

176
00:07:35.486 --> 00:07:37.262
So you can go as far as you want,

177
00:07:37.262 --> 00:07:39.430
or we can also use some different functions

178
00:07:39.430 --> 00:07:40.846
called, like, the repeat function.

179
00:07:40.846 --> 00:07:41.846
We'll go more into this,

180
00:07:41.846 --> 00:07:46.013
but maybe you wanted five that were 100 pixels each.

181
00:07:47.670 --> 00:07:49.262
That's going to just dice it up.

182
00:07:49.262 --> 00:07:53.390
It's gonna repeat itself five times over for 100 pixels.

183
00:07:53.390 --> 00:07:56.670
Same thing goes for using rows,

184
00:07:56.670 --> 00:08:00.260
so you could say grid-template-rows,

185
00:08:00.260 --> 00:08:03.531
and maybe you want the first row to be 200 pixels,

186
00:08:03.531 --> 00:08:06.451
nice and high, the next one maybe just 100 pixels,

187
00:08:06.451 --> 00:08:08.787
and the third one 400 pixels.

188
00:08:08.787 --> 00:08:10.035
See what that gives us.

189
00:08:10.035 --> 00:08:10.868
We've got, obviously,

190
00:08:10.868 --> 00:08:13.611
the first one, second one, third one, aligning here.

191
00:08:13.611 --> 00:08:15.219
Why are they going all the way across?

192
00:08:15.219 --> 00:08:17.643
Well, because I deleted the columns, right?

193
00:08:17.643 --> 00:08:21.515
If you do not explicitly define the columns that you want,

194
00:08:21.515 --> 00:08:22.844
how many columns do you have?

195
00:08:22.844 --> 00:08:24.235
Well, just one.

196
00:08:24.235 --> 00:08:25.779
So we could bring that back

197
00:08:25.779 --> 00:08:28.779
by a grid-template-columns 200px, 500px,

198
00:08:31.620 --> 00:08:33.715
and now you see what we've done here is

199
00:08:33.715 --> 00:08:37.635
we have defined two columns that go top to bottom,

200
00:08:37.635 --> 00:08:40.451
and then we've only defined three rows,

201
00:08:40.451 --> 00:08:41.435
and you see after that,

202
00:08:41.435 --> 00:08:43.947
they sort of just start to size themselves, and again,

203
00:08:43.947 --> 00:08:47.750
that's the implicit grid that we're gonna be talking about.

204
00:08:47.750 --> 00:08:49.952
Past that, I think that's our very fundamentals

205
00:08:49.952 --> 00:08:52.647
of understanding how Grid works.

206
00:08:52.647 --> 00:08:54.574
The way that we do it is we display:grid,

207
00:08:54.574 --> 00:08:57.917
and then we slice and dice it into both columns and rows,

208
00:08:57.917 --> 00:08:59.669
which are collectively called tracks,

209
00:08:59.669 --> 00:09:02.493
and we can also space them apart

210
00:09:02.493 --> 00:09:05.326
using something called a grid-gap.

