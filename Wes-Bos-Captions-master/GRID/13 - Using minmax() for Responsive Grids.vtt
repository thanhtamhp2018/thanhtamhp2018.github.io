WEBVTT

1
00:00:00.447 --> 00:00:03.318
(metal music)

2
00:00:03.318 --> 00:00:06.082
<v Wes>All right, let's talk about minmax</v>

3
00:00:06.082 --> 00:00:09.050
when we can use it with auto-fit and auto-fill.

4
00:00:09.050 --> 00:00:11.257
I've opened up my minmax-START.

5
00:00:11.257 --> 00:00:15.035
This is in the 13 - Using minmax() for Responsive Grids.

6
00:00:15.035 --> 00:00:17.542
And for me this sort of combo

7
00:00:17.542 --> 00:00:21.066
of using auto-fit and auto-fill as well as minmax,

8
00:00:21.066 --> 00:00:23.558
it has actually replaced a lot of media queries

9
00:00:23.558 --> 00:00:25.402
that I previously had written,

10
00:00:25.402 --> 00:00:27.946
because it sort of is just responsive by nature.

11
00:00:27.946 --> 00:00:31.746
We'll turn on the dev tools here. I'll make that black.

12
00:00:31.746 --> 00:00:34.670
Let's take a look at this, this 150 pixels here.

13
00:00:34.670 --> 00:00:37.118
What if it was 100 pixels?

14
00:00:37.118 --> 00:00:39.175
We run into some issues here

15
00:00:39.175 --> 00:00:42.802
where the content starts to spill out.

16
00:00:42.802 --> 00:00:45.947
So we don't really want to have to

17
00:00:45.947 --> 00:00:48.350
figure out how wide our columns should be.

18
00:00:48.350 --> 00:00:51.606
They should just sort of flow as wide as they need to be.

19
00:00:51.606 --> 00:00:55.566
So what we can do is replace that with a minmax.

20
00:00:55.566 --> 00:00:58.338
And then what we can do is we can tell it two things.

21
00:00:58.338 --> 00:01:00.610
I'll give you a dollar if you can guess what they are.

22
00:01:00.610 --> 00:01:05.598
The minimum and the maximum that the track will be.

23
00:01:05.598 --> 00:01:08.854
So in our case we'll say minimum 150 pixels.

24
00:01:08.854 --> 00:01:11.226
That's as small as they can possibly go.

25
00:01:11.226 --> 00:01:14.345
And a maximum, I like to do 1fr.

26
00:01:14.345 --> 00:01:16.870
Meaning that at a max they will be

27
00:01:16.870 --> 00:01:19.206
the entire width of the grid.

28
00:01:19.206 --> 00:01:20.766
So give that a save now,

29
00:01:20.766 --> 00:01:25.430
and watch what happens to these items as we get smaller.

30
00:01:25.430 --> 00:01:28.758
So here we go. Getting smaller, getting smaller.

31
00:01:28.758 --> 00:01:31.714
And you see that they start to wrap on to the next line

32
00:01:31.714 --> 00:01:34.910
because at a certain point they just don't fit.

33
00:01:34.910 --> 00:01:36.676
And they allow themselves to wrap.

34
00:01:36.676 --> 00:01:38.718
And at a certain point they would just become

35
00:01:38.718 --> 00:01:41.718
one entire stacked column of values,

36
00:01:43.578 --> 00:01:46.499
rather than the four or the five that we had.

37
00:01:46.499 --> 00:01:47.658
And as you get bigger you see

38
00:01:47.658 --> 00:01:49.190
that it will start to add more.

39
00:01:49.190 --> 00:01:51.334
So that's great because we don't have to explicitly tell it

40
00:01:51.334 --> 00:01:52.878
how many columns we want.

41
00:01:52.878 --> 00:01:54.006
It will just figure it out

42
00:01:54.006 --> 00:01:56.226
given that we have the min and the max.

43
00:01:56.226 --> 00:01:58.610
Now this is using auto-fill.

44
00:01:58.610 --> 00:01:59.526
Kind of a neat thing.

45
00:01:59.526 --> 00:02:01.430
If we change it to auto-fit,

46
00:02:01.430 --> 00:02:03.874
this is probably what you'll be using more likely,

47
00:02:03.874 --> 00:02:06.251
what it will do is it will then

48
00:02:06.251 --> 00:02:08.570
not give us that extra space.

49
00:02:08.570 --> 00:02:11.414
So let me go back to auto-fill.

50
00:02:11.414 --> 00:02:14.884
I have four items, so it will just take up the first four

51
00:02:14.884 --> 00:02:16.746
and continue to make them.

52
00:02:16.746 --> 00:02:19.774
I'll leave them this big, so we have nine tracks here.

53
00:02:19.774 --> 00:02:21.726
If I change that to auto-fit,

54
00:02:21.726 --> 00:02:23.886
you see that it will just make

55
00:02:23.886 --> 00:02:26.286
those four tracks that we actually needed

56
00:02:26.286 --> 00:02:30.754
and stretch the items inside of those tracks to fit.

57
00:02:30.754 --> 00:02:33.378
So that's really, really nice, because now watch it.

58
00:02:33.378 --> 00:02:35.630
It will always look perfectly clean,

59
00:02:35.630 --> 00:02:37.474
but as I run out of space

60
00:02:37.474 --> 00:02:40.190
it will still wrap itself around as we need it.

61
00:02:40.190 --> 00:02:43.986
So auto-fit and auto-fill, combined with minmax.

62
00:02:43.986 --> 00:02:45.514
That's something we're gonna be using quite a bit

63
00:02:45.514 --> 00:02:47.810
when we get into the real world examples.

64
00:02:47.810 --> 00:02:49.806
Sort of in the same vein as minmax,

65
00:02:49.806 --> 00:02:52.970
though not directly related,

66
00:02:52.970 --> 00:02:55.850
is the fit-content function in CSS.

67
00:02:55.850 --> 00:02:57.274
So let's just comment this out,

68
00:02:57.274 --> 00:03:00.606
and let's make a bunch of columns that we have.

69
00:03:00.606 --> 00:03:02.570
grid-template-column, and it's gtc.

70
00:03:02.570 --> 00:03:03.574
I don't know why I've been trying

71
00:03:03.574 --> 00:03:04.866
to type it manually all this type.

72
00:03:04.866 --> 00:03:07.746
gtc tab will get you what you want.

73
00:03:07.746 --> 00:03:10.878
And let's say 150px four times over.

74
00:03:10.878 --> 00:03:13.294
One, two, three, four. Good.

75
00:03:13.294 --> 00:03:16.954
That will give us four columns that are 150 pixels each.

76
00:03:16.954 --> 00:03:19.395
However if I change the first one to auto,

77
00:03:19.395 --> 00:03:21.918
what will happen is it will just take up

78
00:03:21.918 --> 00:03:24.814
that remaining space that it has in here

79
00:03:24.814 --> 00:03:26.718
after we've then done it.

80
00:03:26.718 --> 00:03:29.930
Actually what's kind of neat is if you resize it,

81
00:03:29.930 --> 00:03:32.586
you'll see that it will also get smaller

82
00:03:32.586 --> 00:03:33.934
as we run out of room.

83
00:03:33.934 --> 00:03:36.874
Now what we can do instead of using auto

84
00:03:36.874 --> 00:03:38.535
is use the fit-content function.

85
00:03:38.535 --> 00:03:40.130
Because sometimes you may be telling yourself,

86
00:03:40.130 --> 00:03:42.964
"Mm. That's good, but it's a bit too big."

87
00:03:42.964 --> 00:03:46.098
Especially if these were getting even smaller.

88
00:03:46.098 --> 00:03:48.014
So we can replace that with fit-content,

89
00:03:48.014 --> 00:03:51.274
and you can give it what's called a clamp value.

90
00:03:51.274 --> 00:03:54.605
The max width, or a max height if it was a row,

91
00:03:54.605 --> 00:03:56.524
that this thing should go to.

92
00:03:56.524 --> 00:03:59.559
Let's say I want it to be auto,

93
00:03:59.559 --> 00:04:03.726
but I don't want it to go more than, let's say 100px.

94
00:04:05.450 --> 00:04:07.865
And then that will clamp it at 100 pixels wide,

95
00:04:07.865 --> 00:04:11.706
and then leave that extra space just open to you.

96
00:04:11.706 --> 00:04:14.150
So fit-content, I don't use that all that often,

97
00:04:14.150 --> 00:04:17.825
but sometimes you run in to some edge case scenarios,

98
00:04:17.825 --> 00:04:19.878
and just know that that might be a solution

99
00:04:19.878 --> 00:04:21.628
to your sizing needs.

100
00:04:23.210 --> 00:04:25.710
(metal music)

