WEBVTT

1
00:00:00.158 --> 00:00:03.055
(heavy metal riff)

2
00:00:03.055 --> 00:00:05.603
<v Wes Bos>Alright, so in this video we are going to talk</v>

3
00:00:05.603 --> 00:00:08.294
about Flexbox versus Grid and when

4
00:00:08.294 --> 00:00:10.138
do you use one or the other?

5
00:00:10.138 --> 00:00:12.455
Are they replacements, do they go together,

6
00:00:12.455 --> 00:00:14.168
can you use them together?

7
00:00:14.168 --> 00:00:17.207
And sort of my idea here is, I'm just kinda give ya

8
00:00:17.207 --> 00:00:20.262
a few points about using one or the other

9
00:00:20.262 --> 00:00:21.885
and then we're gonna go through

10
00:00:21.885 --> 00:00:24.702
I think about nine or ten examples of different UI

11
00:00:24.702 --> 00:00:26.970
patterns that you might want to do.

12
00:00:26.970 --> 00:00:29.239
And I'm gonna show you how I would implement them

13
00:00:29.239 --> 00:00:31.686
either in Grid or in Flexbox where it's

14
00:00:31.686 --> 00:00:35.409
the case that only Flexbox can only do a specific thing.

15
00:00:35.409 --> 00:00:40.125
So as in general Flexbox, sorry in general Grid

16
00:00:40.125 --> 00:00:43.045
can do everything that Flexbox can do,

17
00:00:43.045 --> 00:00:46.432
some people are of the mindset that Flexbox

18
00:00:46.432 --> 00:00:49.332
is for one-dimensional where you lay things out

19
00:00:49.332 --> 00:00:54.187
on a X or a Y axis and CSS Grid is for a multidimensional

20
00:00:54.187 --> 00:00:56.938
when you lay things out on a X and a Y grid.

21
00:00:56.938 --> 00:00:59.536
But that, I don't think that really holds any water

22
00:00:59.536 --> 00:01:02.492
because CSS Grid is also really good at aligning

23
00:01:02.492 --> 00:01:04.651
things on a X or a Y axis.

24
00:01:04.651 --> 00:01:08.151
So um people, you might prefer Flexbox because

25
00:01:08.151 --> 00:01:11.273
you already know it or currently browser support

26
00:01:11.273 --> 00:01:13.515
for Flexbox is much better than Grid,

27
00:01:13.515 --> 00:01:16.627
although that will soon be a thing of the past.

28
00:01:16.627 --> 00:01:18.842
The syntax, some people might like the syntax.

29
00:01:18.842 --> 00:01:21.361
It can get a little bit hairy with the repeat

30
00:01:21.361 --> 00:01:23.755
and the minmax but I think once you've done

31
00:01:23.755 --> 00:01:26.943
six or seven examples with that it starts to set in.

32
00:01:26.943 --> 00:01:29.520
One big benefit for Flexbox over Grid is that

33
00:01:29.520 --> 00:01:31.538
they can be transitioned, meaning that if you want

34
00:01:31.538 --> 00:01:34.353
to animate a Flex grow value and you wanted something

35
00:01:34.353 --> 00:01:36.772
to get bigger, in my JavaScript 30 course,

36
00:01:36.772 --> 00:01:38.692
we made a image gallery with this and it's got a

37
00:01:38.692 --> 00:01:40.953
really nice animation to it.

38
00:01:40.953 --> 00:01:44.264
You can't currently transition anything except

39
00:01:44.264 --> 00:01:47.264
for Grid gap on Firefox in CSS Grid.

40
00:01:48.178 --> 00:01:51.261
So that's a huge benefit for Flexbox.

41
00:01:52.208 --> 00:01:55.191
Pros for Grid is, it's much more consistent

42
00:01:55.191 --> 00:01:57.192
across all the browsers and there's not

43
00:01:57.192 --> 00:01:59.406
as many bugs as Flexbox has.

44
00:01:59.406 --> 00:02:02.390
You really only need to learn one thing.

45
00:02:02.390 --> 00:02:03.889
So if you're trying to be consistent

46
00:02:03.889 --> 00:02:05.876
on your team that's good.

47
00:02:05.876 --> 00:02:07.882
And then also if you're designing something

48
00:02:07.882 --> 00:02:10.346
on a single axis and then you decide you want

49
00:02:10.346 --> 00:02:13.005
to wrap that into multiple rows.

50
00:02:13.005 --> 00:02:17.597
It's very easy to sort of just add more rows with CSS Grid.

51
00:02:17.597 --> 00:02:19.777
Sp let's just go through a whole bunch

52
00:02:19.777 --> 00:02:21.835
of different examples that we have.

53
00:02:21.835 --> 00:02:24.123
Some things that you used to be able to do in Flexbox,

54
00:02:24.123 --> 00:02:26.289
I'm gonna show you how to do in Grid.

55
00:02:26.289 --> 00:02:28.611
And some things that you can do in Flexbox

56
00:02:28.611 --> 00:02:31.845
that are just not possible at all in Grid.

57
00:02:31.845 --> 00:02:35.460
So let's start the first one, which is axis flipping.

58
00:02:35.460 --> 00:02:38.776
And that is with Flexbox, you have the ability

59
00:02:38.776 --> 00:02:42.609
to flip the flex direction from column to row.

60
00:02:43.805 --> 00:02:46.269
So column to row, column to row, column to row.

61
00:02:46.269 --> 00:02:48.837
So let's open up axis-flipping-start

62
00:02:48.837 --> 00:02:51.300
and let's take a look at what we got here.

63
00:02:51.300 --> 00:02:53.174
It's got a button that when you click it,

64
00:02:53.174 --> 00:02:55.620
it runs this function and then it simply just toggles

65
00:02:55.620 --> 00:02:59.546
a class of flipper on this div with a class of flipper.

66
00:02:59.546 --> 00:03:01.629
So let's open up start...

67
00:03:04.310 --> 00:03:07.495
Good, then we will grab our flipper

68
00:03:07.495 --> 00:03:09.328
and say display: grid.

69
00:03:10.452 --> 00:03:13.386
We'll add some grid-gap 20px and then we'll say

70
00:03:13.386 --> 00:03:16.719
grid-template-columns, repeat, auto-fit,

71
00:03:17.651 --> 00:03:18.901
minmax, 50px...

72
00:03:20.034 --> 00:03:20.867
and 1fr...

73
00:03:22.201 --> 00:03:24.311
you gotta be able to spell display right.

74
00:03:24.311 --> 00:03:26.804
There we go, okay so that's on and then when I flip it

75
00:03:26.804 --> 00:03:28.185
what I wanna do, see how it's adding

76
00:03:28.185 --> 00:03:30.268
and removing this class of flip?

77
00:03:30.268 --> 00:03:34.325
I'm going to say when the flipper has also a class of flip.

78
00:03:34.325 --> 00:03:37.254
How do you switch it from column to row?

79
00:03:37.254 --> 00:03:39.188
Well you can just make it one column.

80
00:03:39.188 --> 00:03:41.688
So grid-template-columns, 1fr.

81
00:03:44.377 --> 00:03:45.748
That should do it.

82
00:03:45.748 --> 00:03:47.945
Now I click on it and it's gonna flip it

83
00:03:47.945 --> 00:03:49.519
from one to another.

84
00:03:49.519 --> 00:03:52.966
The one thing you cannot do is, Flexbox has the ability

85
00:03:52.966 --> 00:03:56.532
to do row reverse and column reverse

86
00:03:56.532 --> 00:03:58.455
which would take the items and flip them

87
00:03:58.455 --> 00:03:59.850
in the opposite direction.

88
00:03:59.850 --> 00:04:01.898
You can do that with the order property

89
00:04:01.898 --> 00:04:03.297
but that would be really tedious,

90
00:04:03.297 --> 00:04:05.801
assigning a order property to each one.

91
00:04:05.801 --> 00:04:07.873
But in this case you can flip it over.

92
00:04:07.873 --> 00:04:09.892
And what's neat about that is you can also,

93
00:04:09.892 --> 00:04:12.973
if you wanted to, you could just add another column

94
00:04:12.973 --> 00:04:15.455
and then when you flip it you can flip it from columns

95
00:04:15.455 --> 00:04:19.143
to I guess rows of two columns, so pretty neat there.

96
00:04:19.143 --> 00:04:20.385
So that's the first one.

97
00:04:20.385 --> 00:04:21.685
Let's move on to the second one,

98
00:04:21.685 --> 00:04:23.901
which is controls on the right.

99
00:04:23.901 --> 00:04:26.008
And that looks like something like this.

100
00:04:26.008 --> 00:04:29.132
Where maybe you have some media and you've got some

101
00:04:29.132 --> 00:04:32.032
buttons on the right here and then whatever is left

102
00:04:32.032 --> 00:04:35.385
is going to be for the title of the actual song.

103
00:04:35.385 --> 00:04:38.088
So let's look at how we can code that up in grid.

104
00:04:38.088 --> 00:04:39.942
Controls on the right start.

105
00:04:39.942 --> 00:04:41.222
Here we go.

106
00:04:41.222 --> 00:04:44.158
So I'm instead of assuming that there's

107
00:04:44.158 --> 00:04:46.502
going to be three buttons because I don't want to

108
00:04:46.502 --> 00:04:48.411
have to do that with Flexbox, you could just apply

109
00:04:48.411 --> 00:04:51.095
a flex one to this and then it would fit it up.

110
00:04:51.095 --> 00:04:52.782
What we're going to do is we're just going

111
00:04:52.782 --> 00:04:54.607
to make a one column grid.

112
00:04:54.607 --> 00:04:57.107
So grid-template-columns, 1fr.

113
00:04:59.120 --> 00:05:03.807
And we're also, I guess we also have to display: grid on it.

114
00:05:03.807 --> 00:05:05.623
Good, now we've got a bit of a problem here

115
00:05:05.623 --> 00:05:09.755
because our additional items are now being added as rows

116
00:05:09.755 --> 00:05:11.942
instead of to the right here.

117
00:05:11.942 --> 00:05:14.444
So what we can do is, we can change that

118
00:05:14.444 --> 00:05:18.307
with our grid-auto-flow, so grid-auto-flow.

119
00:05:18.307 --> 00:05:20.733
We'll change that to column and then they will

120
00:05:20.733 --> 00:05:22.205
just line up nicely on the end.

121
00:05:22.205 --> 00:05:25.373
So if I were to turn this on, each of these tracks,

122
00:05:25.373 --> 00:05:29.116
you'll see that our actual column is number one here

123
00:05:29.116 --> 00:05:32.325
and then any additional items that get thrown our way,

124
00:05:32.325 --> 00:05:33.916
they are not added as new rows,

125
00:05:33.916 --> 00:05:36.325
they are added as new columns.

126
00:05:36.325 --> 00:05:38.919
So if they are, if we are to increase the amount of buttons

127
00:05:38.919 --> 00:05:41.078
on one of these items right here, you'll see

128
00:05:41.078 --> 00:05:43.561
that they just nicely stack up to the right

129
00:05:43.561 --> 00:05:46.044
and then the additional room is used up

130
00:05:46.044 --> 00:05:47.414
for the title of the song.

131
00:05:47.414 --> 00:05:50.277
And that's great because if I were to then resize

132
00:05:50.277 --> 00:05:53.000
the width of something like this,

133
00:05:53.000 --> 00:05:55.199
then you can see that, well obviously at a certain point

134
00:05:55.199 --> 00:05:58.191
it gets brutal but you, the tech starts to wrap

135
00:05:58.191 --> 00:06:02.632
on to new lines as it starts to run out of space.

136
00:06:02.632 --> 00:06:06.799
Let's move on to the next one which is: flex-on-item.

137
00:06:08.352 --> 00:06:11.272
So here is something that I do quite often

138
00:06:11.272 --> 00:06:14.449
and it's making media controls for a video player.

139
00:06:14.449 --> 00:06:16.219
Where you have a video player and this might be

140
00:06:16.219 --> 00:06:19.248
like a scrubber bar that shows you far along you are.

141
00:06:19.248 --> 00:06:21.798
And then you have buttons for pausing and playing,

142
00:06:21.798 --> 00:06:24.104
for speeding up or slowing it down.

143
00:06:24.104 --> 00:06:26.957
For turning captions on and for downloading the video.

144
00:06:26.957 --> 00:06:28.609
So, well the way I like to do this is just

145
00:06:28.609 --> 00:06:30.936
to have the buttons take up as much space as they need

146
00:06:30.936 --> 00:06:33.705
and then whatever we have left, in this case a scrubber

147
00:06:33.705 --> 00:06:35.485
will just take up that much value.

148
00:06:35.485 --> 00:06:36.864
So if there's a lot of room, the scrubber

149
00:06:36.864 --> 00:06:38.748
will be really wide and if there's not a lot of room,

150
00:06:38.748 --> 00:06:42.127
the scrubber will be a little bit more shallow.

151
00:06:42.127 --> 00:06:45.544
So let's open up that flex on item start.

152
00:06:47.642 --> 00:06:50.274
And this is a case where I prefer Flexbox

153
00:06:50.274 --> 00:06:51.981
for this and I'll show you why.

154
00:06:51.981 --> 00:06:54.105
So if I were to, well I gotta open up

155
00:06:54.105 --> 00:06:56.355
the starter files for this.

156
00:06:58.559 --> 00:07:00.549
Take our controls, so we have these controls

157
00:07:00.549 --> 00:07:02.370
and we have all of our items in there.

158
00:07:02.370 --> 00:07:04.870
So I will say display: flex...

159
00:07:06.293 --> 00:07:09.987
and immediately that's going to make the container here

160
00:07:09.987 --> 00:07:12.924
a flex container and then each item inside of it

161
00:07:12.924 --> 00:07:15.409
will be a flex item and I have put

162
00:07:15.409 --> 00:07:18.355
a min-width of a 100px on that scrubber.

163
00:07:18.355 --> 00:07:21.021
But what I want, is I want the scrubber

164
00:07:21.021 --> 00:07:23.688
to take up the rest of the room.

165
00:07:23.688 --> 00:07:27.619
So I can just go to the scrubber and say just flex: 1

166
00:07:27.619 --> 00:07:30.572
and that will flex grow because there's extra space.

167
00:07:30.572 --> 00:07:33.389
It will grow to take up the rest of the space

168
00:07:33.389 --> 00:07:35.107
and then I can also say.

169
00:07:35.107 --> 00:07:37.474
I think it is align-items: center.

170
00:07:37.474 --> 00:07:39.087
There that will vertically center it,

171
00:07:39.087 --> 00:07:40.684
you see it's perfectly centered.

172
00:07:40.684 --> 00:07:42.744
Now that's great, if I were to do that in Grid,

173
00:07:42.744 --> 00:07:43.775
how would I do it?

174
00:07:43.775 --> 00:07:46.180
Let me comment that out, comment that out.

175
00:07:46.180 --> 00:07:49.663
I would have to do display: grid

176
00:07:49.663 --> 00:07:52.246
and then grid-template-columns:

177
00:07:53.204 --> 00:07:54.954
auto auto auto 1fr...

178
00:07:55.957 --> 00:07:59.540
auto auto and that will give me the same layout

179
00:07:59.540 --> 00:08:02.301
because I want these, all these buttons to take up

180
00:08:02.301 --> 00:08:06.099
the same amount then the actual scrubber and then auto auto

181
00:08:06.099 --> 00:08:08.681
and that's, that's a little bit brittle because

182
00:08:08.681 --> 00:08:11.279
what if I were to delete one of the buttons?

183
00:08:11.279 --> 00:08:14.169
Now all of a sudden the thing that is, getting bigger

184
00:08:14.169 --> 00:08:16.249
is one of the buttons not the actual value.

185
00:08:16.249 --> 00:08:18.010
So you can see the value in being able

186
00:08:18.010 --> 00:08:20.308
to apply the flex directly to the element

187
00:08:20.308 --> 00:08:23.682
and that way if the order or the number of items

188
00:08:23.682 --> 00:08:28.390
in your flex container changes you aren't screwed

189
00:08:28.390 --> 00:08:29.915
like I am in this case.

190
00:08:29.915 --> 00:08:33.108
So Flexbox for the win on that one.

191
00:08:33.108 --> 00:08:36.417
Let's move on to the next one which is perfectly centered

192
00:08:36.417 --> 00:08:38.124
and this is something that you do a lot.

193
00:08:38.124 --> 00:08:40.543
You have like a height of hero or something

194
00:08:40.543 --> 00:08:42.208
and then you have any number of items

195
00:08:42.208 --> 00:08:44.791
and you want to perfectly center those in the middle.

196
00:08:44.791 --> 00:08:47.487
So we'll open perfectly-centered-start

197
00:08:47.487 --> 00:08:49.447
and if I, let's try, let's try

198
00:08:49.447 --> 00:08:51.891
to perfectly center it in Flexbox first.

199
00:08:51.891 --> 00:08:55.746
So we'll say display: flex and now, okay now it's turned it

200
00:08:55.746 --> 00:08:58.485
into rows so we have to change the flex direction.

201
00:08:58.485 --> 00:09:01.735
So flex-direction: column, there we go.

202
00:09:03.094 --> 00:09:07.261
And then I would say justify-content: center, I believe

203
00:09:08.148 --> 00:09:10.148
and align-items: center.

204
00:09:12.065 --> 00:09:14.155
Bam, perfect that's exactly what I want.

205
00:09:14.155 --> 00:09:16.859
I did that in Flexbox in four values there.

206
00:09:16.859 --> 00:09:18.885
Now let's see how do I do it in Grid?

207
00:09:18.885 --> 00:09:21.961
So we will display: grid on that

208
00:09:21.961 --> 00:09:25.587
and then we will justify-content: center, that will bring it

209
00:09:25.587 --> 00:09:28.920
into the center and align-items: center.

210
00:09:30.490 --> 00:09:32.153
There we go, that's actually not what I want.

211
00:09:32.153 --> 00:09:36.328
I goofed it up, I think it is justify-items.

212
00:09:36.328 --> 00:09:39.405
Center yeah, and then align-items.

213
00:09:39.405 --> 00:09:43.572
So this will still fill up the entire grid, right.

214
00:09:44.907 --> 00:09:47.657
So the grid is obviously 200 pixels high

215
00:09:47.657 --> 00:09:50.228
and if I made that 400 pixels high, that it would be

216
00:09:50.228 --> 00:09:51.892
even bigger but what I want is them

217
00:09:51.892 --> 00:09:53.370
to be perfectly centered in here.

218
00:09:53.370 --> 00:09:55.494
I don't want them to be this big.

219
00:09:55.494 --> 00:09:58.002
So I think that is align-content

220
00:09:58.002 --> 00:10:00.290
because we want to pop it in the middle, there we go.

221
00:10:00.290 --> 00:10:02.893
And you can see that the rows themselves

222
00:10:02.893 --> 00:10:05.357
are not stretching now they are just being as big

223
00:10:05.357 --> 00:10:07.021
as the content needs to be.

224
00:10:07.021 --> 00:10:08.139
So I don't know.

225
00:10:08.139 --> 00:10:10.134
That works perfectly in both of them,

226
00:10:10.134 --> 00:10:13.133
I wouldn't sweat the extra line of Flexbox.

227
00:10:13.133 --> 00:10:16.230
You can make your decision on which one is better

228
00:10:16.230 --> 00:10:18.506
for you in that case.

229
00:10:18.506 --> 00:10:21.201
Self-control, this one is pretty neat.

230
00:10:21.201 --> 00:10:24.091
This is one that is only doable in Grid.

231
00:10:24.091 --> 00:10:26.905
So if you want to align something in all four corners,

232
00:10:26.905 --> 00:10:28.646
when would you ever do this, I don't know.

233
00:10:28.646 --> 00:10:30.684
But let me, I'm just gonna show you the benefit

234
00:10:30.684 --> 00:10:34.384
of having the justify self and the align self values.

235
00:10:34.384 --> 00:10:39.352
So open up self-control-start and we'll grab this corners.

236
00:10:39.352 --> 00:10:41.994
I've got display: grid already on there

237
00:10:41.994 --> 00:10:44.986
and we're going to make a four by, er two by two grid.

238
00:10:44.986 --> 00:10:47.653
So grid-template-columns: 1fr...

239
00:10:50.378 --> 00:10:55.079
1fr and then I can also do grid-template-rows: 1fr 1fr.

240
00:10:55.079 --> 00:10:57.682
Similarly you can also just do grid-template

241
00:10:57.682 --> 00:11:01.403
as a shorthand and what that will allow us to do is

242
00:11:01.403 --> 00:11:05.398
we can just put a forward slash 1fr 1fr in there

243
00:11:05.398 --> 00:11:07.044
and that's the exact same thing.

244
00:11:07.044 --> 00:11:10.044
You can open it up in your dev tools

245
00:11:11.128 --> 00:11:14.829
and inspect it and you see that grid-template

246
00:11:14.829 --> 00:11:17.500
is just shorthand for grid-template-areas,

247
00:11:17.500 --> 00:11:20.271
grid-template-rows and grid-template-columns.

248
00:11:20.271 --> 00:11:22.757
Good now I wanna put them in the top-right hand-corner,

249
00:11:22.757 --> 00:11:26.129
by default they are stretching so we'll go on to here

250
00:11:26.129 --> 00:11:28.379
and we'll align-items: end.

251
00:11:30.477 --> 00:11:32.621
That will put them at the bottom

252
00:11:32.621 --> 00:11:36.204
and then I also want to justify-items: end.

253
00:11:38.840 --> 00:11:40.010
There so that puts them in

254
00:11:40.010 --> 00:11:42.528
the bottom-right hand-corner of each of them.

255
00:11:42.528 --> 00:11:45.594
Now I wanna override it for the first one

256
00:11:45.594 --> 00:11:47.372
and the second one.

257
00:11:47.372 --> 00:11:50.094
I wanna stick them to the top and then for the first one

258
00:11:50.094 --> 00:11:52.460
and the third one I wanna stick them to the left.

259
00:11:52.460 --> 00:11:54.670
So I've got these selectors here.

260
00:11:54.670 --> 00:11:57.253
So we can use align-self: start

261
00:11:59.315 --> 00:12:00.748
and that will put them at the top,

262
00:12:00.748 --> 00:12:01.951
so we have that in Flexbox,

263
00:12:01.951 --> 00:12:05.171
but what we don't have is a justify-self.

264
00:12:05.171 --> 00:12:07.799
The ability to do it on the other axis

265
00:12:07.799 --> 00:12:09.879
and we want to do that as start.

266
00:12:09.879 --> 00:12:13.111
So that will have full control over, overriding anything

267
00:12:13.111 --> 00:12:15.692
that we've set on the container, we can override

268
00:12:15.692 --> 00:12:19.098
them on each of the individual items.

269
00:12:19.098 --> 00:12:21.443
Good, good, good, what else have we got here?

270
00:12:21.443 --> 00:12:23.764
Self control stacked layout.

271
00:12:23.764 --> 00:12:27.061
Okay so this is another one that is only doable in Flexbox.

272
00:12:27.061 --> 00:12:30.731
So one of the, I guess, downsides or one of the just ways

273
00:12:30.731 --> 00:12:34.441
that Grid works is that you're columns are rigid.

274
00:12:34.441 --> 00:12:38.601
Meaning that you can't have rows that are different sizes

275
00:12:38.601 --> 00:12:41.005
and if you wanted to attain something like this,

276
00:12:41.005 --> 00:12:43.431
you would have to do manual spanning

277
00:12:43.431 --> 00:12:45.851
across all of the different items.

278
00:12:45.851 --> 00:12:48.934
So have a look at stack layout start.

279
00:12:49.857 --> 00:12:53.426
So we'll go on to our stacked and say display: flex

280
00:12:53.426 --> 00:12:54.980
and that will put them all on one line

281
00:12:54.980 --> 00:12:57.039
but I've set them to be 30% width,

282
00:12:57.039 --> 00:12:58.661
so they should be able to wrap.

283
00:12:58.661 --> 00:13:01.574
So we'll say flex-wrap: wrap and that

284
00:13:01.574 --> 00:13:03.862
will put them each on their own line.

285
00:13:03.862 --> 00:13:06.795
Now if I want to make them like we had,

286
00:13:06.795 --> 00:13:10.378
we just say justify-content: space-between.

287
00:13:15.335 --> 00:13:18.313
Or space-around and that will stack them

288
00:13:18.313 --> 00:13:21.478
exactly how we want with the space in the middle.

289
00:13:21.478 --> 00:13:23.810
One downside we have with Flexbox,

290
00:13:23.810 --> 00:13:26.229
if I were to take that off is that there

291
00:13:26.229 --> 00:13:29.174
is no concept of flex gap or just gap at all.

292
00:13:29.174 --> 00:13:31.220
And we, I hopefully we will be getting that

293
00:13:31.220 --> 00:13:34.835
in Flexbox because using margin on flex items

294
00:13:34.835 --> 00:13:38.995
is not ideal because it leads to unintended margin

295
00:13:38.995 --> 00:13:40.846
on the right and the left and then

296
00:13:40.846 --> 00:13:43.342
you have to get into negative margins to take that off.

297
00:13:43.342 --> 00:13:45.948
So it's not great, but that is one for Flexbox,

298
00:13:45.948 --> 00:13:47.365
can only do that.

299
00:13:48.674 --> 00:13:52.853
Unknown content size, so if we have something like this

300
00:13:52.853 --> 00:13:56.446
where you don't know how wide it is and you want to put it

301
00:13:56.446 --> 00:13:59.894
in the middle, how do we do that with Grid?

302
00:13:59.894 --> 00:14:03.644
Well we'll go to unknown content size, start.

303
00:14:04.624 --> 00:14:05.791
Display: grid.

304
00:14:06.968 --> 00:14:09.441
We do know how many columns we have in this case.

305
00:14:09.441 --> 00:14:12.930
So we can say grid-template-columns.

306
00:14:12.930 --> 00:14:14.955
We can just repeat for five

307
00:14:14.955 --> 00:14:17.277
and we can make the size of them auto.

308
00:14:17.277 --> 00:14:19.575
And that will just auto-size them based on the, it's kinda,

309
00:14:19.575 --> 00:14:22.663
you see the image loaded there and it reflowed itself?

310
00:14:22.663 --> 00:14:26.013
And then if we wanted to center it,

311
00:14:26.013 --> 00:14:29.301
we just have to simply justify-content: center

312
00:14:29.301 --> 00:14:30.909
and everything is centered.

313
00:14:30.909 --> 00:14:34.076
We'll put some grid-gap: 20px on that.

314
00:14:35.630 --> 00:14:37.089
And we're in good shape.

315
00:14:37.089 --> 00:14:39.749
So if you ever do know the amount of columns

316
00:14:39.749 --> 00:14:42.225
that you have but do not know how much content

317
00:14:42.225 --> 00:14:44.283
will be inside of each one, then that is

318
00:14:44.283 --> 00:14:46.950
a nice little use case for that.

319
00:14:48.263 --> 00:14:50.160
Unknown number of items.

320
00:14:50.160 --> 00:14:52.386
So this is one where you just want them

321
00:14:52.386 --> 00:14:54.948
to take up as much room as you want

322
00:14:54.948 --> 00:14:57.180
but you don't know how many columns there are going to be.

323
00:14:57.180 --> 00:14:59.427
So I made this little example where we can

324
00:14:59.427 --> 00:15:02.306
keep adding items and then once you hit that minmax value

325
00:15:02.306 --> 00:15:04.157
they'll just start to wrap.

326
00:15:04.157 --> 00:15:08.900
So let's open up unknown number of items, start.

327
00:15:08.900 --> 00:15:13.067
In here we'll say display: grid, grid-template-columns.

328
00:15:14.343 --> 00:15:17.790
We're going to repeat, auto-fit and then we're

329
00:15:17.790 --> 00:15:20.830
gonna use our mixmax that we learned about earlier

330
00:15:20.830 --> 00:15:25.410
to be at a minimum 50 pixels and at a minimum 1fr.

331
00:15:25.410 --> 00:15:30.328
And we'll put some grid gap 20px inside of it, good.

332
00:15:30.328 --> 00:15:34.158
Now as I add more items, they will automatically reflow

333
00:15:34.158 --> 00:15:36.808
and this auto-fit algorithm is going to fit

334
00:15:36.808 --> 00:15:39.786
as many as it can but once they are 50 pixels

335
00:15:39.786 --> 00:15:43.258
and they cannot fit anymore they will then start to wrap.

336
00:15:43.258 --> 00:15:45.820
So that's one that I really, really like.

337
00:15:45.820 --> 00:15:48.228
Using, I use Flexbox for that a lot,

338
00:15:48.228 --> 00:15:50.407
just to fit all on to one line.

339
00:15:50.407 --> 00:15:53.352
The problem with that is as soon as you started to wrap

340
00:15:53.352 --> 00:15:55.302
with Flexbox, you got some weird margin

341
00:15:55.302 --> 00:15:57.328
and everything didn't line up perfectly.

342
00:15:57.328 --> 00:16:00.796
So in this case I really like Grid for that.

343
00:16:00.796 --> 00:16:03.526
I think we've got a couple more here,

344
00:16:03.526 --> 00:16:05.016
unknown number of items.

345
00:16:05.016 --> 00:16:07.661
One more variable widths on each row.

346
00:16:07.661 --> 00:16:10.684
So if you have something like this, where this one

347
00:16:10.684 --> 00:16:13.377
is really, really long and then these ones aren't,

348
00:16:13.377 --> 00:16:15.041
this is not something that a grid can do

349
00:16:15.041 --> 00:16:18.435
because you notice that the items

350
00:16:18.435 --> 00:16:19.904
are not perfectly lining up.

351
00:16:19.904 --> 00:16:22.344
Unless you were to manually span each of them,

352
00:16:22.344 --> 00:16:25.607
which you cannot, Flexbox is a better use case for this.

353
00:16:25.607 --> 00:16:29.943
So let's open up the variable widths each row.

354
00:16:29.943 --> 00:16:32.439
Display: flex, good.

355
00:16:32.439 --> 00:16:34.272
Flex-wrap: wrap, good.

356
00:16:35.166 --> 00:16:39.950
And then you see that like if I put a border on here...

357
00:16:39.950 --> 00:16:42.142
the flex container only goes this far.

358
00:16:42.142 --> 00:16:44.016
So we can go to each of them and put

359
00:16:44.016 --> 00:16:46.477
a flex value of one on it and then it's just going

360
00:16:46.477 --> 00:16:49.115
to fit it in as perfectly as we want.

361
00:16:49.115 --> 00:16:51.634
And here's a good example of the margin error

362
00:16:51.634 --> 00:16:52.948
that I was talking about.

363
00:16:52.948 --> 00:16:55.170
Often what you want is, you want your items

364
00:16:55.170 --> 00:16:57.547
to butt up on the left and the right.

365
00:16:57.547 --> 00:16:58.554
You don't want that.

366
00:16:58.554 --> 00:17:00.512
So if you were to take the margin off,

367
00:17:00.512 --> 00:17:05.274
they butt up perfectly, but you put it on, then they go off.

368
00:17:05.274 --> 00:17:08.727
So you maybe do like margin-right: 10px

369
00:17:08.727 --> 00:17:10.159
and then it takes it off here

370
00:17:10.159 --> 00:17:12.632
because you don't know what the, you don't know

371
00:17:12.632 --> 00:17:14.833
that snickers is the last one in the actual row

372
00:17:14.833 --> 00:17:17.615
and as it gets bigger it's going to reflow that.

373
00:17:17.615 --> 00:17:20.956
So what people have done is, they would do something

374
00:17:20.956 --> 00:17:24.271
like this and then they would take the actual container

375
00:17:24.271 --> 00:17:27.992
and let's say margin-right: -10px or something like that

376
00:17:27.992 --> 00:17:31.258
to bump it up over to the right 10 pixels.

377
00:17:31.258 --> 00:17:33.347
And that will hopefully line it up with your

378
00:17:33.347 --> 00:17:35.670
whatever is, whatever content is above it.

379
00:17:35.670 --> 00:17:39.468
So hopefully we're gonna get flex gap or just gap in general

380
00:17:39.468 --> 00:17:42.195
in CSS and that would fix a lot of those issues.

381
00:17:42.195 --> 00:17:45.051
So I, hopefully those were some good examples.

382
00:17:45.051 --> 00:17:47.373
Hopefully you learned a few things here or there

383
00:17:47.373 --> 00:17:49.258
about when to use Flexbox or Grid.

384
00:17:49.258 --> 00:17:52.771
I would definitely, whenever you encounter something

385
00:17:52.771 --> 00:17:55.519
that you can use Grid or Flexbox for, try to lay it out

386
00:17:55.519 --> 00:17:57.579
in both ways and see which one

387
00:17:57.579 --> 00:17:59.692
works better for your use case.

388
00:17:59.692 --> 00:18:02.397
You are always going to be use Flexbox and Grid.

389
00:18:02.397 --> 00:18:04.738
I think you might, my own opinion, you might

390
00:18:04.738 --> 00:18:07.496
be using Grid a little bit more than Flexbox

391
00:18:07.496 --> 00:18:09.217
once the browser support gets there.

392
00:18:09.217 --> 00:18:13.114
But don't take just my word for it, don't say things like

393
00:18:13.114 --> 00:18:16.476
single access and double access or whatever.

394
00:18:16.476 --> 00:18:19.727
Actually try it yourself and come to your own conclusions

395
00:18:19.727 --> 00:18:22.880
and write a blog post and become a thought leader

396
00:18:22.880 --> 00:18:24.677
or something like that. (laughs)

397
00:18:24.677 --> 00:18:25.803
I'll see you in the next one.

398
00:18:25.803 --> 00:18:28.057
(heavy metal riff)

