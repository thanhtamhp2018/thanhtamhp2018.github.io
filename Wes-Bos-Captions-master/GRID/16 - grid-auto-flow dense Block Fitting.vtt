WEBVTT

1
00:00:00.343 --> 00:00:03.528
(aggressive guitar music)

2
00:00:03.528 --> 00:00:06.818
<v Narrator>In episode six, we talked about grid auto-flow,</v>

3
00:00:06.818 --> 00:00:09.294
where if we, let's open this one up here,

4
00:00:09.294 --> 00:00:12.282
when you have more items than can fit in the grid,

5
00:00:12.282 --> 00:00:14.455
by default, it'll just wrap on to the next line

6
00:00:14.455 --> 00:00:17.006
and create you another implicit row.

7
00:00:17.006 --> 00:00:19.753
However you can switch grid auto-flow to column,

8
00:00:19.753 --> 00:00:23.707
meaning that, when we run out of room in our grid,

9
00:00:23.707 --> 00:00:26.937
it will just add additional implicit columns,

10
00:00:26.937 --> 00:00:29.035
instead of adding additional rows.

11
00:00:29.035 --> 00:00:30.560
Now, I hinted at a third option,

12
00:00:30.560 --> 00:00:33.095
which is grid auto-flow dense.

13
00:00:33.095 --> 00:00:35.027
So we're gonna look at how that works right now.

14
00:00:35.027 --> 00:00:38.061
So open up Dense and Dense Start.

15
00:00:38.061 --> 00:00:41.457
We've got 70 items here and we'll make a grid

16
00:00:41.457 --> 00:00:43.343
of 10 equal items.

17
00:00:43.343 --> 00:00:47.510
We'll say grid template columns, GTC, repeat 10, 1FR.

18
00:00:49.109 --> 00:00:51.403
Yeah, so we've got our 10 items across.

19
00:00:51.403 --> 00:00:53.999
Now, I want to make just a bunch of them different sizes

20
00:00:53.999 --> 00:00:57.749
so that we're gonna end up with some irregularities.

21
00:00:57.749 --> 00:01:00.511
Then we're going to select every sixth one

22
00:01:00.511 --> 00:01:02.141
and just make a bunch of 'em, uh,

23
00:01:02.141 --> 00:01:04.586
different sizes, be able to span.

24
00:01:04.586 --> 00:01:08.359
We'll say item, nth child, every sixth one,

25
00:01:08.359 --> 00:01:12.812
we're going to say background, cornflowerblue,

26
00:01:12.812 --> 00:01:16.979
that's nice and then, we will say grid column, span six.

27
00:01:20.283 --> 00:01:21.596
Okay, here's what's happening.

28
00:01:21.596 --> 00:01:24.418
Let's understand why we're getting these gaps

29
00:01:24.418 --> 00:01:27.501
and what we can do about fixing them.

30
00:01:28.448 --> 00:01:31.648
The way that the browser lays out your grid is it takes the,

31
00:01:31.648 --> 00:01:33.550
all of the different spots that we have,

32
00:01:33.550 --> 00:01:36.810
and we've got 10 across here, and it takes the first item,

33
00:01:36.810 --> 00:01:37.806
says, "Okay, can I fit it?"

34
00:01:37.806 --> 00:01:38.639
Yeah.

35
00:01:38.639 --> 00:01:39.472
"Can I fit it?"
Yeah.

36
00:01:39.472 --> 00:01:40.305
"Can I fit it?"
Yeah.

37
00:01:40.305 --> 00:01:42.998
It keeps going and then it gets to this sixth one

38
00:01:42.998 --> 00:01:46.062
and we know that it's going to take six spots,

39
00:01:46.062 --> 00:01:48.507
in order to fit this into our grid.

40
00:01:48.507 --> 00:01:52.144
However, we only have five spots left.

41
00:01:52.144 --> 00:01:52.977
What happens?

42
00:01:52.977 --> 00:01:55.029
Well, it just breaks onto the next row

43
00:01:55.029 --> 00:01:58.951
and it will continue, uh, adding that item.

44
00:01:58.951 --> 00:02:03.118
The downside is that it doesn't fill in these spots without,

45
00:02:04.671 --> 00:02:06.739
with the extra ones that could fit.

46
00:02:06.739 --> 00:02:09.380
Like, seven, eight, nine and 10 could easily fit

47
00:02:09.380 --> 00:02:11.191
themselves up here.

48
00:02:11.191 --> 00:02:13.244
So what we can actually do with that is,

49
00:02:13.244 --> 00:02:17.955
if we go back to our grid and we say, grid auto-flow dense,

50
00:02:17.955 --> 00:02:21.153
what's gonna happen, and give it a save, ooh, very nice,

51
00:02:21.153 --> 00:02:25.183
is it will then do one, two, three, four, five

52
00:02:25.183 --> 00:02:27.914
and then it will hit six and say, "Can't fit it."

53
00:02:27.914 --> 00:02:30.525
Let's go, uh, let's go onto the next line

54
00:02:30.525 --> 00:02:32.314
and we can fit it there, good.

55
00:02:32.314 --> 00:02:35.181
Then it gets to seven and then it goes back to the start

56
00:02:35.181 --> 00:02:36.661
and says, "Hey, is there any spots

57
00:02:36.661 --> 00:02:39.211
"where I could just sorta wiggle this one in?

58
00:02:39.211 --> 00:02:40.524
"Or maybe just fit it in?"

59
00:02:40.524 --> 00:02:41.641
And it says, "Yeah, of course.

60
00:02:41.641 --> 00:02:42.849
"You can fit it in here."

61
00:02:42.849 --> 00:02:45.716
Then there's seven, eight, nine, 10, 11

62
00:02:45.716 --> 00:02:48.101
and then we hit 12 and, at this point,

63
00:02:48.101 --> 00:02:50.450
we're aware of where of the 13 is and of course,

64
00:02:50.450 --> 00:02:53.330
it's not gonna fit, so that will go onto the next line.

65
00:02:53.330 --> 00:02:55.025
Then once we hit 13, it's gonna go back

66
00:02:55.025 --> 00:02:59.051
to the first available, uh, grid column or grid row that

67
00:02:59.051 --> 00:03:01.918
we have and see if it can fit it in, so that's pretty neat.

68
00:03:01.918 --> 00:03:04.620
Let's, let's actually take that off, just for a second,

69
00:03:04.620 --> 00:03:07.080
and go ahead and make some bigger ones here.

70
00:03:07.080 --> 00:03:10.163
We'll say, item, nth child, every 8N,

71
00:03:11.824 --> 00:03:15.241
we're going to make the background, uh...

72
00:03:17.434 --> 00:03:21.601
Ooh, tomato, delicious, and we will make them span two.

73
00:03:22.475 --> 00:03:24.892
Grid, column, span two, good.

74
00:03:26.686 --> 00:03:30.716
Then let's take, then let's go and do one more selector

75
00:03:30.716 --> 00:03:31.893
and do some rows.

76
00:03:31.893 --> 00:03:35.560
So say every 9N, we'll say grid row span two

77
00:03:37.434 --> 00:03:40.013
and that will just make a bunch of the random ones.

78
00:03:40.013 --> 00:03:40.846
Good.

79
00:03:40.846 --> 00:03:43.047
Now we have all of these different spaces available

80
00:03:43.047 --> 00:03:45.794
to us and it would be really nice if they would

81
00:03:45.794 --> 00:03:48.733
sort of just fit them in where as possible.

82
00:03:48.733 --> 00:03:52.900
If you do not care about what your, uh, order actually looks

83
00:03:53.740 --> 00:03:57.291
like in CSS grid, you can turn this dense back on

84
00:03:57.291 --> 00:03:59.732
and then it will just try and fit all

85
00:03:59.732 --> 00:04:01.483
of the different values that you want.

86
00:04:01.483 --> 00:04:05.256
Same thing will go as if, like, for example, this 18 here,

87
00:04:05.256 --> 00:04:09.423
let's go to .item18 and give it a background of...

88
00:04:12.878 --> 00:04:16.198
Green yellow and, oh, that's not gonna work

89
00:04:16.198 --> 00:04:19.749
because nth child is more specific.

90
00:04:19.749 --> 00:04:22.417
Let's do some dirty, dirty deeds here.

91
00:04:22.417 --> 00:04:23.250
DIV?

92
00:04:23.250 --> 00:04:24.083
Oh, no, not DIV!

93
00:04:24.083 --> 00:04:24.952
How does CSS even work?

94
00:04:24.952 --> 00:04:25.785
You know what?

95
00:04:25.785 --> 00:04:26.743
Screw it.

96
00:04:26.743 --> 00:04:28.730
Beautiful, okay.

97
00:04:28.730 --> 00:04:31.820
We can move this item to the end.

98
00:04:31.820 --> 00:04:34.987
We say, grid column end, negative one,

99
00:04:35.880 --> 00:04:38.362
so it'll anchor it, bah, at the end.

100
00:04:38.362 --> 00:04:40.656
Again, again, we're gonna need anything important there

101
00:04:40.656 --> 00:04:43.219
and that will anchor it over at the end.

102
00:04:43.219 --> 00:04:46.988
CSS will always lay out the ones that need to go

103
00:04:46.988 --> 00:04:49.780
in a specific spot first and then it will say,

104
00:04:49.780 --> 00:04:51.018
"Okay, we'll I'm dense."

105
00:04:51.018 --> 00:04:53.806
As I start to auto-lay out the rest of the items,

106
00:04:53.806 --> 00:04:56.443
I will then look for a spot that I can,

107
00:04:56.443 --> 00:04:58.595
sort of, squeak it into.

108
00:04:58.595 --> 00:05:00.231
In this case, it's actually working out

109
00:05:00.231 --> 00:05:01.855
really nicely for us.

110
00:05:01.855 --> 00:05:06.344
There is no extra spots, but, um, it's not the perfect

111
00:05:06.344 --> 00:05:10.517
masonry that you might think it will be, every now and then.

112
00:05:10.517 --> 00:05:13.329
That's just because sometimes you will have holes,

113
00:05:13.329 --> 00:05:16.932
um, because there just is not a specific shape

114
00:05:16.932 --> 00:05:18.199
for what you have.

115
00:05:18.199 --> 00:05:20.690
So we're gonna do an example with a photo gallery coming up,

116
00:05:20.690 --> 00:05:23.814
where I sort of show how you can, sort of, like,

117
00:05:23.814 --> 00:05:25.912
load it with lots of these little ones.

118
00:05:25.912 --> 00:05:28.411
In this case, I've loaded it with lots of these little,

119
00:05:28.411 --> 00:05:32.311
um, or these little yellow ones that are just one spot

120
00:05:32.311 --> 00:05:35.606
by one spot and they can fit, really, anywhere.

121
00:05:35.606 --> 00:05:38.519
We're gonna do that with our photo gallery one as well.

122
00:05:38.519 --> 00:05:41.020
Grid auto-flow dense is really nice.

123
00:05:41.020 --> 00:05:42.982
When you don't have it, you got lots of holes.

124
00:05:42.982 --> 00:05:44.884
When you do turn it on,

125
00:05:44.884 --> 00:05:48.325
everything fits nicely, interchanged.

126
00:05:48.325 --> 00:05:50.702
(aggressive music)

