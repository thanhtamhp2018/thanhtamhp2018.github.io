WEBVTT

1
00:00:00.299 --> 00:00:03.930
(heavy metal riff)

2
00:00:03.930 --> 00:00:05.915
<v Wes>Okay, so far we've actually just been</v>

3
00:00:05.915 --> 00:00:08.248
spending out time on the grid container

4
00:00:08.248 --> 00:00:10.477
and we haven't spent any time on the grid items

5
00:00:10.477 --> 00:00:14.011
or how to actually size them to be the size that we want.

6
00:00:14.011 --> 00:00:15.326
So let's break that down,

7
00:00:15.326 --> 00:00:18.414
we'll open up 09 sizing grid items

8
00:00:18.414 --> 00:00:20.018
and open up sizing items.

9
00:00:20.018 --> 00:00:21.865
Now let's give ourselves a bunch of items,

10
00:00:21.865 --> 00:00:22.888
I'm gonna say dot item,

11
00:00:22.888 --> 00:00:25.941
and I'm also gonna give a class of item dollar,

12
00:00:25.941 --> 00:00:27.881
and that will give us item one, item two,

13
00:00:27.881 --> 00:00:29.440
item three, item four.

14
00:00:29.440 --> 00:00:31.421
Inside of that I'll just give our number again

15
00:00:31.421 --> 00:00:34.882
and let's go nuts and give ourselves 30 items here.

16
00:00:34.882 --> 00:00:36.946
That should give us 30 divs each

17
00:00:36.946 --> 00:00:38.391
with a class of item and item 123

18
00:00:38.391 --> 00:00:40.825
all the way through 30.

19
00:00:40.825 --> 00:00:42.225
What do we got there?

20
00:00:42.225 --> 00:00:43.260
Good, looking good.

21
00:00:43.260 --> 00:00:45.439
Now let's just give ourselves a very basic

22
00:00:45.439 --> 00:00:47.539
grid that we have here.

23
00:00:47.539 --> 00:00:50.417
So grid, template, columns,

24
00:00:50.417 --> 00:00:53.000
let's repeat five times one FR.

25
00:00:54.987 --> 00:00:56.757
Got it, so let's give this a grid

26
00:00:56.757 --> 00:01:00.052
of five by however many high that we need.

27
00:01:00.052 --> 00:01:02.521
Alright, so how do you actually size

28
00:01:02.521 --> 00:01:03.799
some of our items in it?

29
00:01:03.799 --> 00:01:05.408
Well you might think well I can just

30
00:01:05.408 --> 00:01:08.042
go into here and say like item nine,

31
00:01:08.042 --> 00:01:10.191
well maybe we'll change the background of that

32
00:01:10.191 --> 00:01:12.774
to be something like mistyrose,

33
00:01:13.690 --> 00:01:16.037
and we should see item nine is now mistyrose

34
00:01:16.037 --> 00:01:18.683
and if you were to give that a width of 500 pixels,

35
00:01:18.683 --> 00:01:20.287
what happens?

36
00:01:20.287 --> 00:01:23.245
Whoa, so this is very similar to how that last one worked

37
00:01:23.245 --> 00:01:25.711
where we actually had an item.

38
00:01:25.711 --> 00:01:27.523
What we did is we explicitly

39
00:01:27.523 --> 00:01:30.771
put a width on the 500 pixel item,

40
00:01:30.771 --> 00:01:33.893
and what CSS grid did is remember

41
00:01:33.893 --> 00:01:36.310
that FR stands for free space

42
00:01:37.230 --> 00:01:39.824
and before you can have free space

43
00:01:39.824 --> 00:01:42.704
you have to use up the paid space.

44
00:01:42.704 --> 00:01:45.876
So what CSS does is it says okay first,

45
00:01:45.876 --> 00:01:49.589
item nine has to be 500 pixels wide,

46
00:01:49.589 --> 00:01:52.636
so it takes the column that item nine is in

47
00:01:52.636 --> 00:01:55.564
and it will size that to be 500 pixels wide.

48
00:01:55.564 --> 00:01:56.960
And then it says alright, I'm done.

49
00:01:56.960 --> 00:02:00.259
Got a bunch of extra space, who wants it?

50
00:02:00.259 --> 00:02:01.994
Let's split it up evenly with one FR

51
00:02:01.994 --> 00:02:04.711
throughout the rest of the columns.

52
00:02:04.711 --> 00:02:06.568
So by sizing this 500 pixels

53
00:02:06.568 --> 00:02:09.205
and similarly if I were to take that off

54
00:02:09.205 --> 00:02:13.399
and I were to make my item nine really long,

55
00:02:13.399 --> 00:02:15.948
like put some text in there without putting a space in it,

56
00:02:15.948 --> 00:02:17.549
because if you put a space in it

57
00:02:17.549 --> 00:02:19.167
it will just break onto the next line.

58
00:02:19.167 --> 00:02:21.105
Let's say something inside of item nine

59
00:02:21.105 --> 00:02:24.031
whether it's an image with a hard width

60
00:02:24.031 --> 00:02:27.792
or a really long word or anything that is inside of it

61
00:02:27.792 --> 00:02:30.875
is causing that item to be that wide,

62
00:02:31.913 --> 00:02:35.506
then it's going to first allot the width of that column

63
00:02:35.506 --> 00:02:38.756
because of the width of the content inside of it,

64
00:02:38.756 --> 00:02:41.882
and then it will then divvy up the actual space

65
00:02:41.882 --> 00:02:43.237
between the other two.

66
00:02:43.237 --> 00:02:46.578
Okay that's good, but I'm not really

67
00:02:46.578 --> 00:02:48.758
happy about the fact that it kind of takes

68
00:02:48.758 --> 00:02:51.717
the entire column along for the ride.

69
00:02:51.717 --> 00:02:55.505
So rather than relying on content width

70
00:02:55.505 --> 00:02:59.539
or giving it a fixed width of something like 500 PX,

71
00:02:59.539 --> 00:03:03.207
what we do is something called spanning in CSS grid,

72
00:03:03.207 --> 00:03:05.849
and we can explicitly tell some of our items

73
00:03:05.849 --> 00:03:08.031
to be a specific width.

74
00:03:08.031 --> 00:03:10.750
So I can bring this back to nine.

75
00:03:10.750 --> 00:03:12.352
And let's open up our dev tools

76
00:03:12.352 --> 00:03:14.362
so we can sort of see what's going on,

77
00:03:14.362 --> 00:03:16.505
gonna go to my layout tab and turn on a grid

78
00:03:16.505 --> 00:03:20.172
inspector, make that black, beautiful, cool.

79
00:03:21.251 --> 00:03:22.769
So we've got our numbers showing up

80
00:03:22.769 --> 00:03:24.504
and now we have item nine here,

81
00:03:24.504 --> 00:03:26.940
and I want this to take up the spot

82
00:03:26.940 --> 00:03:28.585
where nine and 10 is,

83
00:03:28.585 --> 00:03:29.901
and the way that we can do that

84
00:03:29.901 --> 00:03:31.341
is something called spanning.

85
00:03:31.341 --> 00:03:35.505
So we'll say grid, template, no grid column,

86
00:03:35.505 --> 00:03:37.505
and we can say span two.

87
00:03:38.969 --> 00:03:43.045
So if by default grid items just naturally flow

88
00:03:43.045 --> 00:03:45.511
one after another and as there is space

89
00:03:45.511 --> 00:03:47.569
for each one they will fit themselves

90
00:03:47.569 --> 00:03:49.795
into the grid as they can.

91
00:03:49.795 --> 00:03:51.811
However, if you wish for an item

92
00:03:51.811 --> 00:03:54.728
to take up multiple spots inside of our grid,

93
00:03:54.728 --> 00:03:56.542
you can tell it to span two.

94
00:03:56.542 --> 00:03:57.776
So I'll give that a save and whoa,

95
00:03:57.776 --> 00:03:59.585
okay look what happened here now.

96
00:03:59.585 --> 00:04:02.019
So it still starts where it naturally did,

97
00:04:02.019 --> 00:04:04.306
but now it is spanning two without giving

98
00:04:04.306 --> 00:04:06.995
it any sort of explicit width

99
00:04:06.995 --> 00:04:09.128
and then 10 was then bumped on to the next line

100
00:04:09.128 --> 00:04:11.811
because that was the next available space

101
00:04:11.811 --> 00:04:13.542
for 10 to actually go.

102
00:04:13.542 --> 00:04:15.183
We'll talk a little bit more about that

103
00:04:15.183 --> 00:04:19.593
when we talk about how grid auto flow dense works.

104
00:04:19.593 --> 00:04:23.760
So span two, what would happen if we did span three?

105
00:04:24.784 --> 00:04:26.801
Is it gonna go all the way,

106
00:04:26.801 --> 00:04:29.888
place your bets ladies and gentlemen.

107
00:04:29.888 --> 00:04:32.270
Buhhh, oh, what happened here?

108
00:04:32.270 --> 00:04:34.495
Okay, so now we have a bit of a dead space here

109
00:04:34.495 --> 00:04:36.019
and the reason behind that is

110
00:04:36.019 --> 00:04:38.899
because the browser will lay out each one

111
00:04:38.899 --> 00:04:41.445
one after another and as it gets to nine

112
00:04:41.445 --> 00:04:44.002
it says okay, this one needs to span three

113
00:04:44.002 --> 00:04:46.388
but I've only got space for two.

114
00:04:46.388 --> 00:04:49.603
So what it's gonna do is it's going to start again

115
00:04:49.603 --> 00:04:52.126
on the next line and leave those empty.

116
00:04:52.126 --> 00:04:53.525
We'll talk about how do we,

117
00:04:53.525 --> 00:04:55.250
like wouldn't it be nice if we could just put 10

118
00:04:55.250 --> 00:04:56.690
and 11 right there?

119
00:04:56.690 --> 00:04:58.503
And that's totally possible with the dense

120
00:04:58.503 --> 00:05:01.517
option that I've been talking about.

121
00:05:01.517 --> 00:05:03.496
Similarly, let's bring it back to two

122
00:05:03.496 --> 00:05:05.517
so we can put it right there.

123
00:05:05.517 --> 00:05:07.830
If you want to span multiple rows as well

124
00:05:07.830 --> 00:05:10.261
you totally can, so it's just grid row,

125
00:05:10.261 --> 00:05:11.928
and that is span two

126
00:05:13.852 --> 00:05:16.244
and that will whoa, give us too high

127
00:05:16.244 --> 00:05:18.177
and allow us to go.

128
00:05:18.177 --> 00:05:20.363
And this is really starting to show the power

129
00:05:20.363 --> 00:05:23.813
of CSS grid because I'm not doing any floats,

130
00:05:23.813 --> 00:05:25.915
I'm not doing any absolute positioning,

131
00:05:25.915 --> 00:05:29.620
I'm just putting the item for as wide as I want

132
00:05:29.620 --> 00:05:31.841
and if I were to have another item before nine.

133
00:05:31.841 --> 00:05:35.384
So here I would just put like a poop

134
00:05:35.384 --> 00:05:38.605
or something like that in there, then it's going to

135
00:05:38.605 --> 00:05:39.965
push it onto the next line

136
00:05:39.965 --> 00:05:43.593
and figure out where can you possibly fit this item

137
00:05:43.593 --> 00:05:45.235
where it makes sense?

138
00:05:45.235 --> 00:05:48.780
Good, so span two, span two on row,

139
00:05:48.780 --> 00:05:50.582
you can span them as much as you want.

140
00:05:50.582 --> 00:05:52.435
What would happen if you were to span

141
00:05:52.435 --> 00:05:53.585
more than you have available?

142
00:05:53.585 --> 00:05:55.602
So maybe if I were to span something like 10,

143
00:05:55.602 --> 00:05:59.529
whoa, that's kind of interesting there,

144
00:05:59.529 --> 00:06:01.127
what did we have before?

145
00:06:01.127 --> 00:06:02.284
How many numbers did we have?

146
00:06:02.284 --> 00:06:04.711
We have six, but if I were to span 10

147
00:06:04.711 --> 00:06:07.884
more than we had, it would automatically

148
00:06:07.884 --> 00:06:10.936
force the grid to be larger than it wants,

149
00:06:10.936 --> 00:06:14.397
and let's do a little zoom in investigation here.

150
00:06:14.397 --> 00:06:17.368
Remember we talked about the solid line

151
00:06:17.368 --> 00:06:20.578
being the end of the explicit grid?

152
00:06:20.578 --> 00:06:24.086
We only told it to be five columns each,

153
00:06:24.086 --> 00:06:28.003
one FR but however if it just can't fit itself,

154
00:06:29.359 --> 00:06:33.859
it's going to start creating implicit columns

155
00:06:33.859 --> 00:06:34.973
or implicit rows.

156
00:06:34.973 --> 00:06:36.660
In this case it's creating implicit rows,

157
00:06:36.660 --> 00:06:38.517
it makes extra ones and it knows

158
00:06:38.517 --> 00:06:41.693
to just sort of keep filling them with the extra

159
00:06:41.693 --> 00:06:43.384
items that we have.

160
00:06:43.384 --> 00:06:45.980
Good, then in the next video,

161
00:06:45.980 --> 00:06:47.461
what we're going to talk about is

162
00:06:47.461 --> 00:06:49.941
spanning is great but what if I just want

163
00:06:49.941 --> 00:06:54.141
to tell it exactly where I wish for this item to go?

164
00:06:54.141 --> 00:06:57.115
And that's where we get into actually placing grid items.

165
00:06:57.115 --> 00:06:59.993
(heavy metal riff)

