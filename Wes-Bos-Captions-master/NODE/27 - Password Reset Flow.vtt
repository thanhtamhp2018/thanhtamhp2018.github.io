WEBVTT

00:00:00.541 --> 00:00:03.541 line:100% position:50% align:middle
♪ [music] ♪

00:00:11.000 --> 00:00:15.270 line:100% position:50% align:middle
In this next video, let's log out and
we're going to create the password reset

00:00:15.270 --> 00:00:19.430 line:100% position:50% align:middle
flow. So I'm going to log out, and I'm
going to go to the Login page.

00:00:19.430 --> 00:00:23.890 line:100% position:50% align:middle
Below the Login page, I also want another
form that says, "Forgot my password." So

00:00:23.890 --> 00:00:28.170 line:100% position:50% align:middle
let's open up our Login.pug, and you'll
notice that we're already using mixins

00:00:28.170 --> 00:00:33.060 line:100% position:50% align:middle
here for our "loginForm". So we can create
another mixin for our "forgot".

00:00:33.060 --> 00:00:38.630 line:100% position:50% align:middle
Go to our mixins folder here. We'll make
it, "_forgot.pug". It's going to need a

00:00:38.630 --> 00:00:43.550 line:100% position:50% align:middle
mixin called "forgotForm", and from that
you're going to have a form with a class

00:00:43.550 --> 00:00:50.720 line:100% position:50% align:middle
of "form". The action is going to be,
"/account/forgot", and the method is going

00:00:50.720 --> 00:00:56.760 line:100% position:50% align:middle
to be "POST". Then, you simply just need
an h2 tag that says, "I forgot my

00:00:56.760 --> 00:01:04.220 line:100% position:50% align:middle
password!" You have a label for the email.
Input, [inaudible 00:01:01 to 00:01:04].

00:01:04.220 --> 00:01:08.440 line:100% position:50% align:middle
Good. Oh, make sure that this indented one
level deep, because it's inside of our

00:01:08.440 --> 00:01:14.060 line:100% position:50% align:middle
mixin. Now, go back to our Login.pug file,
and we'll include both the "loginForm" and

00:01:14.060 --> 00:01:22.350 line:100% position:50% align:middle
the "forgot" one, and then we called it
our "forgotForm". So we'll use it again,

00:01:22.350 --> 00:01:27.180 line:100% position:50% align:middle
"+forgotForm". Good. Refresh. There we go.
"I forgot my password!" I've got an email

00:01:27.180 --> 00:01:32.770 line:100% position:50% align:middle
address, and then we've reset it. So
that's the easy part. Now comes,

00:01:32.770 --> 00:01:37.070 line:100% position:50% align:middle
I think, a relatively complex part. Which
is, when somebody forgets their password,

00:01:37.070 --> 00:01:41.960 line:100% position:50% align:middle
how do you securely do it? So it's going
to be a multistep process,

00:01:41.960 --> 00:01:46.940 line:100% position:50% align:middle
of when somebody submits this form, what
we're going to do is we're going to first

00:01:46.940 --> 00:01:51.180 line:100% position:50% align:middle
check if that person has an email address
on file. If they do have an email address

00:01:51.180 --> 00:01:55.430 line:100% position:50% align:middle
on file, we are going to set a token in
their user being like,

00:01:55.430 --> 00:01:59.770 line:100% position:50% align:middle
"This is the password reset token," as
well as an expires date,

00:01:59.770 --> 00:02:03.930 line:100% position:50% align:middle
which means that the person requested that
their password be reset,

00:02:03.930 --> 00:02:07.430 line:100% position:50% align:middle
and they can only do that within an hour,
just for security's sake.

00:02:07.430 --> 00:02:10.800 line:100% position:50% align:middle
Then, those two pieces of information are
going to be emailed to them.

00:02:10.800 --> 00:02:14.890 line:100% position:50% align:middle
They can click on the link, and then come
back to our website.

00:02:14.890 --> 00:02:20.410 line:100% position:50% align:middle
If they have a proper token and a date
that is not expired, then they will be

00:02:20.410 --> 00:02:24.400 line:100% position:50% align:middle
able to go ahead and reset their password.
So there's a lot going on here.

00:02:24.400 --> 00:02:26.830 line:100% position:50% align:middle
We're going to need to check if the people
are there. We need to set tokens.

00:02:26.830 --> 00:02:32.440 line:100% position:50% align:middle
We need to save the user. We need to send
out emails. So we're going to [step] this

00:02:32.440 --> 00:02:36.510 line:100% position:50% align:middle
piece by piece and really just absolutely
nail this password reset flow.

00:02:36.510 --> 00:02:39.730 line:100% position:50% align:middle
My hope with this is that you be able to
keep this password reset flow,

00:02:39.730 --> 00:02:44.250 line:100% position:50% align:middle
and then move it into any apps that you're
doing with Express and Passport.

00:02:44.250 --> 00:02:50.040 line:100% position:50% align:middle
So let's get started. We'll open up our
index.js to begin, and we'll also open up

00:02:50.040 --> 00:02:54.700 line:100% position:50% align:middle
our Auth controller. In our Auth
controller, we are first going to make our

00:02:54.700 --> 00:03:00.440 line:100% position:50% align:middle
"forgot". So when somebody submits this
reset form, it's going to go to our forgot

00:03:00.440 --> 00:03:06.870 line:100% position:50% align:middle
authentication method. So we'll say,
"exports.forgot = async (req,

00:03:06.870 --> 00:03:13.300 line:100% position:50% align:middle
res)". Now, inside of here, there's really
four different things that need to happen.

00:03:13.300 --> 00:03:17.490 line:100% position:50% align:middle
First, what we need to do is see if that
user exists. [inaudible 00:03:15].

00:03:17.490 --> 00:03:21.260 line:100% position:50% align:middle
Because somebody might think that they
have used their email, but they either

00:03:21.260 --> 00:03:23.950 line:100% position:50% align:middle
don't have an account or they've used
another email. So that's the first thing

00:03:23.950 --> 00:03:26.940 line:100% position:50% align:middle
we need to check. If there actually is a
user, we need to set,

00:03:26.940 --> 00:03:32.330 line:100% position:50% align:middle
"Reset tokens and expiry on their
account." So what's going to happen is

00:03:32.330 --> 00:03:38.540 line:100% position:50% align:middle
that if they do, we're going to say,
"user.reset" password token "=".

00:03:38.540 --> 00:03:42.240 line:100% position:50% align:middle
You don't have to type this. I'm just
explaining. We're going to do a random

00:03:42.240 --> 00:03:45.070 line:100% position:50% align:middle
token that's going to look like this, and
that's going to get emailed to them for

00:03:45.070 --> 00:03:48.210 line:100% position:50% align:middle
them to come back with that token. Then,
we're also going to say,

00:03:48.210 --> 00:03:54.350 line:100% position:50% align:middle
"user.expires =" and then we're going to
give it some sort of date from now.

00:03:54.350 --> 00:03:59.000 line:100% position:50% align:middle
So we're going to say whatever now is plus
an hour. So they have an hour to come back

00:03:59.000 --> 00:04:03.190 line:100% position:50% align:middle
to us with this token. That will then
allow them to reset their password.

00:04:03.190 --> 00:04:07.770 line:100% position:50% align:middle
So that's the second thing. The third
thing is we're going to send them an email

00:04:07.770 --> 00:04:11.900 line:100% position:50% align:middle
with the token. Right? Because you can't
just give them the token right away here.

00:04:11.900 --> 00:04:15.470 line:100% position:50% align:middle
You need to actually show them that they
have access to that email account before

00:04:15.470 --> 00:04:21.700 line:100% position:50% align:middle
they can reset the password. Then, four,
finally, what we need to do is redirect to

00:04:21.700 --> 00:04:27.860 line:100% position:50% align:middle
login page after the email token has been
sent to them. Good. So first things first,

00:04:27.860 --> 00:04:32.770 line:100% position:50% align:middle
we want to see if a user with that email
exists. Well, we don't even have an email

00:04:32.770 --> 00:04:38.050 line:100% position:50% align:middle
yet. So let's go back to index.js. We'll
go down to the bottom here.

00:04:38.050 --> 00:04:42.270 line:100% position:50% align:middle
Where are we posting this data to? We're
posting it to "/account/forgot".

00:04:42.270 --> 00:04:47.910 line:100% position:50% align:middle
So I'll say,
"router.post(`/account/forgot`". When that

00:04:47.910 --> 00:04:52.180 line:100% position:50% align:middle
happens, we're going to catch errors, and
we're going to use the method that we're

00:04:52.180 --> 00:04:56.970 line:100% position:50% align:middle
working on here, authController.forgot. Go
here, and we'll see if there's even a

00:04:56.970 --> 00:05:02.760 line:100% position:50% align:middle
user. So it's "const user = await
User.findOne". So we're going to find one,

00:05:02.760 --> 00:05:06.360 line:100% position:50% align:middle
and what is the one piece of information
we are able to find them on?

00:05:06.360 --> 00:05:09.248 line:100% position:50% align:middle
Well, their email address, because that's
what they're providing to us.

00:05:09.248 --> 00:05:13.140 line:100% position:50% align:middle
So we're going to say the email is
"req.body.email". Then, at this point,

00:05:13.140 --> 00:05:19.310 line:100% position:50% align:middle
we need to see, if there is no user,
"if(!user)", then we have to tell them,

00:05:19.310 --> 00:05:25.250 line:100% position:50% align:middle
"That actually didn't work." So we'll say,
"req.flash". That is an error and the

00:05:25.250 --> 00:05:30.000 line:100% position:50% align:middle
error is going to be, "No account with
that email exists". So at this point,

00:05:30.000 --> 00:05:34.430 line:100% position:50% align:middle
you may be screaming at me and being like,
"Wes, Wes, Wes! Don't ever do that." So

00:05:34.430 --> 00:05:38.420 line:100% position:50% align:middle
there is a possible security
implementation here, where somebody could

00:05:38.420 --> 00:05:43.380 line:100% position:50% align:middle
possibly use this to see if they had a
huge list of email addresses.

00:05:43.380 --> 00:05:46.880 line:100% position:50% align:middle
They could see which people have signed up
for this. Or if this was some sort of

00:05:46.880 --> 00:05:50.730 line:100% position:50% align:middle
private website, where you should not be
able to check if somebody has an account

00:05:50.730 --> 00:05:54.730 line:100% position:50% align:middle
or not at that website, given that you
know their email, then you shouldn't be

00:05:54.730 --> 00:05:58.970 line:100% position:50% align:middle
able to do this. So at this point, what
some people will do, if you do not want to

00:05:58.970 --> 00:06:03.220 line:100% position:50% align:middle
tell your user that no account with that
email exists, you would tell them,

00:06:03.220 --> 00:06:11.650 line:100% position:50% align:middle
"A password reset has been mailed to you."
Even though there actually is no user,

00:06:11.650 --> 00:06:15.390 line:100% position:50% align:middle
you still want to tell the user, "Hey,
something was sent to you if an account

00:06:15.390 --> 00:06:19.340 line:100% position:50% align:middle
actually exists behind that." So that's
totally up to you, [whether] what type of

00:06:19.340 --> 00:06:23.790 line:100% position:50% align:middle
website your running. In this case, I
don't mind tell my users that nothing

00:06:23.790 --> 00:06:27.550 line:100% position:50% align:middle
exists with that email address. But again,
that's totally up to you.

00:06:27.550 --> 00:06:33.530 line:100% position:50% align:middle
Then, we will return the "res.redict". We
want to redirect them back to the Login

00:06:33.530 --> 00:06:37.740 line:100% position:50% align:middle
page. Good. So if there is no user, then
just tell them, "Hey,

00:06:37.740 --> 00:06:41.700 line:100% position:50% align:middle
that didn't actually work." But if there
was a user, that means right here we will

00:06:41.700 --> 00:06:47.340 line:100% position:50% align:middle
have a user, we are going to set our
password token and our password expires so

00:06:47.340 --> 00:06:50.450 line:100% position:50% align:middle
that they can have that information. So
"user.resetPasswordToken =".

00:06:50.450 --> 00:06:58.390 line:100% position:50% align:middle
Now, we need just a random bunch of keys
in order for that to work,

00:06:58.390 --> 00:07:02.110 line:100% position:50% align:middle
and there is actually something built
right into Node.js, which will allow us to

00:07:02.110 --> 00:07:08.140 line:100% position:50% align:middle
get cryptographically secure, random
strings. So that's a module that's built

00:07:08.140 --> 00:07:11.320 line:100% position:50% align:middle
into Node. You don't have to npm install
this. It's called "Crypto." So we'll go to

00:07:11.320 --> 00:07:16.150 line:100% position:50% align:middle
the top here and we'll import it, "const
crypto = require(`crypto`)".

00:07:16.150 --> 00:07:21.860 line:100% position:50% align:middle
Then, Crypto itself, has a method which
will allow us to generate a random string.

00:07:21.860 --> 00:07:29.290 line:100% position:50% align:middle
So we'll say,
"crypto.randomBytes(20).toString" and we

00:07:29.290 --> 00:07:34.820 line:100% position:50% align:middle
ask for the hex. So that will put the
token into the user. Then,

00:07:34.820 --> 00:07:41.460 line:100% position:50% align:middle
we'll say, "user.resetPasswordExpires",
because we don't want this to be good

00:07:41.460 --> 00:07:45.970 line:100% position:50% align:middle
forever. We want it to only be allowed to
reset it for one hour.

00:07:45.970 --> 00:07:53.860 line:100% position:50% align:middle
So we'll say "Date.now", which is now, "+
3600000". That is one hour from now.

00:07:53.860 --> 00:07:57.350 line:100% position:50% align:middle
That will give them one hour to reset
their actual password. Now that we have

00:07:57.350 --> 00:08:00.900 line:100% position:50% align:middle
those new fields here, a couple things.
First, I've got a red underline here,

00:08:00.900 --> 00:08:05.030 line:100% position:50% align:middle
"User is not defined." Why? Because we
never imported it into the top here.

00:08:05.030 --> 00:08:12.410 line:100% position:50% align:middle
So let's quickly import Mongoose, and then
get the reference to our model.

00:08:12.410 --> 00:08:17.360 line:100% position:50% align:middle
Good. So that sums up that one issue. Now,
I have another issue where these fields,

00:08:17.360 --> 00:08:22.010 line:100% position:50% align:middle
"resetPasswordToken" and
"resetPasswordTokenExpires", those are not

00:08:22.010 --> 00:08:25.570 line:100% position:50% align:middle
fields on our schema, and we need to add
them. So let's go to our user.js,

00:08:25.570 --> 00:08:29.060 line:100% position:50% align:middle
where we have our schema. Let's go down
here, and then we're going to say,

00:08:29.060 --> 00:08:34.540 line:100% position:50% align:middle
"Add those two fields." So it was
"resetPasswordToken" and

00:08:34.540 --> 00:08:37.340 line:100% position:50% align:middle
"resetPasswordExpires". Each of those,
well, the first one, the token is going to

00:08:37.340 --> 00:08:41.670 line:100% position:50% align:middle
be a string, and the expire is going to be
a date. So string and date.

00:08:41.670 --> 00:08:46.470 line:100% position:50% align:middle
Good. So we'll be able to add those. Now
that we've set those two fields on our

00:08:46.470 --> 00:08:51.040 line:100% position:50% align:middle
user, we need to save them. So we, "await
user.save". That's a nice little way to

00:08:51.040 --> 00:08:56.500 line:100% position:50% align:middle
just wait until the user is actually
saved. Then, we need to send them an email

00:08:56.500 --> 00:09:00.620 line:100% position:50% align:middle
with that token and redirect them to the
Login page. So what we can do right now is

00:09:00.620 --> 00:09:03.760 line:100% position:50% align:middle
I'm just going to send them back a token
immediately. Obviously,

00:09:03.760 --> 00:09:07.410 line:100% position:50% align:middle
you'd never do that in the real world. But
the next video, we're going to get into

00:09:07.410 --> 00:09:10.760 line:100% position:50% align:middle
sending email. Right now, I just want to
actually get the token working.

00:09:10.760 --> 00:09:16.980 line:100% position:50% align:middle
So we will go here and we'll say, "const
resetURL =" and we'll make it "http".

00:09:16.980 --> 00:09:21.800 line:100% position:50% align:middle
Now, we need the URL of where we're
operating, and that can be set on

00:09:21.800 --> 00:09:25.690 line:100% position:50% align:middle
"req.headers.host", and that will give us
in our case "local host".

00:09:25.690 --> 00:09:29.410 line:100% position:50% align:middle
But if you deploy that, it'll give you the
domain name that you're running at,

00:09:29.410 --> 00:09:37.670 line:100% position:50% align:middle
very handy, "/account/reset/" the actual
token, which is going to be "abc123".

00:09:37.670 --> 00:09:41.270 line:100% position:50% align:middle
So we can pop the
"user.resetPasswordToken". All right. So

00:09:41.270 --> 00:09:49.050 line:100% position:50% align:middle
we have this "resetURL". Then, what we can
do at this point is just tell the user

00:09:49.050 --> 00:09:54.670 line:100% position:50% align:middle
that it has worked. So I'll say,
"req.flash(`success`," and we'll do "`You

00:09:54.670 --> 00:10:01.790 line:100% position:50% align:middle
have been emailed a password reset link.'"
Then, I'm actually going to put the

00:10:01.790 --> 00:10:06.270 line:100% position:50% align:middle
password reset link right into here.
Again, don't ever do this,

00:10:06.270 --> 00:10:09.330 line:100% position:50% align:middle
because that would allow someone to reset
any URL, but just for the sake of

00:10:09.330 --> 00:10:13.100 line:100% position:50% align:middle
simplicity, because we're not doing email
just yet. We are going to email it to them

00:10:13.100 --> 00:10:20.030 line:100% position:50% align:middle
in just a second, and then we will say,
"res.redirect". We want to redirect them

00:10:20.030 --> 00:10:25.710 line:100% position:50% align:middle
to "/login". Cool. So let's open up our
MongoDB Compass. Let's refresh.

00:10:25.710 --> 00:10:29.650 line:100% position:50% align:middle
You'll know here that I have a salt, a
hash, an ID, an email, and a name.

00:10:29.650 --> 00:10:35.720 line:100% position:50% align:middle
But if I try to reset my password and
click Send Reset, and give this a refresh,

00:10:35.720 --> 00:10:39.650 line:100% position:50% align:middle
you'll see that I've now added a reset
password, which is the date of when it

00:10:39.650 --> 00:10:44.900 line:100% position:50% align:middle
will... Right now, it is 12:55, so at 1:55
it's going to expire.

00:10:44.900 --> 00:10:51.280 line:100% position:50% align:middle
Then, the token is 427c9999, whatever. I'm
able to get to this URL here,

00:10:51.280 --> 00:10:56.820 line:100% position:50% align:middle
that should be a "/account", by grabbing
it right from here. Again,

00:10:56.820 --> 00:11:00.590 line:100% position:50% align:middle
this would be emailed to us. We're going
to take that out before we deploy to live.

00:11:00.590 --> 00:11:02.980 line:100% position:50% align:middle
Good. So that's the first part of it.
Let's just double-check that.

00:11:02.980 --> 00:11:09.000 line:100% position:50% align:middle
If I put in like a "no@no.com," let's see
if that tells us it doesn't exist.

00:11:09.000 --> 00:11:14.100 line:100% position:50% align:middle
Good. It tells us that account doesn't
exist. But if I put in "wesbos@gmail.com",

00:11:14.100 --> 00:11:21.430 line:100% position:50% align:middle
it gives us this reset URL here. Good. So
I'm actually going to go to this URL,

00:11:21.430 --> 00:11:25.320 line:100% position:50% align:middle
and that will help us complete our next
step. Which is once somebody has got this

00:11:25.320 --> 00:11:31.220 line:100% position:50% align:middle
special URL from their email, what's the
process to then update their password?

00:11:31.220 --> 00:11:35.370 line:100% position:50% align:middle
So I'm going to visit this URL here. It's
going to 404, and we have to now create a

00:11:35.370 --> 00:11:39.420 line:100% position:50% align:middle
route for that to help. We have to now
create a route for that to [happen].

00:11:39.420 --> 00:11:43.620 line:100% position:50% align:middle
Go back to our routes and make a route to
handle this "/account/reset/" and then the

00:11:43.620 --> 00:11:48.130 line:100% position:50% align:middle
actual token that we have. We'll go to
index.js and I'll say, "router.get".

00:11:48.130 --> 00:11:55.320 line:100% position:50% align:middle
Anytime someone visits "/account/reset/"
any token, we are going to catch errors

00:11:55.320 --> 00:12:00.990 line:100% position:50% align:middle
and use the authController.reset method
that we have. Then, we'll go back to our

00:12:00.990 --> 00:12:06.210 line:100% position:50% align:middle
authController.js and make that reset
method. We'll make it async.

00:12:06.210 --> 00:12:13.430 line:100% position:50% align:middle
Say, "req", enter a response. Then, from
that we are going to take the token and

00:12:13.430 --> 00:12:18.460 line:100% position:50% align:middle
check, A, is there somebody with this
token and, B, is this token not yet

00:12:18.460 --> 00:12:24.810 line:100% position:50% align:middle
expired? So let's just say,
"res.json(req.params)", just so I can show

00:12:24.810 --> 00:12:31.710 line:100% position:50% align:middle
you here that this token, 63cf, should
show up as a token. Good.

00:12:31.710 --> 00:12:36.310 line:100% position:50% align:middle
We can then search for the user, "const
user = await User.findOne".

00:12:36.310 --> 00:12:42.960 line:100% position:50% align:middle
I want to find somebody, and now this is
the tricky part, where the

00:12:42.960 --> 00:12:49.280 line:100% position:50% align:middle
"resetPasswordToken" is equal to the
"req.params.token". So somebody has to

00:12:49.280 --> 00:12:53.650 line:100% position:50% align:middle
know that token in order to get to this
URL, and that's because it's been emailed

00:12:53.650 --> 00:12:59.510 line:100% position:50% align:middle
to them. Then, also, we want to find that
the date is greater than now.

00:12:59.510 --> 00:13:05.470 line:100% position:50% align:middle
So we'll say, "resetPasswordExpires is"
and this is kind of a cool query that you

00:13:05.470 --> 00:13:11.990 line:100% position:50% align:middle
can do in MongoDB, is you don't just set
it to a value. You set it to an object,

00:13:11.990 --> 00:13:20.850 line:100% position:50% align:middle
where the key is greater than, "$gt",
"Date.now". Wow. Okay. So what that does

00:13:20.850 --> 00:13:25.580 line:100% position:50% align:middle
is, if we look back at our MongoDB Compass
here, you'll see that we're going to look

00:13:25.580 --> 00:13:31.520 line:100% position:50% align:middle
for an expires that is greater than right
now. So we know that the token is still

00:13:31.520 --> 00:13:35.610 line:100% position:50% align:middle
valid, because it is in the future. If
it's been more than an hour,

00:13:35.610 --> 00:13:39.470 line:100% position:50% align:middle
that token will have been in the past and
we can't access it anymore.

00:13:39.470 --> 00:13:45.650 line:100% position:50% align:middle
So there we have the user and we say, "If
there is no user," so if that search right

00:13:45.650 --> 00:13:50.880 line:100% position:50% align:middle
here didn't find someone, either because
the token was wrong or because the expires

00:13:50.880 --> 00:13:57.020 line:100% position:50% align:middle
was already expired, then we'll just tell
them, we'll say, "req.flash(`error`,".

00:13:57.020 --> 00:14:03.120 line:100% position:50% align:middle
Say, "`Password reset token is invalid or
has expired)". Then,

00:14:03.120 --> 00:14:09.560 line:100% position:50% align:middle
we'll redirect them. Cool. So let's
actually try going to "/abc" and hit

00:14:09.560 --> 00:14:14.260 line:100% position:50% align:middle
Enter. Oh, redirect. Put a T on there.
Let's go to this "/abc",

00:14:14.260 --> 00:14:19.960 line:100% position:50% align:middle
which it should not work, and then it will
just redirect us to the Login page where

00:14:19.960 --> 00:14:24.440 line:100% position:50% align:middle
we can try to do it again. So if there is
no user, flash it, then redirect them to

00:14:24.440 --> 00:14:30.890 line:100% position:50% align:middle
the login. However, if there is a user,
show the reset password form.

00:14:30.890 --> 00:14:34.920 line:100% position:50% align:middle
Right? This is another form. The first
form to reset it. The second form to

00:14:34.920 --> 00:14:39.060 line:100% position:50% align:middle
actually take in the new username and
password. So I'll say, "res.render".

00:14:39.060 --> 00:14:44.960 line:100% position:50% align:middle
We're going to render out the reset file
and the title will be "Reset Your

00:14:44.960 --> 00:14:50.840 line:100% position:50% align:middle
Password". Good. So let's go ahead and
create that. We'll go into views,

00:14:50.840 --> 00:14:58.080 line:100% position:50% align:middle
and make a new file called "Reset.pug". We
have a form with a class of "form" and the

00:14:58.080 --> 00:15:02.570 line:100% position:50% align:middle
method will be "POST". In this case, I'm
going to leave the action off.

00:15:02.570 --> 00:15:06.390 line:100% position:50% align:middle
If you don't know this about HTML forms,
when you submit a form and it doesn't have

00:15:06.390 --> 00:15:09.990 line:100% position:50% align:middle
an action, the actual default is to the
current URL that we are on.

00:15:09.990 --> 00:15:18.020 line:100% position:50% align:middle
So it's just going to post to itself. Now,
I have an h2 tag that says "Reset Your

00:15:18.020 --> 00:15:22.860 line:100% position:50% align:middle
Password". Then, we're going to ask for
their new password and ask for them to

00:15:22.860 --> 00:15:24.912 line:100% position:50% align:middle
confirm their new password.

00:15:30.170 --> 00:15:37.810 line:100% position:50% align:middle
I'll have our Submit button. The value
will be "Reset Password".

00:15:37.810 --> 00:15:41.400 line:100% position:50% align:middle
So we only want to show this to them once
they've hit that URL.

00:15:41.400 --> 00:15:45.980 line:100% position:50% align:middle
I have lost my URL, so I'm going to send a
new one to myself, wesbos@gmail.com,

00:15:45.980 --> 00:15:51.760 line:100% position:50% align:middle
send the reset. This is my reset link. If
we try to visit that,

00:15:51.760 --> 00:15:56.910 line:100% position:50% align:middle
hopefully, it will render out this
Reset.pug file for us. There we go.

00:15:56.910 --> 00:16:01.230 line:100% position:50% align:middle
So what it did real quick, if we look at
our authController here,

00:16:01.230 --> 00:16:04.350 line:100% position:50% align:middle
is this actually looked for someone, and
then checked if there wasn't one.

00:16:04.350 --> 00:16:08.630 line:100% position:50% align:middle
If there was one, then we reach this. The
way you can tell that is you could just do

00:16:08.630 --> 00:16:15.000 line:100% position:50% align:middle
"console.log(user)", and open up your
terminal. I always like to clear out

00:16:15.000 --> 00:16:20.570 line:100% position:50% align:middle
anything that's in here. Then, watch. When
I refresh this, it actually shows me,

00:16:20.570 --> 00:16:26.530 line:100% position:50% align:middle
me. Because it found that token, and it
also found that the reset password was

00:16:26.530 --> 00:16:30.820 line:100% position:50% align:middle
well within that one-hour time that we
had. Good. So that's Step 2,

00:16:30.820 --> 00:16:33.830 line:100% position:50% align:middle
which is checking and figuring out what we
have. Then, the third part,

00:16:33.830 --> 00:16:38.860 line:100% position:50% align:middle
which is probably the biggest part, is
where we actually have to now update their

00:16:38.860 --> 00:16:44.710 line:100% position:50% align:middle
password given what they have. So let's go
back to our index.js and we'll say,

00:16:44.710 --> 00:16:52.440 line:100% position:50% align:middle
"router.post(`/account/reset/:token',".
Right? Because what's going to happen is

00:16:52.440 --> 00:16:55.550 line:100% position:50% align:middle
someone is going to fill this out with
their new password and we're going to

00:16:55.550 --> 00:17:01.440 line:100% position:50% align:middle
click Reset, and it's going to post the
data to the exact same URL that we have

00:17:01.440 --> 00:17:04.420 line:100% position:50% align:middle
there. So the same thing. The first thing
we want to do is check if their passwords

00:17:04.420 --> 00:17:07.070 line:100% position:50% align:middle
are the same. So we're going to make a
middleware. We'll write it now.

00:17:07.070 --> 00:17:14.650 line:100% position:50% align:middle
We'll make it in just a second,
"authController.confirmedPasswords".

00:17:14.650 --> 00:17:18.390 line:100% position:50% align:middle
Then, when the passwords are the same, so
I'm making sure that they are exactly the

00:17:18.390 --> 00:17:23.690 line:100% position:50% align:middle
same, we are going to finally update their
actual password. So we will catch errors.

00:17:23.690 --> 00:17:29.230 line:100% position:50% align:middle
This will be async/await, and we will call
it "authController.update".

00:17:29.230 --> 00:17:35.770 line:100% position:50% align:middle
Right? Now, this is a little bit hairy.
Let's put them on their own lines here.

00:17:35.770 --> 00:17:40.190 line:100% position:50% align:middle
There we go. So when somebody posts to
"/account" reset token.

00:17:40.190 --> 00:17:43.990 line:100% position:50% align:middle
Check that the passwords are the same. If
they are, finally, finally,

00:17:43.990 --> 00:17:50.950 line:100% position:50% align:middle
go ahead and update their passwords on the
books. So go back to our authController,

00:17:50.950 --> 00:17:53.920 line:100% position:50% align:middle
and we're going to make two here, one
called "confirmedPasswords",

00:17:53.920 --> 00:18:01.310 line:100% position:50% align:middle
one called "update". That is simply going
to be "req, res", and we're just going to

00:18:01.310 --> 00:18:04.810 line:100% position:50% align:middle
do a little check ourselves here. So we
could use some validation middleware.

00:18:04.810 --> 00:18:08.390 line:100% position:50% align:middle
Because this is so simple, we're simply
checking if two of the things are the

00:18:08.390 --> 00:18:13.400 line:100% position:50% align:middle
same. We're just going to do an "if"
statement. "if (req.body.password ===

00:18:13.400 --> 00:18:20.370 line:100% position:50% align:middle
req.body.password-confirm). Ooh, how do
you do that? That's got a dash in it.

00:18:20.370 --> 00:18:25.480 line:100% position:50% align:middle
You remember our reset, the name was
"passwordConfirm"? How do you access a

00:18:25.480 --> 00:18:28.850 line:100% position:50% align:middle
property on an object when you have a
dash? Well, you have to use square

00:18:28.850 --> 00:18:34.170 line:100% position:50% align:middle
brackets. That's how you access a property
when it has a dash in it.

00:18:34.170 --> 00:18:39.440 line:100% position:50% align:middle
So if the password is equal to the
confirm, then what do we do?

00:18:39.440 --> 00:18:45.030 line:100% position:50% align:middle
Well, that's fine. Just "next" "keepit
going!" So "keepit going!" and then when

00:18:45.030 --> 00:18:49.260 line:100% position:50% align:middle
we return from this function, stop it from
running. Because "next" will pass us down

00:18:49.260 --> 00:18:54.600 line:100% position:50% align:middle
our middleware, which will pass us to the
Update controller. Otherwise,

00:18:54.600 --> 00:18:59.020 line:100% position:50% align:middle
if they aren't the same, what do we tell
them? "req.flash" is an error.

00:18:59.020 --> 00:19:06.260 line:100% position:50% align:middle
We'll tell them, "Passwords do not match!"
and we'll redirect them back.

00:19:06.260 --> 00:19:10.110 line:100% position:50% align:middle
Okay. Oh. See how this is red here? It's
telling us that next doesn't exist,

00:19:10.110 --> 00:19:17.220 line:100% position:50% align:middle
because we forgot to pass it right here.
Now, let's try that. If we go back and I

00:19:17.220 --> 00:19:22.880 line:100% position:50% align:middle
try "wes" and "bos", and reset the
password, "Passwords do not match!" and

00:19:22.880 --> 00:19:27.380 line:100% position:50% align:middle
then they bring us back to this actual...
Good. But what if they do match?

00:19:27.380 --> 00:19:32.010 line:100% position:50% align:middle
Well, if they do match, then we go to the
next step of our middleware,

00:19:32.010 --> 00:19:37.830 line:100% position:50% align:middle
which is called "update". Go down here,
"exports.update = async (req,

00:19:37.830 --> 00:19:45.450 line:100% position:50% align:middle
res)". Now, here it is. First things
first, we first need to find the user,

00:19:45.450 --> 00:19:50.200 line:100% position:50% align:middle
and make sure that they are still within
that one hour in the token.

00:19:50.200 --> 00:19:53.640 line:100% position:50% align:middle
Why? Because someone could've loaded the
page, and then come back to it an hour

00:19:53.640 --> 00:19:57.160 line:100% position:50% align:middle
later. Then, it shouldn't work. Right? You
shouldn't have that security of just

00:19:57.160 --> 00:20:02.090 line:100% position:50% align:middle
having somebody leave the page open. So
we're going to find the user.

00:20:02.090 --> 00:20:10.280 line:100% position:50% align:middle
We can take this "findOne" from earlier,
and we can just paste it right into here.

00:20:10.280 --> 00:20:14.550 line:100% position:50% align:middle
So "user = await User.findOne" with the
token. The token is still going to be in

00:20:14.550 --> 00:20:20.180 line:100% position:50% align:middle
the URL, and then greater than now. Good.
Then, if there is no user,

00:20:20.180 --> 00:20:23.880 line:100% position:50% align:middle
we can do the exact same thing again,
which is we can copy and paste this.

00:20:23.880 --> 00:20:27.720 line:100% position:50% align:middle
You could even maybe refactor this out
into a middleware that will work,

00:20:27.720 --> 00:20:30.980 line:100% position:50% align:middle
so you don't have to copy and paste. But
that's not a big deal.

00:20:30.980 --> 00:20:35.530 line:100% position:50% align:middle
You can go either way. So if there's no
user, tell them that it is invalid.

00:20:35.530 --> 00:20:42.780 line:100% position:50% align:middle
Finally, if it is, then we want to go
ahead and update the user's password.

00:20:42.780 --> 00:20:46.240 line:100% position:50% align:middle
The method we're going to call is we're
going to take the user,

00:20:46.240 --> 00:20:51.450 line:100% position:50% align:middle
and we're going to call a "setPassword"
method on the user. Again,

00:20:51.450 --> 00:20:56.510 line:100% position:50% align:middle
that is made available to us, because
we're using that plugin in our user.js.

00:20:56.510 --> 00:21:01.910 line:100% position:50% align:middle
However, one big downside here is that it
is not promisified. It is call-backified.

00:21:01.910 --> 00:21:09.380 line:100% position:50% align:middle
So we want to make it into a promisify. So
I'll say, "const setPassword = promisify".

00:21:09.380 --> 00:21:14.080 line:100% position:50% align:middle
We're going to promisify
"user.setPassword", and we're going to

00:21:14.080 --> 00:21:20.670 line:100% position:50% align:middle
bind it to the user. Good. Well, we don't
have our promisify being pulled in yet.

00:21:20.670 --> 00:21:29.110 line:100% position:50% align:middle
So again, we'll go back to the top of this
file and say, "const promisify =

00:21:29.110 --> 00:21:32.210 line:100% position:50% align:middle
require(`es6-promisify`)". Good. We'll go
down here. We made this new method called

00:21:32.210 --> 00:21:37.600 line:100% position:50% align:middle
"setPassword", which will allow us to
await it, "await setPassword",

00:21:37.600 --> 00:21:43.300 line:100% position:50% align:middle
and we can pass it the new password, which
is going to be "req.body.password".

00:21:43.300 --> 00:21:46.750 line:100% position:50% align:middle
Right? That is going to set the new
password, and then it will hash it and

00:21:46.750 --> 00:21:49.720 line:100% position:50% align:middle
salt it, and do all of the stuff that it
needs to do behind the scenes.

00:21:49.720 --> 00:21:56.060 line:100% position:50% align:middle
However, we do need to get rid of the
password expires and the token,

00:21:56.060 --> 00:22:00.000 line:100% position:50% align:middle
and the way that you get rid of fields in
MongoDB is you set them to "undefined",

00:22:00.000 --> 00:22:05.150 line:100% position:50% align:middle
and they will get taken out. So I'll say,
"user.resetPasswordToken".

00:22:05.150 --> 00:22:12.670 line:100% position:50% align:middle
That's equal to "undefine".
"user.resetPasswordExpires" is undefined

00:22:12.670 --> 00:22:21.520 line:100% position:50% align:middle
as well. Then, we need to update the user.
So I'll say, "const updatedUser =",

00:22:21.520 --> 00:22:26.770 line:100% position:50% align:middle
well, "await user.save". Right? Because
this doesn't actually do anything in the

00:22:26.770 --> 00:22:31.500 line:100% position:50% align:middle
database. It just queues it up, and then
when we actually call ".save",

00:22:31.500 --> 00:22:37.850 line:100% position:50% align:middle
that will run to the database and actually
do the saving. So we are saving them,

00:22:37.850 --> 00:22:43.160 line:100% position:50% align:middle
and then we want to automatically log them
in. What that will do is it will not just

00:22:43.160 --> 00:22:47.590 line:100% position:50% align:middle
put them in the login form and tell them
to re-log in. We'll just automatically log

00:22:47.590 --> 00:22:52.390 line:100% position:50% align:middle
them in. So what we do here is we say,
"await req.login". So again,

00:22:52.390 --> 00:22:56.040 line:100% position:50% align:middle
"req" is our request, and there is a
method on it called ".login".

00:22:56.040 --> 00:22:58.890 line:100% position:50% align:middle
You see how all of these nice little
packages that we're using,

00:22:58.890 --> 00:23:05.070 line:100% position:50% align:middle
like Passport.js, will give us all of the
methods that we need via the middleware

00:23:05.070 --> 00:23:09.840 line:100% position:50% align:middle
that it introduced to them. I want to take
that updated user and pass it.

00:23:09.840 --> 00:23:14.060 line:100% position:50% align:middle
So this is a neat little part of
Passport.js. You can always pass it an

00:23:14.060 --> 00:23:17.960 line:100% position:50% align:middle
actual user, and it will just
automatically log that person in without

00:23:17.960 --> 00:23:21.930 line:100% position:50% align:middle
us having to pass them a username or a
password. So woo. Finally,

00:23:21.930 --> 00:23:26.680 line:100% position:50% align:middle
we can tell them it worked. So we'll flash
them, "success". Let's do a little dance

00:23:26.680 --> 00:23:35.510 line:100% position:50% align:middle
emoji. Say, "Nice. Your password has been
reset," or redirect them to the homepage.

00:23:35.510 --> 00:23:42.370 line:100% position:50% align:middle
All right. So given all that, let's go to
this URL again, our reset URL.

00:23:42.370 --> 00:23:48.370 line:100% position:50% align:middle
Let's try to change our passwords. Click
on Reset Password, and there we go.

00:23:48.370 --> 00:23:52.690 line:100% position:50% align:middle
It worked. What did it do? It
automatically updated my password,

00:23:52.690 --> 00:23:56.640 line:100% position:50% align:middle
and then it flashed us saying it worked.
It should be a lowercase s.

00:23:56.640 --> 00:24:00.180 line:100% position:50% align:middle
That's why it's not green. Then, it will
automatically log us in as well.

00:24:00.180 --> 00:24:04.730 line:100% position:50% align:middle
So that is our whole password reset flow.
There's a whole bunch to it,

00:24:04.730 --> 00:24:07.770 line:100% position:50% align:middle
because we first need to find if the user
exists, and then set a token,

00:24:07.770 --> 00:24:11.350 line:100% position:50% align:middle
and then send them an email. Then,
actually, render out the reset form.

00:24:11.350 --> 00:24:15.000 line:100% position:50% align:middle
Then, when they reset the form, we want to
confirm that their passwords are the same.

00:24:15.000 --> 00:24:21.370 line:100% position:50% align:middle
Then, finally, finally, finally, we want
to put the data on their new database and

00:24:21.370 --> 00:24:26.780 line:100% position:50% align:middle
redirect them to the homepage. If we go
back to this and I click on Refresh,

00:24:26.780 --> 00:24:32.720 line:100% position:50% align:middle
you'll notice that the salt and the hash
has changed, as well as those tokens and

00:24:32.720 --> 00:24:35.920 line:100% position:50% align:middle
those dates are now cleaned up. Because we
set them to "undefined",

00:24:35.920 --> 00:24:40.450 line:100% position:50% align:middle
they get deleted from our actual database.
So woo. Take a second and make sure you

00:24:40.450 --> 00:24:44.140 line:100% position:50% align:middle
really understand what's going on here and
what are all the pieces,

00:24:44.140 --> 00:24:48.670 line:100% position:50% align:middle
because there is a lot of moving parts
going on here. Once you feel comfortable

00:24:48.670 --> 00:24:51.500 line:100% position:50% align:middle
with that, move on to the next video,
which is we're going to be learning how to

00:24:51.500 --> 00:24:54.408 line:100% position:50% align:middle
send that URL via email.

00:24:54.408 --> 00:24:56.408 line:100% position:50% align:middle
♪ [music] ♪