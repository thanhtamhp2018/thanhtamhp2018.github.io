WEBVTT

00:00:00.469 --> 00:00:03.469 line:100% position:50% align:middle
♪ [music] ♪

00:00:11.800 --> 00:00:14.330 line:100% position:50% align:middle
In this video, we're going to learn
about something called flashes.

00:00:14.330 --> 00:00:18.830 line:100% position:50% align:middle
Have you ever been on a website, and you
save something or you try to log in?

00:00:18.830 --> 00:00:23.820 line:100% position:50% align:middle
Either something successfully happens or
an error happens, and what they do is they

00:00:23.820 --> 00:00:28.140 line:100% position:50% align:middle
just redirect you to either a new page or
another page. That's great,

00:00:28.140 --> 00:00:32.630 line:100% position:50% align:middle
because what you can do is you can sort of
just put the user where they were or where

00:00:32.630 --> 00:00:36.700 line:100% position:50% align:middle
they need to go. But you can also show
them a little bit of information at the

00:00:36.700 --> 00:00:41.410 line:100% position:50% align:middle
time. Here, I've said, "Successfully
created to store. Care to leave a review?"

00:00:41.410 --> 00:00:45.650 line:100% position:50% align:middle
Then, we were to redirect them to the page
for that store, or maybe a page that lists

00:00:45.650 --> 00:00:49.110 line:100% position:50% align:middle
out all of our stores, depending on what
we want to do. Now, that's called a

00:00:49.110 --> 00:00:55.090 line:100% position:50% align:middle
"flash," which is essentially, I don't
want to redirect them to a page just to

00:00:55.090 --> 00:00:59.140 line:100% position:50% align:middle
tell them something. But on the next time
that they load a page,

00:00:59.140 --> 00:01:03.610 line:100% position:50% align:middle
I want to send them a little piece of
information, and display this flash

00:01:03.610 --> 00:01:07.970 line:100% position:50% align:middle
message up here. Then, the user can either
refresh the page to dismiss it,

00:01:07.970 --> 00:01:13.000 line:100% position:50% align:middle
or click an X and have it gone. So how
does that work? Well, let's go down here.

00:01:13.000 --> 00:01:18.160 line:100% position:50% align:middle
Let's go to our Create Store, and the way
that you set a flash is you simply type

00:01:18.160 --> 00:01:22.840 line:100% position:50% align:middle
"req.flash". That's the method that we
have there. Why is that flash available to

00:01:22.840 --> 00:01:28.880 line:100% position:50% align:middle
us? Well, again, if we go back to our
App.js, and we take a look at our

00:01:28.880 --> 00:01:35.280 line:100% position:50% align:middle
middleware, search for "flash", you're
going to see, here we go,

00:01:35.280 --> 00:01:39.316 line:100% position:50% align:middle
"app.use(flash())". What that's using is
this flash middleware,

00:01:39.316 --> 00:01:43.920 line:100% position:50% align:middle
which will give us a method called
"flash", and then the next time that we

00:01:43.920 --> 00:01:47.890 line:100% position:50% align:middle
actually view our page, we're going to
have those flashes available to us.

00:01:47.890 --> 00:01:51.590 line:100% position:50% align:middle
So we'll go back to our Store controller
here, and flash takes two things.

00:01:51.590 --> 00:01:56.060 line:100% position:50% align:middle
First the type of flash. So it can be
"success," it can be "error,"

00:01:56.060 --> 00:01:59.870 line:100% position:50% align:middle
it can be "warning." It can be any type.
You can make up your own categories.

00:01:59.870 --> 00:02:03.680 line:100% position:50% align:middle
What I like to do is stick with those
three, "success," "warning,"

00:02:03.680 --> 00:02:07.640 line:100% position:50% align:middle
and "error," or I think "info" is another
one that we could use.

00:02:07.640 --> 00:02:10.740 line:100% position:50% align:middle
Those will just all line up with CSS
classes on the other end.

00:02:10.740 --> 00:02:15.380 line:100% position:50% align:middle
So we're going to do "success." Then, when
that successfully happens,

00:02:15.380 --> 00:02:20.750 line:100% position:50% align:middle
we're going to say, "Successfully
created," and I'm using backticks here.

00:02:20.750 --> 00:02:24.560 line:100% position:50% align:middle
So notice how they're not single or double
quotes, backticks so I can use the ES6

00:02:24.560 --> 00:02:29.670 line:100% position:50% align:middle
interpolation. Notice that's a $, because
this is JavaScript, and not a #,

00:02:29.670 --> 00:02:35.870 line:100% position:50% align:middle
which we use in Pug. You'll just say,
"store.name." Then, we'll say,

00:02:35.870 --> 00:02:41.810 line:100% position:50% align:middle
"Care to leave a review?" So let's
double-check that that works.

00:02:41.810 --> 00:02:45.970 line:100% position:50% align:middle
Before we redirect them, we're going to
flash that data. So let's go and add a new

00:02:45.970 --> 00:02:52.410 line:100% position:50% align:middle
one. We'll say, "test," "test," add a
couple items here, give it a save,

00:02:52.410 --> 00:02:57.920 line:100% position:50% align:middle
and okay. Good. Before we directed, we
flash it up, and we see "Successfully

00:02:57.920 --> 00:03:02.290 line:100% position:50% align:middle
Created test." That was the name of the
store. "Care to leave a review?" So we can

00:03:02.290 --> 00:03:05.890 line:100% position:50% align:middle
also say, "req.flash." Actually, we can do
this on the homepage,

00:03:05.890 --> 00:03:09.140 line:100% position:50% align:middle
rather than having to submit a new one
every time. So let's go to the homepage,

00:03:09.140 --> 00:03:16.240 line:100% position:50% align:middle
and we'll say, "req.flash('error',". I'll
say, "Something Happened,"

00:03:16.240 --> 00:03:23.870 line:100% position:50% align:middle
like this. I think there's "info" and
"warning," and "success."

00:03:23.870 --> 00:03:26.740 line:100% position:50% align:middle
I think those are the four, maybe three.
Let's double-check. So let's give it a

00:03:26.740 --> 00:03:30.640 line:100% position:50% align:middle
save. Go to your homepage. You'll notice
that nothing pops up,

00:03:30.640 --> 00:03:35.410 line:100% position:50% align:middle
and that's because this is the same
request. We flash it, and then we also

00:03:35.410 --> 00:03:40.810 line:100% position:50% align:middle
render it out, and these flashes only get
sent on the next request,

00:03:40.810 --> 00:03:44.690 line:100% position:50% align:middle
unless you explicitly pass them. I'll show
you how to pass them in just a second.

00:03:44.690 --> 00:03:49.120 line:100% position:50% align:middle
But in this case, we flash it, and then we
redirect, which is considered a second

00:03:49.120 --> 00:03:53.990 line:100% position:50% align:middle
request. So here, now if I refresh again,
you see, there we go,

00:03:53.990 --> 00:03:57.390 line:100% position:50% align:middle
we've got our "error," we've got our
"info," we have our "warning,"

00:03:57.390 --> 00:04:03.350 line:100% position:50% align:middle
and we have our "success." So those are
all the infos that we have.

00:04:03.350 --> 00:04:07.280 line:100% position:50% align:middle
What I've done, how is this actually
happening? Well, a couple things.

00:04:07.280 --> 00:04:11.380 line:100% position:50% align:middle
First of all, let's open up our App.js,
and go back to some of our middleware.

00:04:11.380 --> 00:04:16.850 line:100% position:50% align:middle
Let's scroll down to Line 54, where it
says, "app.use((req, res,

00:04:16.850 --> 00:04:24.020 line:100% position:50% align:middle
next)". Remember, this is middleware. What
we do is we say, "res.locals.flashes =

00:04:24.020 --> 00:04:29.940 line:100% position:50% align:middle
req.flash". What that will do is it will
pull out any flashes that need to be

00:04:29.940 --> 00:04:36.020 line:100% position:50% align:middle
shown. So again, here you do the flashing.
Here, on the next request,

00:04:36.020 --> 00:04:41.150 line:100% position:50% align:middle
it will pull out the flashes. Then, what
that will do is it will put them in your

00:04:41.150 --> 00:04:46.630 line:100% position:50% align:middle
locals. Now, what is locals? Locals are
all the variables that are available to

00:04:46.630 --> 00:04:51.710 line:100% position:50% align:middle
you in your template. So we have this
variable called "flashes."

00:04:51.710 --> 00:05:00.890 line:100% position:50% align:middle
Now, if you go to our layout.pug and go
down to right here, scroll all the way

00:05:00.890 --> 00:05:04.830 line:100% position:50% align:middle
down to "block messages," here we have
some code that says, "If there is

00:05:04.830 --> 00:05:11.110 line:100% position:50% align:middle
locals.flashes," so if there are flashes,
then give ourselves a div with a class of

00:05:11.110 --> 00:05:16.310 line:100% position:50% align:middle
the flash-messages. Then, what that will
do here, let's do a quick dump of the

00:05:16.310 --> 00:05:20.020 line:100% position:50% align:middle
actual data, and the way that you can dump
something is you give yourself a pre tag

00:05:20.020 --> 00:05:26.300 line:100% position:50% align:middle
and you set it to "h.dump," and you pass
it "locals." Let's just pass it "locals."

00:05:26.300 --> 00:05:31.610 line:100% position:50% align:middle
So where did that dump come from? Well,
remember we had that helpers.js file?

00:05:31.610 --> 00:05:36.890 line:100% position:50% align:middle
Here we have that dump file, and all this
will do is allow us to just visually view

00:05:36.890 --> 00:05:42.240 line:100% position:50% align:middle
a JavaScript object on the page. So I'll
go back to our layout.

00:05:42.240 --> 00:05:47.030 line:100% position:50% align:middle
We're just dumping it, and refresh. See,
this is all of the information that's

00:05:47.030 --> 00:05:51.200 line:100% position:50% align:middle
available to us in our locals. So what we
have is some settings about what port it's

00:05:51.200 --> 00:05:56.520 line:100% position:50% align:middle
running. We have some information about
our menu. Then, here we have our flash.

00:05:56.520 --> 00:06:04.740 line:100% position:50% align:middle
This is the actual data. So let's just
dump "locals.flashes". You see that we

00:06:04.740 --> 00:06:11.150 line:100% position:50% align:middle
have an object, and then we have a key for
every type of flash that we've created.

00:06:11.150 --> 00:06:14.070 line:100% position:50% align:middle
So when we visited that page, we had an
"error," an "info," a "warning,"

00:06:14.070 --> 00:06:18.390 line:100% position:50% align:middle
a "success." So those are the four types
of flashes, and you can make any type that

00:06:18.390 --> 00:06:23.840 line:100% position:50% align:middle
you want. You could probably make one
called "wes" and when you refresh this,

00:06:23.840 --> 00:06:27.630 line:100% position:50% align:middle
you'll see now there's a category called
"wes". Obviously, it's going to be white,

00:06:27.630 --> 00:06:31.680 line:100% position:50% align:middle
because there is no styling associated
with that. But what we're doing in our

00:06:31.680 --> 00:06:36.900 line:100% position:50% align:middle
layout.pug is we are using object.keys to
get an array of "error,"

00:06:36.900 --> 00:06:41.970 line:100% position:50% align:middle
"info," "warning," and "success." Then, we
loop over each of those categories,

00:06:41.970 --> 00:06:49.110 line:100% position:50% align:middle
"error," "info," "warning," "success," and
we loop over each of the flash messages

00:06:49.110 --> 00:06:53.080 line:100% position:50% align:middle
that happen inside of that. Right? Because
if we had multiple errors,

00:06:53.080 --> 00:07:00.180 line:100% position:50% align:middle
"error," I'll say, "Another thing
happened." I'll do a third one.

00:07:00.180 --> 00:07:05.830 line:100% position:50% align:middle
"OH NO!!!" So now, we should have three
error messages when we refresh the page.

00:07:05.830 --> 00:07:09.170 line:100% position:50% align:middle
There we go. See, our error has,
"Something Happened," "Another thing

00:07:09.170 --> 00:07:13.540 line:100% position:50% align:middle
happened," and "OH NO!!!" So this
layout.pug is going to loop over each of

00:07:13.540 --> 00:07:21.000 line:100% position:50% align:middle
the messages in that flash category of
"error," and then we are simply going to

00:07:21.000 --> 00:07:25.910 line:100% position:50% align:middle
export a flash, which is this div that's
going to have a class of

00:07:25.910 --> 00:07:31.600 line:100% position:50% align:middle
"flash--${category}". So if you inspect
this real quick, you see this one has a

00:07:31.600 --> 00:07:33.070 line:100% position:50% align:middle
"flash--error," "flash--error,"
"flash--info," "flash--warnings,"

00:07:33.070 --> 00:07:40.140 line:100% position:50% align:middle
"flash--success." We put the flash message
in there. Now, this is a little bit

00:07:40.140 --> 00:07:44.000 line:100% position:50% align:middle
different. This is because if your flash
message contains some HTML,

00:07:44.000 --> 00:07:47.740 line:100% position:50% align:middle
this will embed the actual HTML. Let me
show you that real quick.

00:07:47.740 --> 00:07:59.030 line:100% position:50% align:middle
So if I had a strong tag around "thing",
now you see "thing" is actually a strong

00:07:59.030 --> 00:08:04.800 line:100% position:50% align:middle
value. If you didn't have that in your
layout.pug, if you simply just said "=",

00:08:04.800 --> 00:08:11.670 line:100% position:50% align:middle
what that will show us is the actual text
"strong", whereas we want the "!=" and

00:08:11.670 --> 00:08:18.440 line:100% position:50% align:middle
that will parse the HTML as HTML. Then, I
have a button, where I have an inline

00:08:18.440 --> 00:08:22.020 line:100% position:50% align:middle
event listener in JavaScript that just
says, "this.parent.remove" and that will

00:08:22.020 --> 00:08:26.860 line:100% position:50% align:middle
just remove the element from the DOM,
whenever you click the actual X.

00:08:26.860 --> 00:08:31.930 line:100% position:50% align:middle
So that's what flashes are. They allow us
to show information on the page.

00:08:31.930 --> 00:08:36.760 line:100% position:50% align:middle
We use a middleware in order to pass those
flashes to our locals,

00:08:36.760 --> 00:08:41.830 line:100% position:50% align:middle
and then in our layout we check if there
are any flashes and we show them on the

00:08:41.830 --> 00:08:48.170 line:100% position:50% align:middle
page if there are any flashes to show.
That will only work if you use sessions,

00:08:48.170 --> 00:08:53.020 line:100% position:50% align:middle
because the whole idea of sessions is that
you can save data from one request to

00:08:53.020 --> 00:08:58.450 line:100% position:50% align:middle
another. Otherwise, your application is
stateless, and there's no real way to pass

00:08:58.450 --> 00:09:03.100 line:100% position:50% align:middle
data from one request to another. So what
we want to do here is we've got our

00:09:03.100 --> 00:09:11.680 line:100% position:50% align:middle
"success." We can remove all of these
other flashes that we have here.

00:09:11.680 --> 00:09:18.200 line:100% position:50% align:middle
We'll double-check that it works. We'll go
to Add. We'll try to test another one.

00:09:18.200 --> 00:09:25.800 line:100% position:50% align:middle
"Testing 123," "I love bread." Try to add
a few. Actually, one more thing we want to

00:09:25.800 --> 00:09:28.950 line:100% position:50% align:middle
do before we submit this is we don't want
to redirect them to the homepage.

00:09:28.950 --> 00:09:35.700 line:100% position:50% align:middle
We want to redirect them to the actual
store. So let's change this to "`/store/".

00:09:35.700 --> 00:09:40.050 line:100% position:50% align:middle
We want to redirect them to the
"store.slug" value that has come back.

00:09:40.050 --> 00:09:45.310 line:100% position:50% align:middle
Now, there's a little bit of a problem
here, because this store here only has the

00:09:45.310 --> 00:09:50.830 line:100% position:50% align:middle
actual three pieces of data that came in.
The slug is auto-generated.

00:09:50.830 --> 00:09:55.820 line:100% position:50% align:middle
So what we want to do is actually modify
this a little bit so that we can wrap this

00:09:55.820 --> 00:10:00.680 line:100% position:50% align:middle
in parentheses. We'll call ".save" on it
immediately. Then, we can "await" that,

00:10:00.680 --> 00:10:05.610 line:100% position:50% align:middle
and we'll sort of do it all in one go. So
we create the store,

00:10:05.610 --> 00:10:08.950 line:100% position:50% align:middle
call "save," which returns a promise, and
we're going to "await" that.

00:10:08.950 --> 00:10:13.690 line:100% position:50% align:middle
The response from the "await" will be put
into our "store" variable,

00:10:13.690 --> 00:10:17.850 line:100% position:50% align:middle
so that we can then access a generated
value, which is the slug.

00:10:17.850 --> 00:10:21.790 line:100% position:50% align:middle
We'll give that a save. I'll come back
here, and what should happen is that when

00:10:21.790 --> 00:10:27.440 line:100% position:50% align:middle
I save it, it should redirect us to
"/store/testing-123". Let's give it a

00:10:27.440 --> 00:10:33.420 line:100% position:50% align:middle
save. There we go. It says,
"/store/testing-123," "Successfully

00:10:33.420 --> 00:10:37.870 line:100% position:50% align:middle
Created Testing 123. Care to leave a
review?" Then, it brings us to a 404 page.

00:10:37.870 --> 00:10:41.900 line:100% position:50% align:middle
Why? Because we haven't yet set up the
route in order to handle

00:10:41.900 --> 00:10:46.999 line:100% position:50% align:middle
"/store/testing-123." That's fine. We'll
come along to that in a couple of videos.

00:10:46.999 --> 00:10:49.999 line:100% position:50% align:middle
♪ [music] ♪