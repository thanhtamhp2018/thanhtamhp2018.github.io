WEBVTT

1
00:00:00.000 --> 00:00:00.000
 Instructor: Let's 

2
00:00:02.500 --> 00:00:03.480
look at a couple more arrow-

3
00:00:03.510 --> 00:00:05.230
function examples before we get 

4
00:00:05.240 --> 00:00:08.080
into talking about this. This is 

5
00:00:08.080 --> 00:00:09.430
something that comes up often 

6
00:00:09.440 --> 00:00:10.270
where I'm building an 

7
00:00:10.280 --> 00:00:11.860
application, and I don't 

8
00:00:11.870 --> 00:00:13.440
necessary have the data in the 

9
00:00:13.450 --> 00:00:14.780
right format that I want. 

10
00:00:15.280 --> 00:00:17.130
I'm building a website for a 

11
00:00:17.940 --> 00:00:19.820
bunch of racers, where this is 

12
00:00:19.830 --> 00:00:20.670
the first place, this is the 

13
00:00:20.680 --> 00:00:21.570
second place, and this is the 

14
00:00:21.580 --> 00:00:23.390
third place. These people have 

15
00:00:23.400 --> 00:00:25.000
been supplied to me in an array 

16
00:00:25.010 --> 00:00:26.250
of strings, and then they also 

17
00:00:26.260 --> 00:00:28.090
gave me a variable, which 

18
00:00:28.170 --> 00:00:29.970
includes the race that they won. 

19
00:00:30.190 --> 00:00:32.260
Ideally for me, I would have an 

20
00:00:32.330 --> 00:00:33.880
object which would have the 

21
00:00:33.890 --> 00:00:36.690
person's name, like Wes Boss. It 

22
00:00:36.690 --> 00:00:38.560
would have the place that they 

23
00:00:38.570 --> 00:00:41.120
won, like first place. Then it 

24
00:00:41.120 --> 00:00:44.570
would also have the race that 

25
00:00:44.580 --> 00:00:46.050
they won, which we could use the 

26
00:00:46.060 --> 00:00:48.580
race variable for that up here. 

27
00:00:49.020 --> 00:00:50.560
How would we do that? Well, we 

28
00:00:50.635 --> 00:00:51.330
can actually use Map again for 

29
00:00:51.340 --> 00:00:53.520
that. By the way, Map is not the 

30
00:00:53.530 --> 00:00:54.490
only function that arrow 

31
00:00:54.500 --> 00:00:55.700
functions work with. Arrow 

32
00:00:55.710 --> 00:00:56.860
functions work with anything, 

33
00:00:56.870 --> 00:00:58.370
and they're particularly useful 

34
00:00:58.445 --> 00:00:59.970
in these callback situations. 

35
00:01:00.590 --> 00:01:01.980
I'm going to say, "Constwin=

36
00:01:02.055 --> 00:01:06.890
winners.map." I just want to 

37
00:01:06.500 --> 00:01:08.230
return an object from each of 

38
00:01:08.240 --> 00:01:10.700
those. I'm going to say, "winner." 

39
00:01:10.700 --> 00:01:13.160
How do you return an object? If 

40
00:01:13.160 --> 00:01:15.130
we're taking in a string, you 

41
00:01:15.130 --> 00:01:17.280
would return an object, like 

42
00:01:17.060 --> 00:01:19.270
this, where the name is the 

43
00:01:19.345 --> 00:01:21.940
winner and the race is the race, 

44
00:01:22.580 --> 00:01:26.220
and the place is going to be "I." 

45
00:01:26.295 --> 00:01:28.490
Also we're going to pass in the 

46
00:01:28.500 --> 00:01:30.000
index there, so that's two 

47
00:01:30.075 --> 00:01:30.450
arguments. We have to put 

48
00:01:30.460 --> 00:01:32.640
parentheses around that. That 

49
00:01:32.650 --> 00:01:34.350
should work, where we've got 

50
00:01:34.360 --> 00:01:37.540
this object here, but I don't 

51
00:01:37.550 --> 00:01:38.350
know if it's going to work. 

52
00:01:38.360 --> 00:01:40.870
Let's see. Unexpected token, 

53
00:01:41.060 --> 00:01:43.580
colon. What's wrong here? Well, 

54
00:01:43.590 --> 00:01:44.900
earlier we told you that if you 

55
00:01:44.910 --> 00:01:47.180
take the curly brackets off it's 

56
00:01:47.190 --> 00:01:49.090
an implicit return. How do you 

57
00:01:49.100 --> 00:01:50.910
implicit return curly brackets 

58
00:01:50.920 --> 00:01:52.240
when you mean for it to be an 

59
00:01:52.250 --> 00:01:55.060
object literal, not the actual 

60
00:01:55.760 --> 00:01:57.210
function block? What we can 

61
00:01:57.220 --> 00:02:00.060
do is, you just pass parentheses 

62
00:02:00.070 --> 00:02:02.610
around those. These parentheses 

63
00:02:02.620 --> 00:02:03.670
show that you're actually going 

64
00:02:03.680 --> 00:02:05.590
to return an object literal, and 

65
00:02:05.910 --> 00:02:07.220
these curly brackets aren't for 

66
00:02:07.230 --> 00:02:08.800
the actual function block, so 

67
00:02:09.230 --> 00:02:10.780
name is winner. Race is set to 

68
00:02:10.790 --> 00:02:12.430
the actual race variable we have 

69
00:02:12.440 --> 00:02:13.870
here, and then the place is 

70
00:02:13.880 --> 00:02:15.530
going to be set to the index. 

71
00:02:15.710 --> 00:02:16.760
You've got to save. We'll take a 

72
00:02:16.770 --> 00:02:18.260
look at our data. A little hot 

73
00:02:18.270 --> 00:02:19.700
tip, you refresh. You can type 

74
00:02:19.710 --> 00:02:21.030
in "win" to see all your objects, 

75
00:02:21.105 --> 00:02:22.510
but then you got to do all this 

76
00:02:22.520 --> 00:02:24.410
work on opening them up. What 

77
00:02:24.430 --> 00:02:25.920
you can actually do is use 

78
00:02:25.930 --> 00:02:29.340
console.table pass at win, and 

79
00:02:29.415 --> 00:02:30.890
look. You get this sweet-looking 

80
00:02:30.950 --> 00:02:32.420
table that will show you all the 

81
00:02:32.430 --> 00:02:33.720
information. There's the names. 

82
00:02:33.730 --> 00:02:35.380
There's the race. There's the 

83
00:02:34.980 --> 00:02:36.410
actual place. The problem 

84
00:02:36.485 --> 00:02:38.070
that we have here is that place 

85
00:02:38.080 --> 00:02:39.660
is zero-based obviously, because 

86
00:02:39.430 --> 00:02:40.930
your index is zero-based. We'll 

87
00:02:41.005 --> 00:02:41.830
probably have to say, "place 

88
00:02:42.020 --> 00:02:45.420
plus one." There we go. One, two, 

89
00:02:45.430 --> 00:02:46.820
three. Then the other thing, 

90
00:02:46.830 --> 00:02:47.790
we haven't learned about this 

91
00:02:47.800 --> 00:02:49.360
yet, but this "race race" looks 

92
00:02:49.370 --> 00:02:50.880
a little bit redundant. A new 

93
00:02:50.890 --> 00:02:52.500
feature of ES6 is you can just 

94
00:02:52.550 --> 00:02:54.180
use "race." That's the same 

95
00:02:54.190 --> 00:02:55.610
thing as saying, "race race." 

96
00:02:55.890 --> 00:02:57.580
Just say the variable race and 

97
00:02:57.590 --> 00:02:58.890
the property name race is all 

98
00:02:58.900 --> 00:03:00.340
named race. It's going to do it 

99
00:03:00.350 --> 00:03:02.870
just for us. There we go, so 

100
00:03:02.880 --> 00:03:04.980
that's an example of doing an 

101
00:03:04.990 --> 00:03:07.110
implicit return with an object 

102
00:03:07.190 --> 00:03:08.640
literal. There's another 

103
00:03:08.650 --> 00:03:10.440
example here where we poll the 

104
00:03:10.515 --> 00:03:12.140
people in the room for ages. So, 

105
00:03:12.215 --> 00:03:13.740
say constAge= ...Maybe someone's 

106
00:03:13.815 --> 00:03:18.000
23. Someone's 62. Just keep 

107
00:03:18.010 --> 00:03:19.560
going. Maybe someone's 234, 

108
00:03:19.635 --> 00:03:23.300
maybe someone's 2. You get the 

109
00:03:23.310 --> 00:03:24.560
point, right? Just make a whole 

110
00:03:24.570 --> 00:03:25.740
bunch of ages in the thing. 

111
00:03:25.750 --> 00:03:27.050
Maybe don't go that crazy. 

112
00:03:28.260 --> 00:03:31.240
We want to filter this list for 

113
00:03:31.250 --> 00:03:34.450
people who are older than 60 

114
00:03:34.525 --> 00:03:36.590
years old. How would you do that? 

115
00:03:36.600 --> 00:03:40.670
You say, "constOld=ages.filter," 

116
00:03:41.540 --> 00:03:43.130
and then you get the age. 

117
00:03:45.130 --> 00:03:46.290
Normally you'd do something like, "

118
00:03:46.300 --> 00:03:48.420
If the age is greater than 60, 

119
00:03:48.495 --> 00:03:51.970
return true." Since we can pass 

120
00:03:51.980 --> 00:03:53.760
it a condition that goes to true 

121
00:03:53.770 --> 00:03:56.360
or false, and filter will return 

122
00:03:56.400 --> 00:03:57.740
if it's true and it won't return 

123
00:03:57.750 --> 00:03:59.380
if it's false, we can just say, "

124
00:03:59.420 --> 00:04:01.410
Age is greater or equal to 60." 

125
00:04:01.485 --> 00:04:03.810
That looks like a bit funky 

126
00:04:03.885 --> 00:04:05.090
because you got an arrow here 

127
00:04:05.100 --> 00:04:07.660
and then a greater than or equal 

128
00:04:07.670 --> 00:04:09.470
to 60 here, but what that will 

129
00:04:09.480 --> 00:04:11.010
do is, if the age is greater or 

130
00:04:11.020 --> 00:04:12.670
equal to 60, it will return true. 

131
00:04:12.920 --> 00:04:14.330
That age is going to be put back 

132
00:04:14.340 --> 00:04:16.360
into this new old array, which 

133
00:04:16.410 --> 00:04:18.620
is a console log old. See this 

134
00:04:18.490 --> 00:04:20.210
new array, 60? All the old 

135
00:04:20.220 --> 00:04:22.700
people are in this whereas none 

136
00:04:22.740 --> 00:04:23.890
of the young people are.

