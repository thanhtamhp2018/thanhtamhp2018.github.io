WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.800 --> 00:00:04.070
You can probably see where let 

3
00:00:04.270 --> 00:00:05.440
and const are going to be useful, 

4
00:00:05.450 --> 00:00:06.460
where you need to scope 

5
00:00:06.470 --> 00:00:07.880
something to a block or when you 

6
00:00:07.890 --> 00:00:08.980
want to make a variable that 

7
00:00:08.990 --> 00:00:11.180
cannot be changed by anyone by 

8
00:00:11.190 --> 00:00:12.910
accident or on purpose. Let's 

9
00:00:12.985 --> 00:00:13.950
take a look at a couple of more 

10
00:00:13.960 --> 00:00:15.540
examples of when it might be 

11
00:00:15.550 --> 00:00:17.170
useful. The first one is 

12
00:00:17.240 --> 00:00:20.040
replacing the IFFE. I'm not sure 

13
00:00:20.050 --> 00:00:20.950
if you've ever heard of this 

14
00:00:21.140 --> 00:00:23.090
before, but it was coined by Ben 

15
00:00:23.100 --> 00:00:24.460
Allman back in 2010. It's called 

16
00:00:24.470 --> 00:00:25.530
the Immediately-Involved 

17
00:00:25.760 --> 00:00:28.090
Function Expression. What it 

18
00:00:28.100 --> 00:00:31.060
does is it is a function that 

19
00:00:31.070 --> 00:00:32.910
runs itself immediately and it 

20
00:00:32.920 --> 00:00:35.160
sort of creates a scope where 

21
00:00:35.170 --> 00:00:36.960
nothing is going to leak into 

22
00:00:36.970 --> 00:00:38.470
the parent scope. In our case, 

23
00:00:38.760 --> 00:00:40.750
nothing is going to leak into 

24
00:00:41.640 --> 00:00:43.530
the global scope of the window. 

25
00:00:43.930 --> 00:00:46.190
If I have a variable, just a var 

26
00:00:46.265 --> 00:00:48.730
variable, name = Wes. I give it 

27
00:00:48.740 --> 00:00:50.210
a refresh and now I type in "

28
00:00:50.220 --> 00:00:52.480
name." It works and that's OK 

29
00:00:52.490 --> 00:00:54.640
for the demo here. What you 

30
00:00:54.650 --> 00:00:56.240
might not know is that the 

31
00:00:56.250 --> 00:00:57.720
window actually has a name 

32
00:00:57.730 --> 00:00:59.800
attribute, which is needed when 

33
00:00:59.810 --> 00:01:01.880
you have a window opening up a 

34
00:01:01.890 --> 00:01:03.070
second window. That's something 

35
00:01:03.670 --> 00:01:05.450
that may be some third-party 

36
00:01:05.460 --> 00:01:07.100
JavaScript relies on, in order 

37
00:01:07.110 --> 00:01:09.020
for it to run, or maybe someone 

38
00:01:09.030 --> 00:01:10.620
else has a variable name and you 

39
00:01:10.630 --> 00:01:12.200
accidentally overwrite that, and 

40
00:01:12.850 --> 00:01:14.160
it starts to get a little bit 

41
00:01:14.170 --> 00:01:16.290
messy. The way that they fix 

42
00:01:16.300 --> 00:01:18.220
that is you make this thing 

43
00:01:18.230 --> 00:01:19.460
called an IFFE, which is a 

44
00:01:19.470 --> 00:01:22.280
function that runs immediately 

45
00:01:22.290 --> 00:01:23.760
and you put your variables 

46
00:01:23.820 --> 00:01:25.890
inside of that. These variables 

47
00:01:25.900 --> 00:01:27.530
are now scoped to this function 

48
00:01:27.540 --> 00:01:30.530
here, because var variables are 

49
00:01:30.850 --> 00:01:32.350
function-scoped, and they are 

50
00:01:32.360 --> 00:01:33.790
not available in the global 

51
00:01:33.800 --> 00:01:35.440
scope. I type "name" there, 

52
00:01:35.450 --> 00:01:36.900
and it's actually not undefined, 

53
00:01:36.910 --> 00:01:38.650
it's just blank because that is 

54
00:01:38.660 --> 00:01:40.010
a property that lives on the 

55
00:01:40.020 --> 00:01:41.590
window natively in JavaScript. 

56
00:01:41.665 --> 00:01:43.990
If I needed to access this, 

57
00:01:44.065 --> 00:01:45.100
obviously, I'd have to do a 

58
00:01:44.710 --> 00:01:46.670
console log inside of here, but 

59
00:01:46.680 --> 00:01:47.820
the important thing is that it's 

60
00:01:47.990 --> 00:01:49.520
no longer leaking into the 

61
00:01:49.530 --> 00:01:51.580
global scope. With let and 

62
00:01:51.655 --> 00:01:52.640
const variables, we don't even 

63
00:01:52.650 --> 00:01:54.020
need a function for our 

64
00:01:54.030 --> 00:01:55.380
variables to be scoped to that. 

65
00:01:55.390 --> 00:01:57.230
Because why, let and const are 

66
00:01:57.380 --> 00:01:59.020
block scope. Really all you need 

67
00:01:59.030 --> 00:02:01.550
to do, we bring this up here and 

68
00:02:01.560 --> 00:02:03.750
let's make that a const variable. 

69
00:02:03.825 --> 00:02:05.450
Let's make sure that it's going 

70
00:02:05.450 --> 00:02:06.690
to give us this global scope 

71
00:02:06.700 --> 00:02:08.340
again. Type the name, there we 

72
00:02:07.940 --> 00:02:10.190
go. We got "Wes." But if I 

73
00:02:10.200 --> 00:02:11.660
were to simply just open and 

74
00:02:11.660 --> 00:02:13.480
close a pair of curly brackets, 

75
00:02:13.670 --> 00:02:16.110
that is a block, and now it is 

76
00:02:16.120 --> 00:02:17.910
going to be scoped to that block. 

77
00:02:18.240 --> 00:02:20.010
Refresh this, type in name, you 

78
00:02:20.020 --> 00:02:22.820
get the pair of quotes again. If 

79
00:02:22.820 --> 00:02:23.950
I wrote a console.log(name) 

80
00:02:23.960 --> 00:02:26.680
inside of this, it gives me "Wes." 

81
00:02:26.880 --> 00:02:28.030
Pretty cool. You don't need any 

82
00:02:28.040 --> 00:02:29.550
of that IFFE stuff anymore. 

83
00:02:29.625 --> 00:02:31.060
You're using let and const 

84
00:02:30.690 --> 00:02:31.640
because they are going to be 

85
00:02:31.715 --> 00:02:33.360
scoped to that block. The 

86
00:02:33.435 --> 00:02:34.810
other problem using let and 

87
00:02:34.885 --> 00:02:36.520
const will fix is with our for 

88
00:02:36.530 --> 00:02:37.750
loop. This is something that you 

89
00:02:37.750 --> 00:02:39.050
probably have all run into with 

90
00:02:39.060 --> 00:02:41.990
your regular for loop. Now, I 

91
00:02:41.990 --> 00:02:44.820
just go ahead and console.log(i), 

92
00:02:44.820 --> 00:02:46.690
and we should see that we get 

93
00:02:46.700 --> 00:02:48.720
zero through nine. Problems 

94
00:02:48.730 --> 00:02:50.420
that arise here are two things. 

95
00:02:50.430 --> 00:02:51.770
First of all, if I type "i" into 

96
00:02:51.780 --> 00:02:54.230
the console, you'll see that it 

97
00:02:54.290 --> 00:02:55.830
is 10. We have this global 

98
00:02:55.840 --> 00:02:58.110
variable that has leaked out and 

99
00:02:58.370 --> 00:03:00.160
is leaked into either the window 

100
00:03:00.170 --> 00:03:01.750
or into our parent scope which 

101
00:03:01.825 --> 00:03:03.180
is not something we necessarily 

102
00:03:03.260 --> 00:03:04.680
want. That's just a placeholder 

103
00:03:04.470 --> 00:03:06.000
value that we need to work 

104
00:03:06.010 --> 00:03:08.920
inside of this loop. Second 

105
00:03:08.930 --> 00:03:10.910
of all, is let's say you were 

106
00:03:10.920 --> 00:03:12.450
doing something inside of this 

107
00:03:12.460 --> 00:03:14.960
loop. Maybe you had something 

108
00:03:14.960 --> 00:03:16.170
that's going to run after some 

109
00:03:16.250 --> 00:03:18.230
bit of time, an AJAX request or 

110
00:03:18.305 --> 00:03:19.930
I'm going to mark it up with a 

111
00:03:20.005 --> 00:03:21.930
setTimeout(). I'm going to say 

112
00:03:22.005 --> 00:03:23.990
setTimeout(). We have a function 

113
00:03:24.000 --> 00:03:25.910
here and that function is going 

114
00:03:25.985 --> 00:03:30.070
to run after one second. 

115
00:03:30.145 --> 00:03:31.250
After one second, let's do 

116
00:03:31.290 --> 00:03:34.970
console.log, the number is...

117
00:03:35.450 --> 00:03:37.260
We'll put the i variable inside 

118
00:03:37.335 --> 00:03:39.660
of there. It's going to run 

119
00:03:40.580 --> 00:03:43.100
after a second. That's weird. 

120
00:03:43.660 --> 00:03:46.830
After a second, all of them are 

121
00:03:46.905 --> 00:03:50.430
10. The reason that we have that 

122
00:03:50.490 --> 00:03:52.940
is because, right here, console.

123
00:03:52.950 --> 00:03:54.740
log(i), that will run 

124
00:03:54.750 --> 00:03:56.090
immediately and reference 

125
00:03:56.100 --> 00:03:57.560
whatever i is. That runs 

126
00:03:57.560 --> 00:03:58.800
immediately at console log 

127
00:03:58.920 --> 00:04:01.090
itself. However, after one 

128
00:04:01.100 --> 00:04:03.150
second, this entire loop has 

129
00:04:03.160 --> 00:04:05.530
already gone through every 

130
00:04:05.540 --> 00:04:07.400
iteration that it needs to and 

131
00:04:07.410 --> 00:04:09.180
the variable i, here, is being 

132
00:04:09.290 --> 00:04:11.950
overwritten every single time. 

133
00:04:12.240 --> 00:04:14.070
The problem with that is that by 

134
00:04:14.080 --> 00:04:15.640
the time the first setTimeout() 

135
00:04:16.210 --> 00:04:18.440
runs, the i variable is already 

136
00:04:18.515 --> 00:04:19.610
at 10, and we don't have any way 

137
00:04:20.100 --> 00:04:21.220
to reference it. Similarly, 

138
00:04:21.230 --> 00:04:23.130
if you had like an AJAX request 

139
00:04:23.140 --> 00:04:24.060
where you are looping through 

140
00:04:24.070 --> 00:04:26.080
them, there's no real good way 

141
00:04:26.280 --> 00:04:28.840
other than using an IFFE to 

142
00:04:28.850 --> 00:04:31.030
reference what that i variable 

143
00:04:31.040 --> 00:04:32.800
was at the time of running, not 

144
00:04:32.810 --> 00:04:34.550
at the current time. One 

145
00:04:34.560 --> 00:04:36.710
quick way we canfix that is if 

146
00:04:36.360 --> 00:04:38.540
we just change var to let. What 

147
00:04:38.615 --> 00:04:40.780
do we know about let? Let is 

148
00:04:40.830 --> 00:04:42.910
block-scoped. Look at that this! 

149
00:04:42.985 --> 00:04:44.780
This is a block scope, so our 

150
00:04:44.790 --> 00:04:46.140
variables are now going to be 

151
00:04:46.215 --> 00:04:48.340
scoped to here. I rerun this. 

152
00:04:49.900 --> 00:04:51.180
There we go. After a second, 

153
00:04:51.190 --> 00:04:52.970
zero through nine. We're not 

154
00:04:52.980 --> 00:04:55.080
getting 10, 10 times. We getting 

155
00:04:55.150 --> 00:04:58.210
it as it was declared each and 

156
00:04:58.220 --> 00:04:59.700
every time. You can't use a 

157
00:04:59.775 --> 00:05:01.260
const for that because it will 

158
00:05:01.630 --> 00:05:03.140
overwrite itself. You can't 

159
00:05:03.150 --> 00:05:04.870
assign the same variable twice. 

160
00:05:05.840 --> 00:05:07.260
When we use let, it's going to 

161
00:05:07.320 --> 00:05:09.800
scope that i variable right to 

162
00:05:10.000 --> 00:05:11.040
our curly brackets here.

