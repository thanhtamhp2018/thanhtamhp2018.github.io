WEBVTT

1
00:00:00.000 --> 00:00:00.000
 Instructor: There are 

2
00:00:02.890 --> 00:00:06.330
a number of upgrades to object 

3
00:00:06.405 --> 00:00:07.000
literals in ES6 and these are 

4
00:00:07.010 --> 00:00:08.600
some that I use absolutely every 

5
00:00:08.610 --> 00:00:09.640
single day. These are probably 

6
00:00:09.640 --> 00:00:10.740
some of the more practical 

7
00:00:10.780 --> 00:00:12.830
things of ES6 that you're going 

8
00:00:12.905 --> 00:00:12.780
to be using. This is an 

9
00:00:13.500 --> 00:00:14.890
example where I've got all these 

10
00:00:14.970 --> 00:00:16.130
variables -- first, last age, 

11
00:00:16.205 --> 00:00:17.000
and breed -- and I need to put 

12
00:00:17.010 --> 00:00:18.480
them into an object so I would 

13
00:00:18.810 --> 00:00:20.760
say const dog = make myself an 

14
00:00:20.770 --> 00:00:22.890
object and I go, "Hmm, I need 

15
00:00:22.890 --> 00:00:24.170
first, I need last, I need age, 

16
00:00:24.180 --> 00:00:25.750
I need breed." Pop those 

17
00:00:25.760 --> 00:00:27.590
suckers in there, but the 

18
00:00:27.600 --> 00:00:29.690
property names are the same as 

19
00:00:29.700 --> 00:00:32.280
the variables, so I'm just going 

20
00:00:32.290 --> 00:00:34.320
to take the property name and 

21
00:00:34.510 --> 00:00:36.050
paste the variable in there. 

22
00:00:36.980 --> 00:00:39.560
That is OK, but it's very 

23
00:00:39.570 --> 00:00:41.210
repetitive because we're doing 

24
00:00:41.220 --> 00:00:42.880
the same thing over and over 

25
00:00:42.890 --> 00:00:44.000
again. I've just made that 

26
00:00:44.010 --> 00:00:45.620
object with all those variables 

27
00:00:45.620 --> 00:00:48.100
inside of it. If we console.log 

28
00:00:48.110 --> 00:00:48.850
that, you'll see it's just a 

29
00:00:48.860 --> 00:00:51.730
regular object here. No 

30
00:00:51.740 --> 00:00:54.750
problem, but what you can do is 

31
00:00:54.850 --> 00:00:56.700
if the property name and the 

32
00:00:56.710 --> 00:00:58.460
variable you're setting it to 

33
00:00:59.150 --> 00:01:00.950
are named the exact same thing, 

34
00:01:01.200 --> 00:01:02.840
you do not need to do this twice. 

35
00:01:02.850 --> 00:01:03.850
That's actually why I'm getting 

36
00:01:03.860 --> 00:01:05.620
these red lines here. My ESLint 

37
00:01:05.695 --> 00:01:06.970
is telling me, "Hey, it's 

38
00:01:06.810 --> 00:01:08.590
unnecessary." What you can do is 

39
00:01:08.590 --> 00:01:10.960
just take them out. This may 

40
00:01:10.970 --> 00:01:12.820
look a little bit weird, because 

41
00:01:13.300 --> 00:01:14.460
right now this kind of looks 

42
00:01:14.470 --> 00:01:16.820
like an array, but it's really 

43
00:01:16.830 --> 00:01:20.570
an object. Doing that it still 

44
00:01:20.570 --> 00:01:22.870
gives us the exact same object 

45
00:01:22.880 --> 00:01:24.310
that we're looking for, just 

46
00:01:24.320 --> 00:01:26.030
without the repetitive property 

47
00:01:26.040 --> 00:01:27.560
name is equal to the actual 

48
00:01:27.600 --> 00:01:29.270
variable name. You don't have 

49
00:01:29.280 --> 00:01:30.470
to go all in on that. That's 

50
00:01:30.480 --> 00:01:32.210
only when that is the actual 

51
00:01:32.220 --> 00:01:34.290
case. For example, if you want 

52
00:01:34.300 --> 00:01:36.310
to rename it to firstName and it 

53
00:01:36.385 --> 00:01:38.080
would be first, that's no 

54
00:01:38.090 --> 00:01:39.580
problem there. Similarly, if you 

55
00:01:39.590 --> 00:01:42.420
want to add just pals, it would 

56
00:01:42.430 --> 00:01:46.200
be Hugo and Sunny. Then 

57
00:01:46.210 --> 00:01:47.780
that is just a regular array. 

58
00:01:47.855 --> 00:01:49.350
You only need to use it when the 

59
00:01:49.360 --> 00:01:50.600
property name and the variable 

60
00:01:50.610 --> 00:01:52.100
name are exactly the same. 

61
00:01:52.510 --> 00:01:53.840
That's pretty straightforward. 

62
00:01:53.880 --> 00:01:54.970
You can start using that, 

63
00:01:55.050 --> 00:01:57.090
absolutely, already. Another 

64
00:01:57.100 --> 00:01:58.760
update is when you have method 

65
00:01:58.770 --> 00:02:01.290
definitions inside of an object. 

66
00:02:02.390 --> 00:02:05.250
Let's say we have a modal object 

67
00:02:05.260 --> 00:02:07.250
here, so let's say const modal =, 

68
00:02:07.325 --> 00:02:09.330
and inside of that we have three 

69
00:02:09.340 --> 00:02:12.060
methods. We've got create, we've 

70
00:02:12.070 --> 00:02:15.720
got open, and we have close. All 

71
00:02:15.730 --> 00:02:18.630
three of those are functions in 

72
00:02:18.640 --> 00:02:21.440
which, they are just a function, 

73
00:02:21.515 --> 00:02:24.180
and after each one we have a 

74
00:02:24.260 --> 00:02:26.960
comma here. We did that on, 

75
00:02:27.030 --> 00:02:28.910
and on, and on. However, what 

76
00:02:28.920 --> 00:02:31.520
you can do instead of doing that 

77
00:02:32.140 --> 00:02:33.910
is just leave out the word 

78
00:02:33.920 --> 00:02:37.420
function and leave out the colon, 

79
00:02:37.530 --> 00:02:38.810
and that is the exact same thing, 

80
00:02:38.820 --> 00:02:41.400
so create () is the exact same 

81
00:02:41.410 --> 00:02:42.970
thing as doing colon function, 

82
00:02:42.970 --> 00:02:44.580
it's just a shorthand. 

83
00:02:44.790 --> 00:02:46.220
There's no weirdness with the 

84
00:02:46.230 --> 00:02:47.700
keyword this or anything, and 

85
00:02:47.710 --> 00:02:49.440
that's exactly why I said you 

86
00:02:49.450 --> 00:02:51.380
should not use an arrow function 

87
00:02:51.390 --> 00:02:53.190
when you're using a method of an 

88
00:02:53.200 --> 00:02:54.730
object, because we have this 

89
00:02:54.740 --> 00:02:56.270
other shorthand here and it's 

90
00:02:56.280 --> 00:02:58.060
not going to monkey with the 

91
00:02:58.070 --> 00:02:59.460
scoping of any of your variables 

92
00:02:59.470 --> 00:03:01.400
or the keyword this. We can just 

93
00:03:01.400 --> 00:03:03.250
take that to there and that to 

94
00:03:03.260 --> 00:03:05.110
there. Similarly, if you had 

95
00:03:05.120 --> 00:03:06.580
any params that you needed to 

96
00:03:06.620 --> 00:03:08.410
pass it, like maybe a selector 

97
00:03:08.270 --> 00:03:11.110
here, maybe some content here, 

98
00:03:11.820 --> 00:03:13.510
maybe like a goodbye message 

99
00:03:13.520 --> 00:03:16.440
here, you can just pass them in 

100
00:03:16.450 --> 00:03:17.910
as you normally would into a 

101
00:03:17.920 --> 00:03:19.890
function. Those are two big 

102
00:03:19.900 --> 00:03:22.020
updates to the object literal. 

103
00:03:22.250 --> 00:03:23.940
A third one I want to talk about 

104
00:03:23.950 --> 00:03:25.550
is something called computed 

105
00:03:25.625 --> 00:03:27.150
property names. It's also 

106
00:03:27.410 --> 00:03:29.210
something that you might not use 

107
00:03:29.220 --> 00:03:30.970
every single day. Good to know 

108
00:03:30.980 --> 00:03:32.100
in case you'll ever run into a 

109
00:03:32.110 --> 00:03:33.580
situation when you need it. 

110
00:03:34.090 --> 00:03:35.470
Let's set up a little example 

111
00:03:35.480 --> 00:03:37.890
where we have a key that needs 

112
00:03:37.900 --> 00:03:39.750
to be set on an object. We'll 

113
00:03:39.825 --> 00:03:41.510
make a key variable and we'll 

114
00:03:41.320 --> 00:03:44.790
say pocket color. Why? Because 

115
00:03:44.800 --> 00:03:46.950
we're going to make a tshirt 

116
00:03:45.780 --> 00:03:47.010
here and the tshirt has a whole 

117
00:03:47.020 --> 00:03:49.100
bunch of different attributes 

118
00:03:49.110 --> 00:03:50.460
about it, like pocket color, 

119
00:03:50.470 --> 00:03:53.460
main color, ink color, sleeve 

120
00:03:53.470 --> 00:03:54.700
color, all these things. 

121
00:03:54.775 --> 00:03:55.440
We're going to talk about the 

122
00:03:55.450 --> 00:03:57.400
pocket color here, and we have a 

123
00:03:57.410 --> 00:04:00.040
value of that actual color is 

124
00:03:59.970 --> 00:04:03.790
going to be set to yellow. We 

125
00:04:03.800 --> 00:04:05.630
need to use these variables to 

126
00:04:05.640 --> 00:04:07.900
set a property and a value of an 

127
00:04:07.900 --> 00:04:10.970
object. What we could do is 

128
00:04:10.980 --> 00:04:12.330
say const tshirt = object 

129
00:04:12.405 --> 00:04:14.540
literal. Previously what we've 

130
00:04:14.890 --> 00:04:17.150
been able to do is you can say 

131
00:04:17.160 --> 00:04:19.960
key is equal to the actual value. 

132
00:04:20.035 --> 00:04:21.710
Let's take a look at what we've 

133
00:04:21.720 --> 00:04:23.890
got so far. Console.log tshirt, 

134
00:04:23.965 --> 00:04:27.110
there's the tshirt. The 

135
00:04:27.120 --> 00:04:29.170
pocket color has been 

136
00:04:29.180 --> 00:04:31.010
dynamically set, and if I were 

137
00:04:31.020 --> 00:04:32.540
to change this from pocket color 

138
00:04:32.550 --> 00:04:36.700
to ink color, see the variables 

139
00:04:36.775 --> 00:04:39.730
are now updated to ink color. We 

140
00:04:39.740 --> 00:04:41.370
are creating an object literal 

141
00:04:41.380 --> 00:04:43.160
with it. That has always been 

142
00:04:43.170 --> 00:04:44.710
possible, but one thing that is 

143
00:04:44.720 --> 00:04:46.860
now possible is, what if we 

144
00:04:46.870 --> 00:04:49.680
wanted the opposite color to go 

145
00:04:49.690 --> 00:04:51.050
along with that as well, because 

146
00:04:51.060 --> 00:04:52.220
maybe we are printing something 

147
00:04:52.230 --> 00:04:53.440
on top of that pocket and we 

148
00:04:53.515 --> 00:04:55.280
needed to know what is the exact 

149
00:04:55.460 --> 00:04:57.480
opposite color of that? It could 

150
00:04:57.555 --> 00:04:58.970
go on top of it. I've got a 

151
00:04:58.980 --> 00:05:00.440
little function right here that 

152
00:05:00.515 --> 00:05:02.380
I'm going to bring in. It's just 

153
00:05:02.410 --> 00:05:03.930
a function that takes in the hex 

154
00:05:03.940 --> 00:05:05.810
code and returns the inverse 

155
00:05:05.820 --> 00:05:07.310
color, so just the opposite 

156
00:05:07.320 --> 00:05:11.690
color. If I wanted to make a 

157
00:05:11.700 --> 00:05:14.970
key of pocket color opposite, 

158
00:05:16.550 --> 00:05:18.260
how would I do that? I could 

159
00:05:18.270 --> 00:05:19.890
make another variable here and 

160
00:05:19.900 --> 00:05:22.900
then say opposite, but 

161
00:05:22.970 --> 00:05:24.130
that's not really what I'm 

162
00:05:24.360 --> 00:05:26.750
looking for. What we need to 

163
00:05:26.760 --> 00:05:28.790
do is we need to compute the 

164
00:05:28.800 --> 00:05:30.720
copy. What we can do here is 

165
00:05:30.730 --> 00:05:32.610
just use a function, a template 

166
00:05:32.600 --> 00:05:34.110
string or any other JavaScript 

167
00:05:34.380 --> 00:05:36.470
right inside of the property 

168
00:05:36.480 --> 00:05:39.100
name. I'm going to give myself 

169
00:05:39.210 --> 00:05:42.450
the key and then tack on the 

170
00:05:42.460 --> 00:05:47.940
word opposite. We can use this 

171
00:05:47.950 --> 00:05:50.740
function that I run here, invert 

172
00:05:50.770 --> 00:05:52.440
color, and it's going to take 

173
00:05:52.450 --> 00:05:55.480
the value as well. Look at 

174
00:05:55.490 --> 00:05:56.690
what's going to happen. We 

175
00:05:56.690 --> 00:05:58.980
refresh, key has already been 

176
00:05:59.020 --> 00:05:59.640
declared, 

177
00:05:59.890 --> 00:06:02.890
because I made two 

178
00:06:02.900 --> 00:06:06.010
keys here. We've got pocket 

179
00:06:06.020 --> 00:06:07.500
color and pocket color opposite. 

180
00:06:07.510 --> 00:06:09.150
Those are being dynamically set 

181
00:06:09.190 --> 00:06:10.540
on this actual variable. 

182
00:06:10.790 --> 00:06:11.850
Previously what you had to do, 

183
00:06:11.860 --> 00:06:12.980
is you would have had to make 

184
00:06:13.055 --> 00:06:16.520
the tshirt object, then go and 

185
00:06:16.590 --> 00:06:18.470
update the tshirt object like 

186
00:06:18.360 --> 00:06:21.890
that and like that. 

187
00:06:22.000 --> 00:06:23.010
Which is not the end of the 

188
00:06:23.020 --> 00:06:24.290
world, but it's kind of cool 

189
00:06:24.300 --> 00:06:26.490
that we can now do it inside of 

190
00:06:26.500 --> 00:06:28.150
our object literal. As we define 

191
00:06:28.160 --> 00:06:30.180
it, we can compute the property 

192
00:06:30.180 --> 00:06:32.320
keys. Let's look at one more 

193
00:06:31.820 --> 00:06:33.530
example here, where sometimes 

194
00:06:33.540 --> 00:06:35.490
you have some funky data that 

195
00:06:35.830 --> 00:06:37.590
you get in from an API and you 

196
00:06:37.600 --> 00:06:39.340
don't have too much of an option 

197
00:06:39.350 --> 00:06:40.670
to work with. Obviously, you 

198
00:06:40.745 --> 00:06:41.830
would have a little bit of a 

199
00:06:41.840 --> 00:06:43.160
nicer structure but sometimes 

200
00:06:43.170 --> 00:06:45.660
you might have a keys array, 

201
00:06:45.670 --> 00:06:50.320
which is size, color, and 

202
00:06:50.390 --> 00:06:53.250
weight. Then you have a values 

203
00:06:53.260 --> 00:06:55.100
array, which is something like 

204
00:06:55.100 --> 00:06:59.840
medium, red, and 100, and you 

205
00:06:59.670 --> 00:07:01.370
need to make an object where the 

206
00:07:01.380 --> 00:07:03.060
size is medium, the color is red 

207
00:07:03.070 --> 00:07:04.580
and the weight is 100. You 

208
00:07:04.590 --> 00:07:08.340
could make an object here where 

209
00:07:08.350 --> 00:07:12.810
you say const shirt =, you could 

210
00:07:12.820 --> 00:07:15.760
say keys of zero, and that's 

211
00:07:15.770 --> 00:07:17.120
actually a computed property 

212
00:07:17.130 --> 00:07:19.260
name here. One cool thing that 

213
00:07:19.270 --> 00:07:22.080
you could do is you say keys.

214
00:07:24.660 --> 00:07:28.350
shift = values.shift and then do 

215
00:07:28.360 --> 00:07:29.700
it once more, and again. 

216
00:07:30.840 --> 00:07:32.730
That's the same code three times, 

217
00:07:32.740 --> 00:07:38.960
but what is it going to do? Size 

218
00:07:38.970 --> 00:07:42.050
medium, color red, and weight 

219
00:07:42.125 --> 00:07:44.620
100. What happens here is that 

220
00:07:44.930 --> 00:07:46.250
essentially we just plucked off 

221
00:07:46.510 --> 00:07:48.660
one from each of the arrays as 

222
00:07:48.670 --> 00:07:50.900
we went through. You can just 

223
00:07:51.180 --> 00:07:52.760
run the same code over and over 

224
00:07:52.860 --> 00:07:54.580
again. Obviously, you could 

225
00:07:54.655 --> 00:07:55.190
have also just looped over them 

226
00:07:55.430 --> 00:07:56.670
and set it on the shirt after 

227
00:07:56.680 --> 00:07:57.810
the fact, but that's another 

228
00:07:57.820 --> 00:07:59.430
example to show you when you 

229
00:07:59.440 --> 00:08:00.820
might be able to use computed 

230
00:08:00.830 --> 00:08:01.660
property keys.

