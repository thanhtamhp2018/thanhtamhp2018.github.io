WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.540 --> 00:00:04.330
Arrays now have a .find and a .

3
00:00:04.430 --> 00:00:06.230
findIndex, which are really 

4
00:00:06.290 --> 00:00:07.980
helpful. Some of my projects I 

5
00:00:07.980 --> 00:00:09.170
don't even need to load in a 

6
00:00:09.170 --> 00:00:10.620
utility library like lodash. 

7
00:00:11.300 --> 00:00:12.700
Let's take a look at what find 

8
00:00:12.700 --> 00:00:15.480
and findIndex do. A very common 

9
00:00:15.480 --> 00:00:18.070
use case is when you have some 

10
00:00:18.240 --> 00:00:20.060
data that comes back from an API. 

11
00:00:20.140 --> 00:00:22.160
Here I've got some data that 

12
00:00:22.160 --> 00:00:24.420
comes back from Instagram. It's 

13
00:00:24.550 --> 00:00:27.610
a posts array, where each item 

14
00:00:27.660 --> 00:00:30.620
inside of the post is an object. 

15
00:00:31.800 --> 00:00:33.280
Often we'll have something like, 

16
00:00:33.280 --> 00:00:35.330
let's take this one. BAF_KY4 

17
00:00:35.600 --> 00:00:37.730
blah, blah, blah, blah, and we 

18
00:00:37.730 --> 00:00:40.010
want to find the entire object 

19
00:00:40.680 --> 00:00:42.440
inside of this array. Now, 

20
00:00:42.710 --> 00:00:44.470
because it's an object, we can't 

21
00:00:44.470 --> 00:00:50.140
simply say post.the ID of the 

22
00:00:50.140 --> 00:00:52.060
object. We can't say anything 

23
00:00:52.210 --> 00:00:53.560
like posts or something like 

24
00:00:53.610 --> 00:00:56.980
that, because we don't have any 

25
00:00:57.170 --> 00:00:59.120
keys to grab things from an 

26
00:00:59.120 --> 00:01:01.220
array because an array is always 

27
00:01:01.390 --> 00:01:04.200
indexed based. What we 

28
00:01:04.200 --> 00:01:05.860
actually need to do is we will 

29
00:01:05.860 --> 00:01:07.700
say, const post equals, we'll 

30
00:01:07.700 --> 00:01:09.260
take the post, and we'll call .

31
00:01:09.510 --> 00:01:11.090
find on it. Now, find is a 

32
00:01:11.090 --> 00:01:14.020
callback where you return true 

33
00:01:14.230 --> 00:01:16.720
or false until you actually find 

34
00:01:16.720 --> 00:01:18.550
it. It's going to loop over 

35
00:01:18.550 --> 00:01:19.800
every single post that we have, 

36
00:01:20.830 --> 00:01:23.970
and I'm going to look for the 

37
00:01:23.970 --> 00:01:25.970
specific one that I want. I'm 

38
00:01:25.970 --> 00:01:27.100
going to open up a hop log here 

39
00:01:27.100 --> 00:01:28.480
and then I'll refactor that 

40
00:01:28.480 --> 00:01:29.590
because we don't actually need 

41
00:01:29.590 --> 00:01:31.200
it. Let's say I'm going to grab 

42
00:01:31.200 --> 00:01:34.020
this one, VBGT, and I'm going to 

43
00:01:34.020 --> 00:01:37.310
console.log the post. Let's just 

44
00:01:37.310 --> 00:01:39.410
see where we're at here. OK, 

45
00:01:39.600 --> 00:01:40.500
what this is doing is it is 

46
00:01:40.500 --> 00:01:42.110
looping over every single one 

47
00:01:42.110 --> 00:01:43.840
and giving me the entire post. 

48
00:01:44.330 --> 00:01:46.400
Then I want to say post.code, 

49
00:01:46.400 --> 00:01:49.230
should give me all of the codes. 

50
00:01:49.840 --> 00:01:52.720
Then I want to say if post.code 

51
00:01:52.720 --> 00:01:55.060
is equal to the one that we're 

52
00:01:55.060 --> 00:01:57.900
looking for, then we will return 

53
00:01:58.050 --> 00:02:00.710
true. Otherwise, we just can 

54
00:02:00.750 --> 00:02:03.280
return, or return false 

55
00:02:03.300 --> 00:02:05.700
explicitly. Then I think 

56
00:02:05.740 --> 00:02:07.110
that what that should do to us 

57
00:02:07.250 --> 00:02:08.300
is, we should now have a 

58
00:02:08.300 --> 00:02:10.620
variable called post, and that 

59
00:02:10.820 --> 00:02:13.770
is the actual one from our 

60
00:02:13.770 --> 00:02:15.080
object, so now we have the 

61
00:02:15.080 --> 00:02:16.270
entire post and we can go ahead 

62
00:02:16.270 --> 00:02:17.860
and grab the caption, or the 

63
00:02:17.860 --> 00:02:19.440
source, or the ID or the number 

64
00:02:19.440 --> 00:02:21.410
of likes from that Instagram 

65
00:02:21.410 --> 00:02:23.570
post. This can be done a lot 

66
00:02:23.620 --> 00:02:25.950
easier. This is just explicit, 

67
00:02:25.950 --> 00:02:27.250
so you can see what's going on, 

68
00:02:27.580 --> 00:02:29.120
but we can actually just use 

69
00:02:30.140 --> 00:02:32.480
this. For each post we say, does 

70
00:02:32.480 --> 00:02:34.940
the post.code equal to the 

71
00:02:35.680 --> 00:02:37.370
actual one that we're looking 

72
00:02:37.370 --> 00:02:38.680
for? Again, I'm just going to 

73
00:02:38.680 --> 00:02:41.240
grab an ID here, and paste it in 

74
00:02:41.270 --> 00:02:43.060
there. We should be able to just 

75
00:02:43.060 --> 00:02:45.740
console.log that post. One 

76
00:02:45.740 --> 00:02:46.800
other improvement we can do is 

77
00:02:46.800 --> 00:02:48.180
this probably isn't hard coded 

78
00:02:48.180 --> 00:02:49.300
like that. We probably want to 

79
00:02:49.300 --> 00:02:50.890
put in a variable called code, 

80
00:02:51.550 --> 00:02:53.590
stick it like that, and then it 

81
00:02:53.590 --> 00:02:54.680
should be able to still find the 

82
00:02:54.780 --> 00:02:56.120
post, depending on our code. 

83
00:02:56.720 --> 00:02:58.980
Great. That is good for finding 

84
00:02:58.980 --> 00:03:00.560
the actual thing inside of the 

85
00:03:00.780 --> 00:03:02.280
array. If you want to find 

86
00:03:02.280 --> 00:03:04.050
multiple, how would you do that? 

87
00:03:04.360 --> 00:03:06.080
You would use .filter, and that 

88
00:03:06.080 --> 00:03:07.130
would give you an array of 

89
00:03:07.130 --> 00:03:09.270
objects instead. Next up, we 

90
00:03:09.270 --> 00:03:12.170
have .findIndex. That's really 

91
00:03:12.170 --> 00:03:13.310
helpful when you actually have 

92
00:03:13.310 --> 00:03:14.480
the item you want, but you want 

93
00:03:14.480 --> 00:03:16.040
to know where in the array is it 

94
00:03:16.590 --> 00:03:18.590
actually? What we want to do 

95
00:03:19.190 --> 00:03:22.430
is, let's say we want to delete 

96
00:03:22.430 --> 00:03:24.840
one of these posts, and all that 

97
00:03:24.840 --> 00:03:28.680
we know is that we have the ID 

98
00:03:28.820 --> 00:03:31.120
or the code right here. We need 

99
00:03:31.120 --> 00:03:33.960
to find out where in this is it, 

100
00:03:34.120 --> 00:03:35.980
so we can delete it. I'm going 

101
00:03:35.980 --> 00:03:39.070
to say, const post index equals 

102
00:03:39.380 --> 00:03:41.580
post.findIndex. Again, I'm 

103
00:03:41.600 --> 00:03:48.650
going to do it longhand. We'll 

104
00:03:48.650 --> 00:03:52.690
say, if post.code equal to code, 

105
00:03:53.720 --> 00:03:57.720
then return true. Otherwise, we 

106
00:03:57.720 --> 00:03:59.090
can just do nothing, return, or 

107
00:03:59.160 --> 00:04:02.660
return false explicitly. Now we 

108
00:04:02.660 --> 00:04:03.980
should be able to find what the 

109
00:04:04.010 --> 00:04:08.590
index is of that post. It's the 

110
00:04:08.780 --> 00:04:13.280
22nd post in there. We can 

111
00:04:13.280 --> 00:04:15.140
also now go back and just say...

112
00:04:15.720 --> 00:04:17.360
we don't need these extra 

113
00:04:17.470 --> 00:04:18.910
parentheses here. We don't need 

114
00:04:18.910 --> 00:04:21.160
this entire thing. Why? Because 

115
00:04:21.160 --> 00:04:22.470
we can only return as the post.

116
00:04:22.780 --> 00:04:27.050
code is equal to our code. 

117
00:04:29.190 --> 00:04:30.560
Now that we actually have the 

118
00:04:30.560 --> 00:04:32.490
index, we could go ahead and 

119
00:04:32.870 --> 00:04:34.150
just take that out of there. 

120
00:04:34.260 --> 00:04:35.660
We're going to look at a spread 

121
00:04:35.660 --> 00:04:37.570
example in the future where it 

122
00:04:37.840 --> 00:04:39.080
shows a great way, how do you 

123
00:04:39.080 --> 00:04:41.280
just slice out one item from an 

124
00:04:41.370 --> 00:04:41.630
array.

