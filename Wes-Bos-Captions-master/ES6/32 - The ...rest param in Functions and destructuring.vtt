WEBVTT

1
00:00:02.460 --> 00:00:02.830
 Instructor: Whenever 

2
00:00:02.830 --> 00:00:04.400
you see these three little dots, 

3
00:00:04.400 --> 00:00:06.140
it's not just a spread. It could 

4
00:00:06.150 --> 00:00:07.740
also be what's called a rest 

5
00:00:07.815 --> 00:00:09.060
param. Even though it looks to 

6
00:00:09.070 --> 00:00:10.320
be the exact same thing, it's 

7
00:00:10.330 --> 00:00:12.080
actually the exact opposite 

8
00:00:12.080 --> 00:00:13.390
thing. Let's think about that 

9
00:00:13.430 --> 00:00:14.440
for a second. If the ...

10
00:00:14.515 --> 00:00:18.300
spread param takes one thing, 

11
00:00:18.340 --> 00:00:20.560
which is an array, and unpacks 

12
00:00:20.650 --> 00:00:24.150
it into multiple items, or takes 

13
00:00:24.290 --> 00:00:26.250
a string and unpacks it into 

14
00:00:26.370 --> 00:00:28.350
multiple items of an array, the 

15
00:00:28.425 --> 00:00:29.560
rest param does the exact 

16
00:00:29.600 --> 00:00:31.530
opposite. It takes multiple 

17
00:00:31.630 --> 00:00:34.080
things and packs it into a 

18
00:00:34.090 --> 00:00:35.680
single array. Let's take a look 

19
00:00:35.770 --> 00:00:37.140
at an example here. There's 

20
00:00:37.150 --> 00:00:39.230
two places where you'll use a 

21
00:00:39.305 --> 00:00:41.500
rest param. That is first in a 

22
00:00:41.510 --> 00:00:43.850
function, and second in a 

23
00:00:43.925 --> 00:00:46.450
destructuring situation. Let's 

24
00:00:46.460 --> 00:00:47.700
say we have a function here 

25
00:00:47.710 --> 00:00:49.080
called convert currency. 

26
00:00:49.620 --> 00:00:51.060
That function is going to take 

27
00:00:51.070 --> 00:00:52.760
two things. It's going to take a 

28
00:00:52.770 --> 00:00:54.930
rate, and then it's also going 

29
00:00:55.005 --> 00:00:57.160
to take a unknown amount of 

30
00:00:57.540 --> 00:00:59.440
currency. Maybe it would be 

31
00:01:00.140 --> 00:01:03.490
amount one, amount two, amount 

32
00:01:03.580 --> 00:01:06.450
three, amount four, etc., etc. 

33
00:01:06.930 --> 00:01:08.040
Here we don't really know how 

34
00:01:08.050 --> 00:01:10.140
many the person is going to pass. 

35
00:01:10.540 --> 00:01:11.620
Now you might be saying, "That's 

36
00:01:11.630 --> 00:01:13.740
fine, just don't do it all and 

37
00:01:13.750 --> 00:01:16.520
use the arguments object." The 

38
00:01:16.530 --> 00:01:17.910
problem here is that we actually 

39
00:01:17.920 --> 00:01:20.390
want the first thing to be the 

40
00:01:20.400 --> 00:01:22.790
rate, and then the rest of them 

41
00:01:22.950 --> 00:01:24.410
to be the amounts that the 

42
00:01:24.420 --> 00:01:25.590
person would like to convert. 

43
00:01:25.960 --> 00:01:27.190
Let's see how we would run it 

44
00:01:27.200 --> 00:01:28.220
here. We say convert 

45
00:01:28.580 --> 00:01:30.720
currency, and we want to convert 

46
00:01:30.795 --> 00:01:32.890
at $1.54 per dollar. Then we 

47
00:01:32.900 --> 00:01:33.940
want to pass a whole bunch of 

48
00:01:33.960 --> 00:01:35.490
dollar values that we have. 

49
00:01:35.565 --> 00:01:38.290
Maybe we have $10, maybe we have $

50
00:01:38.365 --> 00:01:41.090
23, maybe we have $52, maybe a $

51
00:01:41.165 --> 00:01:44.140
1, and then another $56. Those 

52
00:01:44.150 --> 00:01:45.460
amounts are being passed, and 

53
00:01:45.460 --> 00:01:47.000
there's no real good way for us 

54
00:01:47.010 --> 00:01:48.520
to do that, until now that we 

55
00:01:48.530 --> 00:01:50.750
have the rest param. What we 

56
00:01:50.750 --> 00:01:53.300
can do is we can say ...amounts, 

57
00:01:53.950 --> 00:01:55.160
and it's going to do exactly 

58
00:01:55.160 --> 00:01:56.250
what you think it would do. It's 

59
00:01:56.260 --> 00:01:57.810
going to grab the rest of them. 

60
00:01:57.880 --> 00:01:59.460
Let's take a quick look at what 

61
00:01:59.535 --> 00:02:00.010
we have. We're going to console.

62
00:02:00.020 --> 00:02:04.720
log rate and amounts. Now what 

63
00:02:04.795 --> 00:02:05.340
do we have here? The first 

64
00:02:05.350 --> 00:02:07.000
one is just the value as it was 

65
00:02:07.010 --> 00:02:09.190
passed in. But because we did a 

66
00:02:09.690 --> 00:02:11.190
rest param here, what it does is 

67
00:02:11.200 --> 00:02:13.300
it captures everything else that 

68
00:02:13.310 --> 00:02:15.240
gets passed to this function. If 

69
00:02:15.240 --> 00:02:17.510
I run it again with only one 

70
00:02:17.650 --> 00:02:21.410
item, you'll see here we get 1.

71
00:02:21.485 --> 00:02:22.810
54 in an array of everything, 

72
00:02:22.940 --> 00:02:24.480
here we get 1.54 in just an 

73
00:02:24.490 --> 00:02:26.790
array of one actual item. 

74
00:02:27.120 --> 00:02:28.700
That's really handy because we 

75
00:02:28.775 --> 00:02:29.440
can do something like this. We 

76
00:02:29.450 --> 00:02:33.090
could return the amounts, and we 

77
00:02:33.165 --> 00:02:35.160
could just map over that, and we 

78
00:02:35.170 --> 00:02:37.040
take the amount and return the 

79
00:02:37.050 --> 00:02:39.390
amount times the rate. Const 

80
00:02:40.370 --> 00:02:42.090
amounts equals and console.log 

81
00:02:42.100 --> 00:02:44.240
that amounts right here. We 

82
00:02:44.250 --> 00:02:45.780
should be able to get an array 

83
00:02:45.790 --> 00:02:47.410
of all of those converted 

84
00:02:47.420 --> 00:02:49.040
currency values. That's 

85
00:02:49.050 --> 00:02:50.680
where it is. You can use as many 

86
00:02:50.740 --> 00:02:52.400
possible pre ones. If you had 

87
00:02:54.220 --> 00:02:58.030
rate, and tax, and tip, and then 

88
00:02:58.040 --> 00:02:59.590
amounts, what that would give us 

89
00:02:59.600 --> 00:03:01.900
is three things. Let's take a 

90
00:03:01.910 --> 00:03:04.440
look here. Console.log rate tax 

91
00:03:04.450 --> 00:03:08.820
tip amounts. One, two, three. 

92
00:03:08.830 --> 00:03:10.640
Rate, tax, tip, and then the 

93
00:03:10.650 --> 00:03:12.870
rest of them are put into an 

94
00:03:12.880 --> 00:03:15.370
array here. Open that up, 

95
00:03:15.380 --> 00:03:16.840
you'll notice that it is a true 

96
00:03:16.850 --> 00:03:18.350
array. It's not an arguments 

97
00:03:18.360 --> 00:03:20.580
object, it's not something weird, 

98
00:03:20.580 --> 00:03:22.290
it's not array-ish. It's a true 

99
00:03:22.300 --> 00:03:23.890
array. That's the first use case 

100
00:03:23.900 --> 00:03:26.380
for when you would use a rest 

101
00:03:26.455 --> 00:03:27.640
param. Second use case is 

102
00:03:27.650 --> 00:03:29.800
when you are destructuring. Now 

103
00:03:29.810 --> 00:03:31.290
we took a look at this a whole 

104
00:03:31.300 --> 00:03:32.610
bunch of videos ago, but let's 

105
00:03:32.685 --> 00:03:35.350
take a look at a example again. 

106
00:03:36.130 --> 00:03:39.000
Let's say that we have an array 

107
00:03:39.040 --> 00:03:41.460
of data that came from a jogging 

108
00:03:41.820 --> 00:03:44.200
application. We'll have const 

109
00:03:43.930 --> 00:03:46.100
runner equals, and they just 

110
00:03:46.110 --> 00:03:47.650
gave us an array of actual data. 

111
00:03:47.660 --> 00:03:49.120
The first one is their name, the 

112
00:03:49.130 --> 00:03:51.110
second one is their runner ID, 

113
00:03:51.450 --> 00:03:53.880
and then from there on out it's 

114
00:03:53.890 --> 00:03:56.270
just information about how many 

115
00:03:56.280 --> 00:03:57.850
kilometers they have run. Maybe 

116
00:03:57.925 --> 00:04:01.450
5.5 km, 5 km, 3 km, 6 km, 

117
00:04:01.525 --> 00:04:07.470
and a big one, 35 km. That's 

118
00:04:07.760 --> 00:04:09.170
maybe some comma separated data 

119
00:04:09.180 --> 00:04:12.430
that we would get in. We want to 

120
00:04:12.505 --> 00:04:13.550
destructure this data in, 

121
00:04:13.560 --> 00:04:16.030
assuming the first item will be 

122
00:04:16.040 --> 00:04:17.760
the name, the second item will 

123
00:04:17.770 --> 00:04:19.240
be the runner ID, and then the 

124
00:04:19.250 --> 00:04:21.620
rest of the items are going to 

125
00:04:21.630 --> 00:04:24.550
be a log of all their runs. 

126
00:04:24.740 --> 00:04:26.160
We could destructure that data 

127
00:04:26.170 --> 00:04:28.070
by doing this. We'll say const 

128
00:04:27.930 --> 00:04:32.080
square brackets, name, ID, and 

129
00:04:32.260 --> 00:04:34.460
we want to say runs here, but 

130
00:04:34.110 --> 00:04:35.870
let's try without the rest and 

131
00:04:35.880 --> 00:04:37.590
see what we have. Equals runner. 

132
00:04:39.670 --> 00:04:40.700
We'll take all three of those 

133
00:04:40.710 --> 00:04:42.220
variables and console.log them. 

134
00:04:45.970 --> 00:04:49.390
We see Wes Bos, 1, 2, 3, and 5.5, 

135
00:04:49.465 --> 00:04:51.000
because that's just grabbing the 

136
00:04:51.010 --> 00:04:52.670
third thing. What if I wanted 

137
00:04:52.750 --> 00:04:56.550
the rest of them? We do ...runs, 

138
00:04:56.910 --> 00:04:58.800
and that should bundle up 

139
00:04:58.880 --> 00:05:00.810
everything that is left in the 

140
00:05:00.820 --> 00:05:02.750
array as you are destructuring 

141
00:05:02.350 --> 00:05:05.910
it. Everything to the end will 

142
00:05:05.920 --> 00:05:07.910
be bundled up into an array here 

143
00:05:07.920 --> 00:05:09.370
and you could loop over that and 

144
00:05:09.380 --> 00:05:10.770
use that data. We looked at 

145
00:05:10.780 --> 00:05:12.050
another example earlier, where 

146
00:05:12.060 --> 00:05:16.320
we had a team array. The first 

147
00:05:16.330 --> 00:05:17.540
person would be the captain, 

148
00:05:17.950 --> 00:05:19.560
second person would be the 

149
00:05:19.570 --> 00:05:21.180
assistant captain, and then the 

150
00:05:21.190 --> 00:05:22.980
rest of the people would be on 

151
00:05:22.990 --> 00:05:26.320
the actual team. We could do 

152
00:05:26.330 --> 00:05:27.480
something like this. Const 

153
00:05:28.110 --> 00:05:32.090
captain assistant, and then the 

154
00:05:32.100 --> 00:05:33.480
rest of the...we'll just call 

155
00:05:33.570 --> 00:05:36.250
them players. We do ... and that 

156
00:05:36.250 --> 00:05:37.890
should give us array of Lux, 

157
00:05:37.900 --> 00:05:40.580
Sheena and Kelly = team. Take 

158
00:05:40.590 --> 00:05:43.100
those variables now, console.log 

159
00:05:43.130 --> 00:05:46.730
them. You see we get Wes as the 

160
00:05:46.740 --> 00:05:48.280
first one, Kate as the second 

161
00:05:48.290 --> 00:05:50.110
one, and then the rest of them 

162
00:05:50.500 --> 00:05:52.200
are put into an array of players. 

163
00:05:52.200 --> 00:05:53.560
Not something you're going to 

164
00:05:53.170 --> 00:05:54.980
use all the time, but it really 

165
00:05:54.990 --> 00:05:56.520
helps you when you don't have to 

166
00:05:56.530 --> 00:05:58.430
do any splicing or counting on 

167
00:05:58.470 --> 00:05:59.810
indexes. You can just say, "Just 

168
00:05:59.820 --> 00:06:02.420
give me the rest," for either a 

169
00:06:02.430 --> 00:06:04.060
function definition, or for when 

170
00:06:04.070 --> 00:06:05.440
I'm destructuring an array.

