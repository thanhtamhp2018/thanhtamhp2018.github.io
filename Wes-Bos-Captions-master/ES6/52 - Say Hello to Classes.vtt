WEBVTT

1
00:00:00.000 --> 00:00:00.000
 Wes Bos: To 

2
00:00:02.190 --> 00:00:03.560
understand classes, let's take 

3
00:00:03.560 --> 00:00:05.060
this dog function here, which 

4
00:00:05.070 --> 00:00:06.420
refused to create Snickers and 

5
00:00:06.430 --> 00:00:09.550
Sunny, and turn that into an ES6 

6
00:00:08.750 --> 00:00:10.650
class. There's two ways to make 

7
00:00:10.950 --> 00:00:13.070
a class in ES6. There's a class 

8
00:00:13.080 --> 00:00:14.530
declaration and a class 

9
00:00:14.540 --> 00:00:16.000
expression. A class 

10
00:00:16.180 --> 00:00:17.880
declaration simply goes, you 

11
00:00:17.955 --> 00:00:19.410
write the keyword class, and 

12
00:00:19.420 --> 00:00:20.990
then you type the name of the 

13
00:00:21.000 --> 00:00:23.170
class, dog, and then you open up 

14
00:00:23.180 --> 00:00:24.970
the class block. A class 

15
00:00:24.980 --> 00:00:26.570
expression looks like this, 

16
00:00:26.645 --> 00:00:30.490
const dog = class, and you open 

17
00:00:30.500 --> 00:00:32.240
and close your class block. Very 

18
00:00:32.250 --> 00:00:34.300
similar to how you can stick a 

19
00:00:34.310 --> 00:00:36.500
function inside of a variable, 

20
00:00:36.730 --> 00:00:37.980
or you can just go ahead and 

21
00:00:37.990 --> 00:00:39.560
declare the actual function 

22
00:00:39.570 --> 00:00:41.570
itself. I much prefer to this 

23
00:00:40.920 --> 00:00:42.490
first right here. Their use case 

24
00:00:42.500 --> 00:00:44.070
is for this, but we'll go ahead 

25
00:00:44.110 --> 00:00:45.820
and use class dog here. 

26
00:00:46.510 --> 00:00:48.370
Inside of the body of your class, 

27
00:00:48.380 --> 00:00:50.140
there are a bunch of methods. 

28
00:00:50.280 --> 00:00:51.640
The only method that is 

29
00:00:51.700 --> 00:00:53.250
absolutely required when you're 

30
00:00:53.260 --> 00:00:54.780
building a class is what's 

31
00:00:54.790 --> 00:00:56.800
called a constructor. That is 

32
00:00:56.810 --> 00:00:58.080
what happens when someone 

33
00:00:58.090 --> 00:01:00.310
creates a new version. We'll say 

34
00:01:00.320 --> 00:01:02.020
constructor. Now, you notice 

35
00:01:02.030 --> 00:01:03.610
that I didn't say constructor 

36
00:01:03.810 --> 00:01:06.250
function. It's constructor open 

37
00:01:06.260 --> 00:01:08.550
close parenthesis, open close 

38
00:01:08.740 --> 00:01:10.750
your actual block. All of 

39
00:01:10.760 --> 00:01:12.050
your methods that live inside of 

40
00:01:12.060 --> 00:01:13.270
a class are going to look 

41
00:01:13.280 --> 00:01:15.180
exactly like that. It's exactly 

42
00:01:15.190 --> 00:01:17.040
the same as our object shorthand 

43
00:01:17.340 --> 00:01:19.670
from methods, that we were 

44
00:01:19.110 --> 00:01:20.480
showing earlier in our object 

45
00:01:20.490 --> 00:01:21.920
improvement video. Now, that 

46
00:01:21.930 --> 00:01:23.320
constructor video gets called 

47
00:01:23.330 --> 00:01:24.600
when someone makes a new one. 

48
00:01:24.610 --> 00:01:26.780
What is it going to take? It's 

49
00:01:26.855 --> 00:01:27.320
going to take a name, because we 

50
00:01:27.395 --> 00:01:30.120
pass it the name, and it's going 

51
00:01:30.195 --> 00:01:29.480
to take a breed, because we pass 

52
00:01:29.510 --> 00:01:31.080
it the breed. We can just 

53
00:01:31.140 --> 00:01:32.850
take these two parameters, pop 

54
00:01:32.860 --> 00:01:34.260
them in there, and the same goes 

55
00:01:34.270 --> 00:01:35.720
for the code that happens when 

56
00:01:35.730 --> 00:01:37.660
something is created. We'll say 

57
00:01:38.260 --> 00:01:40.100
this.name = whatever they pass 

58
00:01:40.110 --> 00:01:41.620
the name, and this.breed is 

59
00:01:41.630 --> 00:01:42.820
whatever they passed in as the 

60
00:01:42.830 --> 00:01:44.870
breed. Now we're done that part 

61
00:01:44.880 --> 00:01:47.260
here. We need to now work on 

62
00:01:47.270 --> 00:01:49.300
these prototype methods, bark 

63
00:01:49.530 --> 00:01:52.040
and cuddle. We can go into here, 

64
00:01:52.050 --> 00:01:53.760
and you might think you do this, 

65
00:01:54.030 --> 00:01:57.650
comma bark, open close. That is 

66
00:01:57.660 --> 00:01:59.460
almost right, but you do not 

67
00:01:59.470 --> 00:02:01.200
need this comma, or you cannot 

68
00:02:01.210 --> 00:02:03.470
have this comma here. Whenever 

69
00:02:03.480 --> 00:02:05.690
you have a method inside of a 

70
00:02:05.700 --> 00:02:08.280
class, do not put a comma. It 

71
00:02:08.290 --> 00:02:09.770
might seem weird to you, but 

72
00:02:09.780 --> 00:02:10.950
that's just the syntax. If you 

73
00:02:10.960 --> 00:02:12.310
have one there, it's going to 

74
00:02:12.385 --> 00:02:14.010
break. We'll give ourselves 

75
00:02:14.020 --> 00:02:15.610
that method there. Then inside 

76
00:02:15.620 --> 00:02:17.570
of the bark, you can just move 

77
00:02:17.580 --> 00:02:19.040
this. Console.log, bark, bark, 

78
00:02:19.050 --> 00:02:21.620
my name is this.name. Same goes 

79
00:02:21.630 --> 00:02:24.400
for the cuddle method. Of course, 

80
00:02:24.410 --> 00:02:25.950
if your method had any 

81
00:02:25.960 --> 00:02:26.980
parameters, you could put them 

82
00:02:26.990 --> 00:02:28.210
in here, but we don't in this 

83
00:02:28.220 --> 00:02:30.020
case. I'm going to move it up 

84
00:02:30.370 --> 00:02:32.950
into there. That should 

85
00:02:32.960 --> 00:02:34.500
create a dog, which we are 

86
00:02:34.510 --> 00:02:36.540
allowed to call new against, and 

87
00:02:36.540 --> 00:02:37.660
we should pass it Snickers and 

88
00:02:37.670 --> 00:02:39.350
King Charles. If I say that and 

89
00:02:39.360 --> 00:02:41.000
refresh, I should be able to 

90
00:02:40.420 --> 00:02:41.410
call all the methods I 

91
00:02:41.420 --> 00:02:42.840
previously was. We'll say 

92
00:02:42.840 --> 00:02:45.600
Snickers is a dog, Sunny is a 

93
00:02:45.610 --> 00:02:48.780
dog. snickers.bark 

94
00:02:49.010 --> 00:02:52.460
and sunny.bark. 

95
00:02:53.240 --> 00:02:55.150
Good. That is a very basics 

96
00:02:55.250 --> 00:02:57.210
of a class. However there are 

97
00:02:57.220 --> 00:02:58.570
quite a few more things that we 

98
00:02:58.580 --> 00:03:00.000
can learn about it. There's one 

99
00:03:00.010 --> 00:03:02.560
thing called a static method. In 

100
00:03:02.570 --> 00:03:03.570
order to understand what a 

101
00:03:03.580 --> 00:03:05.570
static method is, think back to 

102
00:03:05.810 --> 00:03:07.570
when we were working with array.

103
00:03:07.645 --> 00:03:10.870
from and array.of. You know 

104
00:03:10.870 --> 00:03:13.130
that we have array.from which 

105
00:03:13.140 --> 00:03:15.020
will create an array out of 

106
00:03:15.030 --> 00:03:16.370
something like a NodeList or 

107
00:03:16.445 --> 00:03:19.070
arguments. You know that we have 

108
00:03:19.080 --> 00:03:22.470
array.of, which only lives on 

109
00:03:22.480 --> 00:03:25.510
top of array. If I create, 

110
00:03:25.720 --> 00:03:27.510
and say array.of one, two, three, 

111
00:03:27.520 --> 00:03:29.110
four, that will create as an 

112
00:03:29.120 --> 00:03:31.630
array, but that of is not a 

113
00:03:31.640 --> 00:03:33.660
method on every single array. If 

114
00:03:33.530 --> 00:03:35.020
I create myself a new array 

115
00:03:35.790 --> 00:03:38.080
names = Wes and Kate, I don't 

116
00:03:38.090 --> 00:03:40.500
have names.of. That's not a 

117
00:03:40.510 --> 00:03:41.790
method. That's because it only 

118
00:03:41.800 --> 00:03:44.470
lives on array directly. It's 

119
00:03:44.480 --> 00:03:46.000
not inherited by all of them. 

120
00:03:46.370 --> 00:03:47.710
If we also wanted something 

121
00:03:47.720 --> 00:03:49.260
similar to that for our dog, 

122
00:03:49.270 --> 00:03:52.010
maybe like info, we could say 

123
00:03:52.100 --> 00:03:54.910
static info. What that would do 

124
00:03:54.920 --> 00:03:57.330
is console.log some information...

125
00:03:57.340 --> 00:04:00.710
a dog is better than a 

126
00:04:01.120 --> 00:04:04.210
cat by 10 times. It's probably 

127
00:04:04.220 --> 00:04:05.900
low, but we can work with it. 

128
00:04:06.150 --> 00:04:09.180
Now, if I say Sunny and I say 

129
00:04:09.280 --> 00:04:12.380
sunny.info, it doesn't work. 

130
00:04:12.390 --> 00:04:14.550
Why not? Because Sunny is an 

131
00:04:14.560 --> 00:04:16.200
instance of dog. How do I get 

132
00:04:16.210 --> 00:04:17.410
this info? Because it is a 

133
00:04:19.020 --> 00:04:22.050
static method, we can only call 

134
00:04:22.060 --> 00:04:25.110
it on dog directly. Then we get 

135
00:04:25.120 --> 00:04:27.240
the information. That's a static 

136
00:04:27.300 --> 00:04:28.750
method that lives inside of it. 

137
00:04:28.825 --> 00:04:30.170
We can also use getters and 

138
00:04:30.180 --> 00:04:31.860
setters on classes, just as you 

139
00:04:31.870 --> 00:04:33.430
would an object. You simply say 

140
00:04:33.530 --> 00:04:35.640
get, let's use the description. 

141
00:04:38.770 --> 00:04:40.640
When someone asks for snickers.

142
00:04:40.850 --> 00:04:45.850
description, we will return this.

143
00:04:46.060 --> 00:04:51.870
name is a this.breed type of 

144
00:04:51.940 --> 00:04:55.660
dog. Then we should be able to 

145
00:04:55.735 --> 00:04:59.410
say snickers.description, and it 

146
00:04:59.420 --> 00:05:00.780
will tell us. We used a 

147
00:05:00.850 --> 00:05:02.420
getter there. It's not a method, 

148
00:05:02.430 --> 00:05:05.280
it's a property that is computed 

149
00:05:05.520 --> 00:05:07.440
when you pull on it. Similarly, 

150
00:05:07.450 --> 00:05:08.820
if you wanted to also work with 

151
00:05:08.870 --> 00:05:14.430
a setter, say set nicknames, and 

152
00:05:14.430 --> 00:05:15.930
we'll just say whatever the 

153
00:05:15.940 --> 00:05:18.000
person actually passes in, which 

154
00:05:18.330 --> 00:05:21.790
is going to be the value. We 

155
00:05:21.800 --> 00:05:25.080
can say this.nick. We can't use 

156
00:05:25.130 --> 00:05:26.710
nicknames again, because we're 

157
00:05:26.720 --> 00:05:29.080
actually using that as a setter 

158
00:05:29.090 --> 00:05:31.050
here, so we have to have another 

159
00:05:30.190 --> 00:05:32.430
variable called nick. We say = 

160
00:05:32.505 --> 00:05:34.980
value, and then I'll just trim 

161
00:05:35.080 --> 00:05:36.240
against it. Sometimes people 

162
00:05:36.250 --> 00:05:38.250
pass in stuff with some spaces. 

163
00:05:38.250 --> 00:05:39.330
That's just an example of when 

164
00:05:39.340 --> 00:05:40.520
you might want to use a setter. 

165
00:05:41.240 --> 00:05:42.830
Give that a save. Say 

166
00:05:42.830 --> 00:05:44.910
snickers.nicknames = snicky, and 

167
00:05:44.985 --> 00:05:54.490
a whole bunch of spaces. There 

168
00:05:54.565 --> 00:05:57.010
we go. Now we can also have a 

169
00:05:57.090 --> 00:05:59.020
getter. Let's say snickers.

170
00:05:59.250 --> 00:06:02.250
nicknames won't give us anything. 

171
00:06:02.260 --> 00:06:03.490
Why not? We haven't set a getter 

172
00:06:03.500 --> 00:06:07.140
for it. Get nicknames = return 

173
00:06:07.215 --> 00:06:08.740
this.nick. We'll Snickers.

174
00:06:18.560 --> 00:06:20.430
nicknames and then snickers.

175
00:06:20.505 --> 00:06:22.930
nickname get, it returns us just 

176
00:06:22.940 --> 00:06:24.170
that. Why? Because we put a 

177
00:06:24.180 --> 00:06:26.250
setter where we trimmed it as it 

178
00:06:26.260 --> 00:06:28.360
came in, and then a getter where 

179
00:06:28.370 --> 00:06:29.460
we removed it. We could also 

180
00:06:29.470 --> 00:06:35.150
say like toUppercase. Then you 

181
00:06:35.160 --> 00:06:36.610
set it as snicky with a whole 

182
00:06:36.610 --> 00:06:39.780
bunch of spaces. You get it as 

183
00:06:39.855 --> 00:06:41.010
uppercase Snicky. That's a 

184
00:06:41.020 --> 00:06:42.480
setter and getter where you have 

185
00:06:42.160 --> 00:06:43.490
the same property value. 

186
00:06:44.080 --> 00:06:45.900
That is the basics of a class. 

187
00:06:45.910 --> 00:06:47.970
Let's look at some more advanced 

188
00:06:47.980 --> 00:06:49.260
examples of what you can do with 

189
00:06:49.270 --> 00:06:49.430
it.

