WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:00.000 --> 00:00:00.000
Sometimes there are ESLint 

3
00:00:03.460 --> 00:00:05.310
settings that are specific to a 

4
00:00:05.320 --> 00:00:07.120
single file rather than being 

5
00:00:07.130 --> 00:00:09.040
project or global settings. We 

6
00:00:09.040 --> 00:00:10.400
want these things to only be 

7
00:00:10.410 --> 00:00:12.180
specific to the file, or 

8
00:00:12.190 --> 00:00:13.690
sometimes even the lines that we 

9
00:00:13.700 --> 00:00:14.970
are working with. Sometimes 

10
00:00:14.980 --> 00:00:16.330
you have a setting where you're 

11
00:00:16.410 --> 00:00:17.980
like, "There's no way around 

12
00:00:17.990 --> 00:00:19.140
this for me, so I need to 

13
00:00:19.150 --> 00:00:20.370
temporarily turn off that 

14
00:00:20.380 --> 00:00:21.780
setting so I'm able to commit," 

15
00:00:22.100 --> 00:00:23.250
or sometimes you have an 

16
00:00:23.260 --> 00:00:25.930
external library where they are 

17
00:00:25.940 --> 00:00:27.540
introducing global variables. 

18
00:00:27.550 --> 00:00:28.640
Let's take a look at globals 

19
00:00:28.715 --> 00:00:29.670
first, and then we'll go in 

20
00:00:29.680 --> 00:00:32.170
through other settings. If 

21
00:00:32.180 --> 00:00:33.760
you have ever used Twitter or 

22
00:00:33.820 --> 00:00:35.070
Google Analytics or Facebook, 

23
00:00:35.080 --> 00:00:36.100
you know that the way that they 

24
00:00:36.110 --> 00:00:38.160
work is they put a global 

25
00:00:38.170 --> 00:00:40.160
variable in your window, like GA 

26
00:00:40.200 --> 00:00:42.200
is for Google Analytics, and if 

27
00:00:42.210 --> 00:00:43.510
you want to use Google Analytics 

28
00:00:43.520 --> 00:00:44.440
you just start using the 

29
00:00:44.450 --> 00:00:46.080
function. But if we did it 

30
00:00:46.080 --> 00:00:49.380
like this, GA.track or whatever 

31
00:00:49.390 --> 00:00:53.050
the function is, like or 

32
00:00:53.125 --> 00:00:54.250
Twitter's is TWTTR.

33
00:00:54.325 --> 00:00:56.460
trackConversion. If we start to 

34
00:00:56.470 --> 00:00:58.480
use these things, and we were to 

35
00:00:58.555 --> 00:01:00.260
ESLint our code, you know that 

36
00:01:00.270 --> 00:01:01.870
we get these two things here. GA 

37
00:01:01.880 --> 00:01:03.400
and Twitter are not defined. 

38
00:01:03.410 --> 00:01:05.220
That's because nowhere else have 

39
00:01:05.230 --> 00:01:07.020
we actually defined them. 

40
00:01:07.020 --> 00:01:10.410
What we can do with that is set 

41
00:01:10.485 --> 00:01:11.570
globals inside of this specific 

42
00:01:11.580 --> 00:01:13.650
file. The way that you do that 

43
00:01:14.060 --> 00:01:15.760
is, you go to the top, you give 

44
00:01:15.770 --> 00:01:20.330
yourself a block comment and you 

45
00:01:20.530 --> 00:01:22.640
say, globals TWTTR and GA. Now 

46
00:01:22.650 --> 00:01:23.730
when I give that a save and 

47
00:01:23.740 --> 00:01:26.960
rerun, we no longer get those 

48
00:01:27.030 --> 00:01:29.220
errors because we've said these 

49
00:01:29.230 --> 00:01:31.020
are two global variables that 

50
00:01:31.095 --> 00:01:32.380
we're expecting to have inside 

51
00:01:32.390 --> 00:01:34.240
of our window, and they're no 

52
00:01:34.250 --> 00:01:35.530
longer going to error out. 

53
00:01:35.660 --> 00:01:36.830
You could do that as a global 

54
00:01:36.840 --> 00:01:38.400
setting, but I prefer to just do 

55
00:01:38.410 --> 00:01:40.760
it file by file and really just 

56
00:01:40.830 --> 00:01:42.620
turn them off exactly where you 

57
00:01:42.630 --> 00:01:44.190
need them. Let's take a look 

58
00:01:44.200 --> 00:01:45.720
at when you might want to turn 

59
00:01:45.730 --> 00:01:47.570
off an ESLint setting in an 

60
00:01:47.580 --> 00:01:49.610
entire file, or even just in a 

61
00:01:49.620 --> 00:01:51.280
couple of lines. To illustrate 

62
00:01:51.290 --> 00:01:52.340
this, I'm going to show you 

63
00:01:52.340 --> 00:01:54.580
something called .array.includes. 

64
00:01:54.890 --> 00:01:56.710
This is part of ES2016 or ES7. 

65
00:01:58.230 --> 00:01:59.850
If we want to use this in our 

66
00:01:59.860 --> 00:02:01.120
projects, because it's really 

67
00:02:01.160 --> 00:02:02.970
handy, we have to polyfill it. 

68
00:02:03.045 --> 00:02:04.560
We're going to learn all about 

69
00:02:04.635 --> 00:02:05.580
polyfills, but essentially the 

70
00:02:05.590 --> 00:02:07.660
way that it works is that if the 

71
00:02:07.690 --> 00:02:09.180
array.prototype does not have 

72
00:02:09.190 --> 00:02:10.980
includes method, we will just 

73
00:02:11.070 --> 00:02:12.930
add it to the prototype. Now in 

74
00:02:12.940 --> 00:02:15.430
general it's a no-no to modify 

75
00:02:15.440 --> 00:02:17.930
your prototype of the built-ins 

76
00:02:17.940 --> 00:02:19.490
like array, and number, and 

77
00:02:19.565 --> 00:02:20.190
string. However, if you're 

78
00:02:20.190 --> 00:02:22.090
trying to be future-friendly, 

79
00:02:22.290 --> 00:02:24.300
then you have to polyfill it, so 

80
00:02:24.310 --> 00:02:26.130
it'll work in all of the current 

81
00:02:26.140 --> 00:02:27.570
browsers, older browsers, and 

82
00:02:27.645 --> 00:02:28.360
then when the browser does 

83
00:02:28.370 --> 00:02:30.040
implement includes, we're going 

84
00:02:30.115 --> 00:02:31.010
to be in good shape. If I 

85
00:02:31.020 --> 00:02:31.910
were doing that, I would go 

86
00:02:31.920 --> 00:02:34.060
ahead and take this code and I 

87
00:02:34.135 --> 00:02:36.120
would paste that in here. I 

88
00:02:36.130 --> 00:02:37.550
would go back and rerun my 

89
00:02:37.625 --> 00:02:40.420
ESLint here. You see that? Oh my 

90
00:02:40.420 --> 00:02:41.920
goodness, we have so many errors. 

91
00:02:42.460 --> 00:02:44.020
First of all let's look at this 

92
00:02:44.030 --> 00:02:45.470
first one, array.prototype is 

93
00:02:45.480 --> 00:02:48.070
read only. Properties should not 

94
00:02:48.080 --> 00:02:50.860
be added. That's the no-extend-

95
00:02:51.070 --> 00:02:52.660
native property. That makes 

96
00:02:52.670 --> 00:02:54.860
sense. You shouldn't be just 

97
00:02:54.870 --> 00:02:56.750
adding anything willy-nilly to 

98
00:02:56.760 --> 00:02:57.850
the actual prototype of the 

99
00:02:57.925 --> 00:02:59.110
array, but because this is a 

100
00:02:59.120 --> 00:03:00.740
standard agreed-upon method 

101
00:03:00.750 --> 00:03:02.410
that's going to be added, it's 

102
00:03:02.420 --> 00:03:04.480
actually fine to do it. What 

103
00:03:04.555 --> 00:03:06.570
we need to do is we can turn it 

104
00:03:06.580 --> 00:03:08.980
off entirely in the file. What 

105
00:03:09.055 --> 00:03:11.430
we do here is go back up here 

106
00:03:11.505 --> 00:03:13.330
and make ourself another comment. 

107
00:03:13.550 --> 00:03:17.570
We say ESLint-disable, and then 

108
00:03:17.580 --> 00:03:20.430
we say the actual rule that we 

109
00:03:20.440 --> 00:03:22.210
want to disable, no-extend-

110
00:03:22.220 --> 00:03:24.690
native. If I say ESLint-disable 

111
00:03:24.700 --> 00:03:26.380
no-extend-native, give that a 

112
00:03:26.390 --> 00:03:28.490
save. Now we've got 19 

113
00:03:28.565 --> 00:03:30.910
errors here. If I rerun it again, 

114
00:03:31.260 --> 00:03:33.230
we should only have 18 errors, 

115
00:03:33.240 --> 00:03:34.810
good. What I just did there 

116
00:03:35.280 --> 00:03:37.900
is I disabled it for the entire 

117
00:03:37.910 --> 00:03:39.420
file, or all of the code that 

118
00:03:39.430 --> 00:03:41.750
comes after it. If this was a 

119
00:03:41.760 --> 00:03:44.640
big file, then I might not want 

120
00:03:44.715 --> 00:03:45.790
to disable for the entire file. 

121
00:03:45.960 --> 00:03:47.300
I might want to just disable it 

122
00:03:47.310 --> 00:03:49.020
for single line. I'll show you 

123
00:03:49.020 --> 00:03:51.040
how to do that next. Really, 

124
00:03:51.480 --> 00:03:53.000
what you should do is, "I know, 

125
00:03:53.010 --> 00:03:54.340
I know, I shouldn't be doing 

126
00:03:54.350 --> 00:03:56.560
this, but I'm just going to 

127
00:03:55.760 --> 00:03:57.450
disable it for this one line 

128
00:03:57.460 --> 00:03:59.210
here, and then the line right 

129
00:03:59.220 --> 00:04:00.930
after it, I'm going to enable 

130
00:04:00.940 --> 00:04:03.410
that rule right again." What 

131
00:04:03.420 --> 00:04:05.060
that does is it will stop it, 

132
00:04:05.460 --> 00:04:07.290
ignore that the error that is on 

133
00:04:07.300 --> 00:04:08.930
here, only ignore this error, 

134
00:04:09.110 --> 00:04:10.970
and then keep going so if I were 

135
00:04:10.980 --> 00:04:12.920
to do it anywhere else in this 

136
00:04:12.995 --> 00:04:14.160
file it would still yell at me. 

137
00:04:14.270 --> 00:04:15.680
I'm going to save it. It should 

138
00:04:15.690 --> 00:04:17.590
still give me 18 errors. There 

139
00:04:17.665 --> 00:04:20.510
we go, no problem there. However, 

140
00:04:20.520 --> 00:04:21.760
we got all kinds of different 

141
00:04:21.770 --> 00:04:22.750
errors here, and that's because 

142
00:04:22.760 --> 00:04:24.580
I just included this polyfill. 

143
00:04:24.560 --> 00:04:25.780
It's code that someone else 

144
00:04:25.860 --> 00:04:27.700
wrote, and while maybe I should 

145
00:04:27.710 --> 00:04:29.200
fix it, I know that it works 

146
00:04:29.210 --> 00:04:30.820
fine in there's no issue with it. 

147
00:04:31.060 --> 00:04:33.230
What we could do is just ignore 

148
00:04:32.580 --> 00:04:34.860
this entire block. The only way 

149
00:04:34.935 --> 00:04:35.950
we would do that is, rather than 

150
00:04:35.960 --> 00:04:37.070
just commenting out this one 

151
00:04:37.080 --> 00:04:42.870
line here, you go up and you 

152
00:04:42.945 --> 00:04:45.180
call ESlint-disable, then you 

153
00:04:45.190 --> 00:04:47.300
take that comment, and where it 

154
00:04:47.310 --> 00:04:49.780
ends you enable it again. 

155
00:04:50.150 --> 00:04:51.920
That will just ignore absolutely 

156
00:04:51.930 --> 00:04:53.320
every single rule in between 

157
00:04:53.330 --> 00:04:55.370
these two comments. If re-run 

158
00:04:55.380 --> 00:04:58.100
our ESLint code now, you see if 

159
00:04:58.470 --> 00:05:00.210
we get no errors because I've 

160
00:05:00.220 --> 00:05:01.870
ignored all the code in between 

161
00:05:01.880 --> 00:05:03.440
it. It's really helpful to be 

162
00:05:03.450 --> 00:05:05.520
able to ignore, either on a file 

163
00:05:05.595 --> 00:05:06.660
00 which we generally put them 

164
00:05:06.670 --> 00:05:09.290
in the top -- or line by line, 

165
00:05:09.510 --> 00:05:13.020
which we disable, then re-enable 

166
00:05:13.030 --> 00:05:15.350
it again. Then finally, if you 

167
00:05:15.360 --> 00:05:16.760
would like to just disable an 

168
00:05:16.770 --> 00:05:18.550
entire block, then you could do 

169
00:05:18.560 --> 00:05:19.710
that as well. It works the 

170
00:05:19.720 --> 00:05:21.000
other way around. If you have 

171
00:05:21.075 --> 00:05:23.210
the ESLint rule which you have 

172
00:05:23.220 --> 00:05:24.600
disabled by default, you can 

173
00:05:24.610 --> 00:05:25.660
enable them by for a couple 

174
00:05:25.670 --> 00:05:27.070
lines, if you'd like that 

175
00:05:27.080 --> 00:05:28.560
specific rule to kick in only 

176
00:05:28.570 --> 00:05:29.970
for a bit of...

