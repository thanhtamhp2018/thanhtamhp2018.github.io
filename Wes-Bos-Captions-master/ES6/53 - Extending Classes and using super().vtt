WEBVTT

1
00:00:00.000 --> 00:00:00.000
 Instructor: ES6 

2
00:00:02.790 --> 00:00:04.820
classes can also be extended, 

3
00:00:04.820 --> 00:00:05.860
and to show you that, let's make 

4
00:00:05.870 --> 00:00:08.660
an animal class that will take 

5
00:00:08.670 --> 00:00:11.250
in a name. Then we'll also have 

6
00:00:11.325 --> 00:00:13.840
a couple properties, this.thirst 

7
00:00:13.915 --> 00:00:17.320
100 and this.belly if they want 

8
00:00:17.395 --> 00:00:18.230
to eat something. We'll start 

9
00:00:18.240 --> 00:00:19.350
with an empty belly when they 

10
00:00:19.360 --> 00:00:21.430
eat. Then we'll have a drink 

11
00:00:21.550 --> 00:00:24.200
method, which will take the 

12
00:00:24.210 --> 00:00:25.760
thirst down by 10, and we'll 

13
00:00:25.760 --> 00:00:29.190
also have an eat method, which 

14
00:00:29.200 --> 00:00:33.680
takes in a food, this.belly.push 

15
00:00:35.060 --> 00:00:39.980
food. Let us return this.belly 

16
00:00:40.060 --> 00:00:41.750
in case we need that value when 

17
00:00:41.760 --> 00:00:44.030
we're calling this.eat. Now, 

18
00:00:44.110 --> 00:00:46.750
that is an animal class, where 

19
00:00:46.760 --> 00:00:48.950
it's just any animal drinks and 

20
00:00:48.960 --> 00:00:51.390
eats. Any animal has thirst and 

21
00:00:51.400 --> 00:00:52.890
has a belly that things can go 

22
00:00:52.900 --> 00:00:54.720
into in. We can make an animal 

23
00:00:54.730 --> 00:00:57.680
off of that class, like a rhino. 

24
00:01:00.560 --> 00:01:04.890
New animal, and the rhino's name 

25
00:01:04.965 --> 00:01:09.830
is Rhiny, and that should work. 

26
00:01:10.490 --> 00:01:12.840
We'll look at the rhino. Good. 

27
00:01:12.915 --> 00:01:20.190
Then we also have rhino.eat a 

28
00:01:20.270 --> 00:01:21.440
burger, because that's what 

29
00:01:21.450 --> 00:01:24.480
rhinos eat, and rhino can also 

30
00:01:24.520 --> 00:01:28.200
eat some leaves, and it can also 

31
00:01:28.280 --> 00:01:29.790
eat a zebra. 

32
00:01:30.210 --> 00:01:33.540
Cool, that's working for 

33
00:01:33.550 --> 00:01:35.160
us. We'll double check rhino.

34
00:01:35.160 --> 00:01:37.860
drink as well. Good, as a rhino 

35
00:01:37.870 --> 00:01:39.520
drinks, the thirst goes down. 

36
00:01:39.950 --> 00:01:42.230
That is an example of a base 

37
00:01:42.240 --> 00:01:43.730
class that we have here. It 

38
00:01:43.730 --> 00:01:45.620
really works on its own. However, 

39
00:01:45.630 --> 00:01:47.120
sometimes you want to get a 

40
00:01:47.130 --> 00:01:48.700
little more specific, like what 

41
00:01:48.710 --> 00:01:51.750
if we had a dog? Dogs also bark. 

42
00:01:51.825 --> 00:01:54.420
How do I add that? Do we do if 

43
00:01:54.430 --> 00:01:57.040
this is the dog, then not...No, 

44
00:01:57.115 --> 00:01:58.650
what we'll do is we'll extend 

45
00:01:58.660 --> 00:02:00.650
this class of animal and create 

46
00:02:00.510 --> 00:02:03.160
a more specific class called dog, 

47
00:02:03.235 --> 00:02:07.040
so class dog extends animal. 

48
00:02:09.490 --> 00:02:12.050
Inside of that, we still have a 

49
00:02:12.060 --> 00:02:15.580
constructor. When we make a 

50
00:02:15.590 --> 00:02:17.330
new one, let's show you how 

51
00:02:17.405 --> 00:02:19.730
we're going to make one. We're 

52
00:02:19.805 --> 00:02:18.000
going to say const Snickers 

53
00:02:18.010 --> 00:02:19.990
equals a new dog, and we are 

54
00:02:20.000 --> 00:02:21.650
going to pass the name of the 

55
00:02:21.660 --> 00:02:23.760
dog, but also the breed, because 

56
00:02:24.080 --> 00:02:25.840
that's some information we also 

57
00:02:25.915 --> 00:02:26.780
want to stick along with each 

58
00:02:26.800 --> 00:02:30.820
dog. It takes in a name and 

59
00:02:30.830 --> 00:02:33.690
also takes in a breed. You may 

60
00:02:33.690 --> 00:02:35.270
think we'll do the standard this.

61
00:02:36.150 --> 00:02:40.680
name = name and this.breed = 

62
00:02:40.755 --> 00:02:42.860
breed. Let's see how that works. 

63
00:02:44.110 --> 00:02:45.880
We get an error here. Line 27, 

64
00:02:47.200 --> 00:02:50.800
this is not defined. Why is this 

65
00:02:50.810 --> 00:02:52.660
is not defined? It's inside a 

66
00:02:52.670 --> 00:02:53.740
method here. Shouldn't it be 

67
00:02:53.750 --> 00:02:57.160
bound? The problem here is 

68
00:02:57.170 --> 00:02:59.460
that when you create a dog it is, 

69
00:02:59.470 --> 00:03:01.850
in turn, extending an animal, so 

70
00:03:01.860 --> 00:03:04.470
we need to create an animal 

71
00:03:04.530 --> 00:03:06.650
before we can create a dog. 

72
00:03:07.070 --> 00:03:09.400
How do we do that? We call 

73
00:03:09.410 --> 00:03:11.450
what's called super. When I 

74
00:03:11.460 --> 00:03:12.960
first was learning how to do 

75
00:03:12.970 --> 00:03:13.680
this stuff, it was really 

76
00:03:13.680 --> 00:03:15.180
confusing to me. I was like, "

77
00:03:14.790 --> 00:03:16.440
What does super mean? I don't 

78
00:03:15.940 --> 00:03:17.640
really understand that." Super 

79
00:03:17.650 --> 00:03:19.820
means just call the thing that 

80
00:03:20.040 --> 00:03:21.930
you are extending, first. We 

81
00:03:21.940 --> 00:03:23.560
first need to create an animal 

82
00:03:23.720 --> 00:03:25.780
before we can layer on our 

83
00:03:25.790 --> 00:03:27.380
additional stuff. Simply, 

84
00:03:27.390 --> 00:03:29.730
all we do is we say super, and 

85
00:03:29.740 --> 00:03:30.840
that's going to create the 

86
00:03:30.850 --> 00:03:33.290
animal. However, what does super 

87
00:03:33.300 --> 00:03:35.850
need? Super needs a name. We're 

88
00:03:35.860 --> 00:03:37.140
essentially just calling animal, 

89
00:03:38.100 --> 00:03:39.930
like that, but the keyword super 

90
00:03:39.940 --> 00:03:41.300
will call whatever you are 

91
00:03:41.310 --> 00:03:43.440
extending, and it looks like it 

92
00:03:43.450 --> 00:03:45.380
needs a name, so we'll pass in 

93
00:03:45.390 --> 00:03:46.800
that name variable to them. 

94
00:03:47.180 --> 00:03:49.510
We don't need this.name anymore, 

95
00:03:49.650 --> 00:03:51.320
because this.name is going to 

96
00:03:50.930 --> 00:03:53.660
get set up here, as well as 

97
00:03:53.660 --> 00:03:55.110
thirst and belly and drink and 

98
00:03:55.230 --> 00:03:58.330
eat, but we do set this.breed. 

99
00:03:58.470 --> 00:04:00.400
Let's try that out now. If we 

100
00:04:00.410 --> 00:04:03.320
have Snickers...Oh, very nice, 

101
00:04:03.440 --> 00:04:04.950
Snickers already has a belly. 

102
00:04:05.120 --> 00:04:06.350
You can see the breed that we 

103
00:04:06.360 --> 00:04:08.140
just added, the name and the 

104
00:04:08.150 --> 00:04:10.000
thirst. You can see that it has 

105
00:04:10.410 --> 00:04:12.110
been created off of the 

106
00:04:12.120 --> 00:04:16.280
prototype of animal. Now, we 

107
00:04:16.290 --> 00:04:17.790
can also add our own methods on 

108
00:04:17.800 --> 00:04:20.570
top of that, like bark. We can 

109
00:04:20.580 --> 00:04:22.330
do something like console.log 

110
00:04:22.580 --> 00:04:27.520
bark bark. A dog snickers.

111
00:04:27.660 --> 00:04:31.130
bark works just fine. But what 

112
00:04:31.140 --> 00:04:32.930
about snickers.eat? What does he 

113
00:04:33.005 --> 00:04:34.140
like to eat? Plastic we find on 

114
00:04:34.150 --> 00:04:37.150
the ground. Sounds good. Burgers. 

115
00:04:38.640 --> 00:04:39.660
All of the methods that we 

116
00:04:39.670 --> 00:04:41.340
defined on the initial animal 

117
00:04:41.350 --> 00:04:43.260
have been inherited because we 

118
00:04:43.270 --> 00:04:45.580
extended the animal. Same things 

119
00:04:45.590 --> 00:04:47.020
go if you were to change any of 

120
00:04:47.030 --> 00:04:49.470
these prototypes on animal, they 

121
00:04:49.480 --> 00:04:51.960
would filter on down to dog, and 

122
00:04:51.970 --> 00:04:53.950
filter on down to Snickers where 

123
00:04:53.950 --> 00:04:56.200
we actually created it. That 

124
00:04:56.210 --> 00:04:57.980
is extending classes based off 

125
00:04:57.990 --> 00:05:00.030
of another. Generally, the rule 

126
00:05:00.040 --> 00:05:01.290
of thumb I've heard is don't go 

127
00:05:01.300 --> 00:05:02.400
deeper than two or three, 

128
00:05:02.475 --> 00:05:03.430
because you can imagine how this 

129
00:05:03.440 --> 00:05:05.080
would start to get hellish as 

130
00:05:05.090 --> 00:05:06.580
you extend and extend and extend 

131
00:05:06.590 --> 00:05:08.340
away. One other thing you 

132
00:05:08.350 --> 00:05:09.170
can do is you can actually 

133
00:05:09.180 --> 00:05:10.780
extend native things, like the 

134
00:05:10.790 --> 00:05:12.300
array. We'll take a look at that 

135
00:05:12.310 --> 00:05:12.930
next video. 

