WEBVTT

1
00:00:02.290 --> 00:00:02.470
 Instructor: Just 

2
00:00:02.470 --> 00:00:04.600
learned that Babel takes our ES6 

3
00:00:04.320 --> 00:00:06.630
code and compiles it down to ES5 

4
00:00:06.540 --> 00:00:08.120
code, but that really only gets 

5
00:00:08.130 --> 00:00:09.570
us about half the way there. 

6
00:00:09.760 --> 00:00:11.910
Babel only works on syntax. 

7
00:00:11.920 --> 00:00:13.300
What do I mean by that? It only 

8
00:00:13.310 --> 00:00:15.090
works on the new syntax, like an 

9
00:00:15.100 --> 00:00:17.290
arrow function, or using 

10
00:00:17.350 --> 00:00:19.630
template strings, or any of the 

11
00:00:19.705 --> 00:00:20.850
const stuff that we've been 

12
00:00:20.860 --> 00:00:22.380
using. Those are all syntax. 

13
00:00:22.390 --> 00:00:24.620
That's just what our code looks 

14
00:00:24.630 --> 00:00:26.470
like and how it acts. The 

15
00:00:26.480 --> 00:00:28.050
other side of things is there is 

16
00:00:28.060 --> 00:00:29.410
a whole bunch of new methods 

17
00:00:29.420 --> 00:00:31.010
that we've learned about, where 

18
00:00:31.400 --> 00:00:33.120
those things aren't included in 

19
00:00:33.195 --> 00:00:33.920
Babel. What am I talking 

20
00:00:33.920 --> 00:00:35.920
about? Well, we've got here 

21
00:00:35.960 --> 00:00:38.370
Array.from(). That is a new 

22
00:00:38.445 --> 00:00:41.610
method and it's part of ES6. We 

23
00:00:41.210 --> 00:00:42.410
got that added to arrays and 

24
00:00:42.420 --> 00:00:43.360
we've looked at a whole bunch of 

25
00:00:43.370 --> 00:00:44.540
other methods that are new. 

26
00:00:44.780 --> 00:00:47.280
However, Babel doesn't convert 

27
00:00:47.330 --> 00:00:49.580
the Array.from() to something 

28
00:00:49.690 --> 00:00:51.650
else. It just assumes that you 

29
00:00:51.660 --> 00:00:54.320
have .from available on all of 

30
00:00:54.330 --> 00:00:56.270
your arrays. What you need to 

31
00:00:56.280 --> 00:00:58.140
do in a situation like this is 

32
00:00:58.150 --> 00:00:59.910
use what's called a polyfill. A 

33
00:00:59.985 --> 00:01:02.850
polyfill is very simple. 

34
00:01:03.120 --> 00:01:04.250
Essentially it says, if the 

35
00:01:04.260 --> 00:01:06.180
browser does not have it, we 

36
00:01:06.190 --> 00:01:07.870
must recreate it with regular 

37
00:01:07.880 --> 00:01:09.610
JavaScript. What I like to 

38
00:01:09.620 --> 00:01:12.070
do is, whenever I'm looking at a 

39
00:01:12.145 --> 00:01:15.270
method, MDN will always have a 

40
00:01:15.345 --> 00:01:18.100
polyfill for it inside of the 

41
00:01:18.110 --> 00:01:20.780
documentation. What it says is 

42
00:01:20.790 --> 00:01:23.060
if there is no Array.from() 

43
00:01:23.230 --> 00:01:25.790
method available, then they just 

44
00:01:26.100 --> 00:01:28.430
instantiate Array.from(), or 

45
00:01:28.440 --> 00:01:29.740
they put it on the prototype if 

46
00:01:29.750 --> 00:01:30.650
it's something that gets 

47
00:01:30.870 --> 00:01:32.790
inherited by every single array. 

48
00:01:33.430 --> 00:01:35.410
Array.from(), and you can take a 

49
00:01:35.420 --> 00:01:37.450
look that someone really smart 

50
00:01:37.460 --> 00:01:39.010
has figured out how to just re-

51
00:01:39.540 --> 00:01:41.410
implement Array.from() without 

52
00:01:41.420 --> 00:01:42.510
actually having it in the 

53
00:01:42.520 --> 00:01:44.300
browser. What that allows us to 

54
00:01:44.375 --> 00:01:45.790
do is back port it to older 

55
00:01:45.800 --> 00:01:47.350
browsers, and that's really, 

56
00:01:47.360 --> 00:01:50.250
really nice. It's sort of a 

57
00:01:50.260 --> 00:01:52.710
pain to say, "What browsers do I 

58
00:01:52.785 --> 00:01:55.170
support? Do I need to use this 

59
00:01:55.180 --> 00:01:56.720
method or do I need to polyfill 

60
00:01:56.795 --> 00:01:59.200
it?" Rather than doing that, you 

61
00:01:59.210 --> 00:02:00.860
can just implement a polyfill 

62
00:02:00.935 --> 00:02:03.570
that will just figure it out all 

63
00:02:03.860 --> 00:02:05.770
for you. There's two major 

64
00:02:05.845 --> 00:02:07.340
polyfills that I like to tell 

65
00:02:07.350 --> 00:02:08.650
people to use. The first one is 

66
00:02:08.660 --> 00:02:12.080
using the Babel polyfill. This 

67
00:02:12.090 --> 00:02:13.950
uses something called core-js 

68
00:02:14.025 --> 00:02:16.150
which has a polyfill for every 

69
00:02:16.225 --> 00:02:19.180
single ES6 feature. All you need 

70
00:02:19.290 --> 00:02:21.380
to do, if you're using modules, 

71
00:02:21.520 --> 00:02:23.840
you just import Babel-polyfill. 

72
00:02:25.410 --> 00:02:26.840
You put that at the top of your 

73
00:02:26.910 --> 00:02:28.400
initial file, and what that's 

74
00:02:28.400 --> 00:02:29.670
going to do is include a whole 

75
00:02:29.680 --> 00:02:31.310
bunch of code which will 

76
00:02:31.385 --> 00:02:33.280
polyfill all of the older 

77
00:02:33.290 --> 00:02:34.820
browsers that you don't have. 

78
00:02:35.520 --> 00:02:37.410
That's great, but if you aren't 

79
00:02:37.460 --> 00:02:40.950
using modules, or if you really 

80
00:02:40.960 --> 00:02:42.410
don't need to polyfill all that 

81
00:02:42.420 --> 00:02:43.830
much, it can be a little bit of 

82
00:02:43.840 --> 00:02:45.500
code overhead that you don't 

83
00:02:45.510 --> 00:02:47.480
necessarily need, so there's 

84
00:02:47.555 --> 00:02:49.180
this other really great service 

85
00:02:49.190 --> 00:02:51.540
called polyfill.io. Let me go 

86
00:02:51.615 --> 00:02:53.740
over to the documentation right 

87
00:02:53.750 --> 00:02:55.510
here. This is really cool, 

88
00:02:55.520 --> 00:02:57.240
because what it does is, you 

89
00:02:57.250 --> 00:02:59.340
just include it with a script 

90
00:02:59.350 --> 00:03:02.070
tag on your page and then it 

91
00:03:02.080 --> 00:03:04.540
detects what browser is doing 

92
00:03:04.550 --> 00:03:07.090
the requesting. You don't decide, "

93
00:03:07.165 --> 00:03:08.210
All right, who's visiting my 

94
00:03:08.220 --> 00:03:09.920
website and what do I need to 

95
00:03:09.995 --> 00:03:10.820
polyfill?" Polyfill.io says, "

96
00:03:10.820 --> 00:03:13.350
All right, who's visiting and 

97
00:03:13.360 --> 00:03:15.320
what do they need polyfilled?" 

98
00:03:15.395 --> 00:03:17.610
If someone's visiting on IE9, 

99
00:03:17.685 --> 00:03:18.060
they're going to polyfill a 

100
00:03:18.060 --> 00:03:19.390
whole bunch of stuff. If 

101
00:03:19.300 --> 00:03:20.460
someone's visiting on latest 

102
00:03:20.470 --> 00:03:21.590
Chrome, they're probably not 

103
00:03:21.665 --> 00:03:23.500
going to polyfill all that much. 

104
00:03:23.730 --> 00:03:25.050
It's pretty cool. If we 

105
00:03:25.630 --> 00:03:27.490
actually go to polyfill.io and 

106
00:03:27.540 --> 00:03:30.090
copy the script tag here, put in 

107
00:03:30.100 --> 00:03:31.940
your URL bar and take off the .

108
00:03:32.015 --> 00:03:35.710
min.js. What this is, is a 

109
00:03:36.250 --> 00:03:38.370
dynamically-generated JavaScript 

110
00:03:38.380 --> 00:03:41.490
file for my specific user agent, 

111
00:03:41.500 --> 00:03:43.010
for my specific browser. 

112
00:03:43.450 --> 00:03:44.550
What is it doing here? It's 

113
00:03:44.560 --> 00:03:46.510
actually really not polyfilling 

114
00:03:46.130 --> 00:03:47.450
all that much. It looks like 

115
00:03:47.460 --> 00:03:50.340
it's just polyfilling a bunch of 

116
00:03:50.350 --> 00:03:52.270
new properties, like .after, 

117
00:03:52.280 --> 00:03:54.000
append, before, prepend, and 

118
00:03:54.075 --> 00:03:55.460
replaceWith. These are all new 

119
00:03:56.430 --> 00:03:58.430
methods that are coming to our 

120
00:03:58.490 --> 00:04:00.650
elements. If I were to fake 

121
00:04:00.725 --> 00:04:00.860
this, if I were to fake IE9...

122
00:04:00.935 --> 00:04:04.080
Let me open up my Chrome 

123
00:04:04.155 --> 00:04:07.280
DevTools here. If I go to this 

124
00:04:07.840 --> 00:04:10.430
little kabob, Network Conditions...

125
00:04:10.660 --> 00:04:12.310
It's hidden deep inside of 

126
00:04:12.360 --> 00:04:14.470
Chrome DevTools, but we want to 

127
00:04:14.080 --> 00:04:15.910
change our user agent to 

128
00:04:16.100 --> 00:04:17.460
something like Internet Explorer 

129
00:04:17.535 --> 00:04:19.790
9. Watch me refresh this now. 

130
00:04:21.190 --> 00:04:23.000
Whoa, look what it's doing. It 

131
00:04:23.010 --> 00:04:25.280
detected that we are on IE9 -- 

132
00:04:24.790 --> 00:04:26.530
or faking it -- and it's 

133
00:04:26.605 --> 00:04:28.840
polyfilling, look at, Array.from(). 

134
00:04:28.850 --> 00:04:29.970
That's the one we were just 

135
00:04:29.980 --> 00:04:32.070
looking at. If you read this 

136
00:04:32.080 --> 00:04:34.880
code here, let's just search for 

137
00:04:34.890 --> 00:04:40.260
Array.from(). It will show us 

138
00:04:40.270 --> 00:04:42.170
the code here, and if there is 

139
00:04:42.180 --> 00:04:44.440
no Array.from() it's going to 

140
00:04:44.515 --> 00:04:47.470
polyfill that for us. It's going 

141
00:04:47.545 --> 00:04:48.990
to polyfill Array.of(), Array.

142
00:04:49.320 --> 00:04:53.060
fill(), all of the element stuff, 

143
00:04:54.100 --> 00:04:55.570
all of the string .endsWith(), .

144
00:04:55.645 --> 00:04:57.250
startsWith(), .includes(). We 

145
00:04:57.260 --> 00:04:58.640
went over all these, and now you 

146
00:04:58.650 --> 00:05:00.150
can use them in your older ones. 

147
00:05:00.650 --> 00:05:02.540
What I would recommend is go 

148
00:05:02.550 --> 00:05:04.900
ahead and just stick this sucker 

149
00:05:04.910 --> 00:05:07.710
in an HTML file. I'm going to go 

150
00:05:07.785 --> 00:05:09.150
into to my system.js file, and 

151
00:05:09.160 --> 00:05:11.020
just give yourself a script tag 

152
00:05:11.095 --> 00:05:13.800
and pop it in there, and you 

153
00:05:13.810 --> 00:05:14.940
don't have to worry about 

154
00:05:14.950 --> 00:05:17.700
anything evermore. If you are 

155
00:05:17.710 --> 00:05:19.580
worried about multiple requests 

156
00:05:19.590 --> 00:05:21.880
where you have to polyfill it 

157
00:05:20.920 --> 00:05:22.240
and then load your JavaScript, 

158
00:05:22.500 --> 00:05:24.040
then I might look at using the 

159
00:05:24.115 --> 00:05:25.660
Babel polyfill, where you just 

160
00:05:25.670 --> 00:05:27.150
include it all into one bundle. 

161
00:05:27.160 --> 00:05:29.160
It's totally up to you. One 

162
00:05:29.170 --> 00:05:31.080
other thing with Polyfill.io, 

163
00:05:31.090 --> 00:05:32.640
you can also tailor your 

164
00:05:32.650 --> 00:05:34.080
response so if you know you're 

165
00:05:34.090 --> 00:05:35.840
only using three or four ES6 

166
00:05:35.915 --> 00:05:37.370
methods and you don't want to 

167
00:05:37.445 --> 00:05:39.390
polyfill the entire ES6 feature 

168
00:05:39.400 --> 00:05:41.190
set for your IE9 visitors, you 

169
00:05:41.200 --> 00:05:42.970
can go ahead and tailor your own. 

170
00:05:43.090 --> 00:05:44.180
There's a whole bunch of options 

171
00:05:44.190 --> 00:05:45.870
that you can use here to 

172
00:05:45.880 --> 00:05:48.040
specifically request some of the 

173
00:05:48.050 --> 00:05:49.400
features that you want. You can 

174
00:05:49.410 --> 00:05:51.550
take a look here, and you can go 

175
00:05:51.560 --> 00:05:53.250
to the browser and the features 

176
00:05:53.850 --> 00:05:55.450
and look at every possible thing 

177
00:05:55.460 --> 00:05:56.390
that you want. Polyfilling, 

178
00:05:56.465 --> 00:05:59.460
along with transpiling with 

179
00:05:59.530 --> 00:06:01.680
Babel, is going to give you very 

180
00:06:01.690 --> 00:06:03.380
good coverage of all of your ES6 

181
00:06:03.455 --> 00:06:03.780
features.

