WEBVTT

1
00:00:00.000 --> 00:00:02.445 line:15% 
(upbeat cheerful instrumental music)

2
00:00:02.445 --> 00:00:05.096
<v Narrator>We have two new static methods on object,</v>

3
00:00:05.096 --> 00:00:07.747
that's object.entries and object.values.

4
00:00:07.747 --> 00:00:09.480
We've always had object.keys,

5
00:00:09.480 --> 00:00:11.506
at least for a couple years now,

6
00:00:11.506 --> 00:00:13.901
but now we sorta have the other side of it,

7
00:00:13.901 --> 00:00:16.102
which is the values and one that's going to

8
00:00:16.102 --> 00:00:17.055
get both of us,

9
00:00:17.055 --> 00:00:19.673
so the backpacks and the actual value.

10
00:00:19.673 --> 00:00:21.306
So we've got this inventory here,

11
00:00:21.306 --> 00:00:23.768
and let's just take a quick look at it.

12
00:00:23.768 --> 00:00:25.182
So I've got this inventory here,

13
00:00:25.182 --> 00:00:26.731
it's just an object with some keys

14
00:00:26.731 --> 00:00:28.000
and some values inside of it,

15
00:00:28.000 --> 00:00:31.000
and object.keys would always give us

16
00:00:33.123 --> 00:00:35.113
an array of the actual keys

17
00:00:35.113 --> 00:00:37.695
and object.values is going to give us

18
00:00:37.695 --> 00:00:38.967
the exact opposite,

19
00:00:38.967 --> 00:00:41.318
which is the actual values on the other side,

20
00:00:41.318 --> 00:00:44.235
whereas object.entries will give us

21
00:00:45.076 --> 00:00:47.443
an array where each item is in the array,

22
00:00:47.443 --> 00:00:49.567
and let's see how we can actually work with that.

23
00:00:49.567 --> 00:00:52.370
So first make a nav for the inventory,

24
00:00:52.370 --> 00:00:53.891
so maybe you're having a store

25
00:00:53.891 --> 00:00:55.141
and you want to take all your inventory

26
00:00:55.141 --> 00:00:56.885
and make a link for each of the pages

27
00:00:56.885 --> 00:00:58.756
that has available inventory,

28
00:00:58.756 --> 00:01:02.186
so what I would do for that is I would say

29
00:01:02.186 --> 00:01:05.103
object.keys, pass at the inventory,

30
00:01:06.995 --> 00:01:09.384
and that's going to give us an array back

31
00:01:09.384 --> 00:01:11.592
and we're going to map over that where we

32
00:01:11.592 --> 00:01:13.969
take the item and we're going to return

33
00:01:13.969 --> 00:01:17.552
a list item with the item name inside of it

34
00:01:20.012 --> 00:01:22.310
and we'll put that in a variable const

35
00:01:22.310 --> 00:01:25.643
nav is equal to and console.log the nav.

36
00:01:27.003 --> 00:01:28.934
When we refresh you see we have an array

37
00:01:28.934 --> 00:01:30.438
with all of our items inside of it,

38
00:01:30.438 --> 00:01:33.771
we can pop a quick join on the end there

39
00:01:35.291 --> 00:01:37.091
to give us just straight old HTML,

40
00:01:37.091 --> 00:01:38.050
and then you can just stick that

41
00:01:38.050 --> 00:01:40.029
inside of an unordered list that you have it.

42
00:01:40.029 --> 00:01:41.681
So that's keys, that's not new,

43
00:01:41.681 --> 00:01:44.157
but just to get an idea of what we got there,

44
00:01:44.157 --> 00:01:45.466
then we can actually use the other side,

45
00:01:45.466 --> 00:01:46.663
which is the value.

46
00:01:46.663 --> 00:01:49.810
So if you wanted to add up all of these numbers here,

47
00:01:49.810 --> 00:01:53.227
we simply would say const total inventory

48
00:01:54.497 --> 00:01:55.664
object.values.

49
00:01:57.755 --> 00:02:00.617
We pass it the inventory and that will give us...

50
00:02:00.617 --> 00:02:02.267
Again, that will give us just an array

51
00:02:02.267 --> 00:02:04.325
of all of our values that we have there,

52
00:02:04.325 --> 00:02:05.995
and we can just add them up real quick

53
00:02:05.995 --> 00:02:08.608
with a reduce and we're going to take

54
00:02:08.608 --> 00:02:11.608
the A and the B and return A plus B.

55
00:02:14.313 --> 00:02:17.331
And then just console.log the total inventory,

56
00:02:17.331 --> 00:02:18.726
see if we get the right number.

57
00:02:18.726 --> 00:02:19.559
Good, 48.

58
00:02:19.559 --> 00:02:21.883
There's 48 items inside of it.

59
00:02:21.883 --> 00:02:24.396
Finally, if you wanna get both of them,

60
00:02:24.396 --> 00:02:26.722
you can get an array of each,

61
00:02:26.722 --> 00:02:28.281
so we'll do something like this.

62
00:02:28.281 --> 00:02:31.815
Object.entries, we'll take the inventory,

63
00:02:31.815 --> 00:02:33.171
and then that will give you an array.

64
00:02:33.171 --> 00:02:35.558
You can map over that or you can...

65
00:02:35.558 --> 00:02:37.003
For each other that, I'm going to show you

66
00:02:37.003 --> 00:02:38.833
the for/of loop with this because this is

67
00:02:38.833 --> 00:02:41.602
an Iterable and we're going to say...

68
00:02:41.602 --> 00:02:43.207
We'll just call that a pair for now,

69
00:02:43.207 --> 00:02:45.111
and for each pair that we have,

70
00:02:45.111 --> 00:02:48.491
let's just console.log the pair.

71
00:02:48.491 --> 00:02:49.343
There we go.

72
00:02:49.343 --> 00:02:50.988
So for each one, we have the first thing

73
00:02:50.988 --> 00:02:53.127
is going to be the key and the second thing

74
00:02:53.127 --> 00:02:54.430
is going to be the value.

75
00:02:54.430 --> 00:02:55.885
You might be thinking, "Oh, that's cool.

76
00:02:55.885 --> 00:02:57.483
Well, we can use de-structuring for that."

77
00:02:57.483 --> 00:02:58.654
So maybe you think...

78
00:02:58.654 --> 00:03:01.821
Okay, well we could say const key val,

79
00:03:02.965 --> 00:03:05.725
put those in square brackets so that we can

80
00:03:05.725 --> 00:03:09.373
de-structure the values from the pair,

81
00:03:09.373 --> 00:03:13.540
and then console log the key and the val directly.

82
00:03:15.156 --> 00:03:17.911
And that works good; hoodies 4, shoes 11.

83
00:03:17.911 --> 00:03:19.181
We're gonna get one step further and

84
00:03:19.181 --> 00:03:20.948
delete this pair variable here,

85
00:03:20.948 --> 00:03:21.989
we don't actually need it,

86
00:03:21.989 --> 00:03:24.134
give ourselves parenthesis and just de-structure

87
00:03:24.134 --> 00:03:26.648
the value as it's coming into the function.

88
00:03:26.648 --> 00:03:29.264
So the key and the val and then we don't

89
00:03:29.264 --> 00:03:31.381
even need this de-structure line right here.

90
00:03:31.381 --> 00:03:33.555
You can de-structure the parameters of

91
00:03:33.555 --> 00:03:35.148
a function as they get passed in,

92
00:03:35.148 --> 00:03:37.175
and that gives us the exact same thing.

93
00:03:37.175 --> 00:03:38.298
So that's pretty simple.

94
00:03:38.298 --> 00:03:40.858
One kinda cool thing is that all of

95
00:03:40.858 --> 00:03:42.278
these things are Iterables,

96
00:03:42.278 --> 00:03:44.421
meaning that you can do things like this.

97
00:03:44.421 --> 00:03:47.088
You can say for const key val of

98
00:03:49.453 --> 00:03:51.536
object.entries inventory,

99
00:03:53.590 --> 00:03:55.366
and then inside of this for/of loop,

100
00:03:55.366 --> 00:03:57.523
we have access to the console.log,

101
00:03:57.523 --> 00:04:01.069
the key, as well as the val that we have,

102
00:04:01.069 --> 00:04:03.960
and that's going to give us however many we have.

103
00:04:03.960 --> 00:04:05.382
Oop, object.

104
00:04:05.382 --> 00:04:06.241
There we go.

105
00:04:06.241 --> 00:04:07.583
It's the exact same thing that's happening.

106
00:04:07.583 --> 00:04:10.190
What is the benefit of using this for/of

107
00:04:10.190 --> 00:04:14.397
over things like for each or map or reduce?

108
00:04:14.397 --> 00:04:16.285
The one benefit of that is the ability

109
00:04:16.285 --> 00:04:17.619
to break out of it.

110
00:04:17.619 --> 00:04:19.783
So we could do something like this,

111
00:04:19.783 --> 00:04:23.033
we'll say if the key is equal to jeans,

112
00:04:25.234 --> 00:04:27.746
then we want to break, and up here

113
00:04:27.746 --> 00:04:30.246
let's just console.log the key

114
00:04:31.948 --> 00:04:34.662
and then you'll see backpacks, jeans,

115
00:04:34.662 --> 00:04:35.658
and then it breaks.

116
00:04:35.658 --> 00:04:37.723
We no longer get the hoodies or shoes

117
00:04:37.723 --> 00:04:39.669
because we have broken away.

118
00:04:39.669 --> 00:04:41.438
You cannot break away from a for each

119
00:04:41.438 --> 00:04:42.899
or a map or anything like that,

120
00:04:42.899 --> 00:04:44.242
but you can break away.

121
00:04:44.242 --> 00:04:46.156
I personally still prefer to use a map

122
00:04:46.156 --> 00:04:47.524
because I don't often need to

123
00:04:47.524 --> 00:04:49.378
break out of one of these things,

124
00:04:49.378 --> 00:04:50.656
but if it was a situation,

125
00:04:50.656 --> 00:04:53.263
especially with very long arrays,

126
00:04:53.263 --> 00:04:54.444
then I wouldn't.

127
00:04:54.444 --> 00:04:56.032
The other benefit, of course, to using

128
00:04:56.032 --> 00:04:58.224
the for/of that we did in that video

129
00:04:58.224 --> 00:05:00.257
is the for/of works with any Iterable,

130
00:05:00.257 --> 00:05:01.669
not just arrays,

131
00:05:01.669 --> 00:05:03.734
which we're sort of assuming here.

132
00:05:03.734 --> 00:05:06.328
So again, you probably know object.keys,

133
00:05:06.328 --> 00:05:10.261
but stick with object.values and object.entries

134
00:05:10.261 --> 00:05:12.708
so you can work with objects no problem.

