WEBVTT

1
00:00:00.000 --> 00:00:00.000
 Instructor: Strings 

2
00:00:03.320 --> 00:00:04.230
in ES6 come with four new 

3
00:00:04.240 --> 00:00:06.170
methods that are really handy, 

4
00:00:06.180 --> 00:00:07.630
help us write a little bit more 

5
00:00:07.640 --> 00:00:09.290
readable code, as well as reduce 

6
00:00:09.300 --> 00:00:11.520
our reliance on using RegExp for 

7
00:00:11.530 --> 00:00:13.060
certain things. Here I've 

8
00:00:13.060 --> 00:00:15.590
got this course. RFB, this 

9
00:00:15.590 --> 00:00:17.890
stands for React for Beginners. 

10
00:00:17.965 --> 00:00:19.870
Sometimes I have RFB1 which is 

11
00:00:19.880 --> 00:00:21.520
the starter package, 2 which is 

12
00:00:21.520 --> 00:00:23.180
the master package, 3 which is 

13
00:00:23.590 --> 00:00:25.590
the team package. I don't really 

14
00:00:25.600 --> 00:00:27.080
care too much about that in 

15
00:00:27.090 --> 00:00:28.060
certain cases, I just want to 

16
00:00:28.060 --> 00:00:30.370
know does it start with RFB, not 

17
00:00:30.380 --> 00:00:32.020
something like STPU, which is 

18
00:00:32.095 --> 00:00:34.420
Sublimed Text Power User or ES6, 

19
00:00:34.690 --> 00:00:36.080
which is this series. RFB 

20
00:00:37.550 --> 00:00:38.820
means React for Beginners. I 

21
00:00:38.830 --> 00:00:40.260
need to know, does the string 

22
00:00:40.380 --> 00:00:42.140
start with it? We can just take 

23
00:00:42.150 --> 00:00:44.170
the course, if it starts with 

24
00:00:44.245 --> 00:00:47.270
RFB, that's going to show me 

25
00:00:47.280 --> 00:00:48.660
true because obviously it does 

26
00:00:48.670 --> 00:00:50.950
start with it. If I did RFB 

27
00:00:51.025 --> 00:00:53.390
lowercase, it says, "false." 

28
00:00:53.600 --> 00:00:55.740
There is no way to make this 

29
00:00:55.750 --> 00:00:57.970
case insensitive. If you do need 

30
00:00:57.980 --> 00:00:59.860
case sensitivity you do need to 

31
00:00:59.870 --> 00:01:02.580
still use a RegExp. One other 

32
00:01:02.590 --> 00:01:03.490
thing that startsWith with will 

33
00:01:03.500 --> 00:01:05.230
do is it'll allow you to skip a 

34
00:01:05.240 --> 00:01:06.530
certain number of characters and 

35
00:01:06.540 --> 00:01:08.550
start looking at it. This 

36
00:01:08.560 --> 00:01:10.000
flight number here, I want to 

37
00:01:09.610 --> 00:01:14.520
see if it starts with AC. It's 

38
00:01:14.520 --> 00:01:16.730
false, because it starts with 20-. 

39
00:01:17.240 --> 00:01:18.710
Sometimes we have these SKU 

40
00:01:18.785 --> 00:01:20.010
numbers, when they start with a 

41
00:01:20.020 --> 00:01:21.530
bunch of junk and then it gets 

42
00:01:21.540 --> 00:01:22.830
to actually what we want. 

43
00:01:22.970 --> 00:01:24.590
What you can do is you can run 

44
00:01:24.665 --> 00:01:26.370
startsWith and then say pass 3, 

45
00:01:26.950 --> 00:01:28.930
and that says start after three 

46
00:01:28.940 --> 00:01:31.430
characters. That is then true, 

47
00:01:31.440 --> 00:01:32.840
because it ignores the first 

48
00:01:32.850 --> 00:01:34.950
three and then starts at AC and 

49
00:01:34.960 --> 00:01:36.530
checks against that. EndsWith 

50
00:01:37.380 --> 00:01:40.320
works fairly similar. Here is an 

51
00:01:40.330 --> 00:01:42.860
example where we have JZ on the 

52
00:01:42.870 --> 00:01:44.280
back, and I want to know if it's 

53
00:01:44.290 --> 00:01:46.810
a jazz flight. We can say flight 

54
00:01:46.820 --> 00:01:51.850
number.endsWith JZ -- J Zed, 

55
00:01:51.860 --> 00:01:52.950
depends if you're from Canada or 

56
00:01:52.960 --> 00:01:56.660
not. That will be true obviously, 

57
00:01:56.660 --> 00:01:57.950
because it ends with it. 

58
00:01:58.450 --> 00:02:00.120
There's another option that we 

59
00:02:00.130 --> 00:02:02.240
can pass endsWith, and I'm going 

60
00:02:02.315 --> 00:02:03.300
to use this account number 

61
00:02:03.310 --> 00:02:05.420
variable as an example here. In 

62
00:02:05.430 --> 00:02:07.420
Canada we have business numbers 

63
00:02:07.495 --> 00:02:08.980
that are nine digits long. 

64
00:02:08.990 --> 00:02:10.310
They're always nine digits long, 

65
00:02:10.610 --> 00:02:11.920
and that is your actual business 

66
00:02:11.930 --> 00:02:13.960
number. Then you have a tax 

67
00:02:13.970 --> 00:02:16.000
number, which is RT 0001, 0002. 

68
00:02:16.075 --> 00:02:20.390
You have RP 0001 for your first 

69
00:02:20.400 --> 00:02:23.810
employee, RP 0002 for your 

70
00:02:23.810 --> 00:02:25.590
second employee, etc. We have RC 

71
00:02:26.400 --> 00:02:29.870
for your corporate taxes. Often 

72
00:02:29.880 --> 00:02:32.470
you need to know, is this number 

73
00:02:32.480 --> 00:02:35.950
a tax number or is this number a 

74
00:02:36.300 --> 00:02:37.580
corporate tax number, or is this 

75
00:02:37.590 --> 00:02:39.150
a payroll number? That would be 

76
00:02:39.160 --> 00:02:41.800
if it's RC, or RP, or RT. I 

77
00:02:42.260 --> 00:02:48.250
need to check if this number,

78
00:02:48.250 --> 00:02:50.990
ends with RT, and I want to 

79
00:02:50.990 --> 00:02:54.580
ignore this right here. What you 

80
00:02:54.250 --> 00:02:55.700
can do is you can tell the 

81
00:02:55.710 --> 00:02:58.150
account number to just take the 

82
00:02:58.160 --> 00:03:00.590
first X number of characters, 

83
00:03:00.740 --> 00:03:02.530
and ignore the rest. I'm 

84
00:03:02.605 --> 00:03:04.540
going to say account.endsWith RT. 

85
00:03:06.170 --> 00:03:09.430
Ends with, not width, RT. That's 

86
00:03:09.440 --> 00:03:11.090
false, but what I can tell it is 

87
00:03:11.150 --> 00:03:13.880
only take the first 11 numbers, 

88
00:03:14.370 --> 00:03:15.260
and that is then true. 

89
00:03:15.335 --> 00:03:17.260
Essentially you're just going to 

90
00:03:16.360 --> 00:03:17.660
take the first 11 numbers, 

91
00:03:17.670 --> 00:03:19.160
ignore the rest, and then see if 

92
00:03:19.170 --> 00:03:21.540
it ends in RT or whatever else 

93
00:03:21.550 --> 00:03:24.140
it is. Then next up we have 

94
00:03:24.150 --> 00:03:25.570
includes. Includes will just 

95
00:03:25.580 --> 00:03:28.010
check if that string is anywhere 

96
00:03:28.070 --> 00:03:30.390
in it. If I wanted to say, if my 

97
00:03:30.400 --> 00:03:33.460
flight number includes, anywhere, 

98
00:03:33.470 --> 00:03:35.100
if it includes the words AC, 

99
00:03:35.220 --> 00:03:38.020
that is true. Again, it is not 

100
00:03:38.030 --> 00:03:40.020
case sensitive so you cannot do 

101
00:03:40.030 --> 00:03:41.370
that. You have to know that. 

102
00:03:41.630 --> 00:03:43.530
Includes is anywhere in. It was 

103
00:03:43.605 --> 00:03:45.440
supposed to be called .contains, 

104
00:03:45.450 --> 00:03:47.050
but now it got changed to 

105
00:03:47.060 --> 00:03:48.580
includes because of some 

106
00:03:48.840 --> 00:03:50.350
conflicts with the MooTool 

107
00:03:50.090 --> 00:03:51.680
libraries and the way that they 

108
00:03:51.690 --> 00:03:53.830
modified the prototype. Next 

109
00:03:53.840 --> 00:03:56.950
up we have make, model and color 

110
00:03:57.070 --> 00:03:58.070
here. I'm going to show you 

111
00:03:58.080 --> 00:03:59.940
where that would be useful for 

112
00:03:59.950 --> 00:04:03.450
using .repeat. What does repeat 

113
00:04:02.260 --> 00:04:04.940
do? Repeat allows you to take a 

114
00:04:05.120 --> 00:04:08.570
string, like a snake, and repeat 

115
00:04:08.580 --> 00:04:11.250
it. "Get my snake back," repeat 

116
00:04:11.260 --> 00:04:12.730
it like 10 times. That'll 

117
00:04:12.805 --> 00:04:16.030
give you 10 snakes or 1,000 

118
00:04:16.105 --> 00:04:16.390
snakes, or however many snakes 

119
00:04:16.400 --> 00:04:17.520
you would like. You can just 

120
00:04:17.550 --> 00:04:19.230
call .repeat and it's going to 

121
00:04:18.840 --> 00:04:20.430
repeat that string over and over 

122
00:04:20.505 --> 00:04:22.520
and over again. Where is that 

123
00:04:22.850 --> 00:04:26.890
useful? Sometimes we have some 

124
00:04:26.900 --> 00:04:28.230
words here. I'm going to take 

125
00:04:28.250 --> 00:04:31.780
BMW X5 in royal blue, and if I 

126
00:04:31.790 --> 00:04:33.830
wanted to display them maybe in 

127
00:04:33.840 --> 00:04:35.000
a terminal or something, but I 

128
00:04:35.010 --> 00:04:36.760
want to right align them. How 

129
00:04:36.770 --> 00:04:38.570
would that work? I'd have to 

130
00:04:38.580 --> 00:04:39.420
just put a whole bunch of 

131
00:04:39.430 --> 00:04:41.590
padding in, depending on how 

132
00:04:41.600 --> 00:04:43.950
long this was and how much space 

133
00:04:44.020 --> 00:04:46.890
will go in here. That is 

134
00:04:46.900 --> 00:04:48.390
what is called a left pad 

135
00:04:48.400 --> 00:04:49.630
function, and you can use .

136
00:04:49.870 --> 00:04:52.090
repeat to code a nice little 

137
00:04:52.100 --> 00:04:53.940
left pad function. Let's do this, 

138
00:04:54.020 --> 00:04:57.150
function, leftPad. That will 

139
00:04:57.150 --> 00:04:58.460
take in the string that we want 

140
00:04:58.535 --> 00:05:00.240
to pad and the length that we 

141
00:05:00.250 --> 00:05:02.480
wish to have it. I'm going to 

142
00:05:02.490 --> 00:05:04.630
set that to a default of 20 

143
00:05:04.705 --> 00:05:06.800
characters. Inside of here, 

144
00:05:06.810 --> 00:05:08.980
we can return. We're just going 

145
00:05:09.055 --> 00:05:09.800
to return a string which I'm 

146
00:05:09.890 --> 00:05:10.770
just going to start with a 

147
00:05:10.820 --> 00:05:12.120
little arrow, just to show us 

148
00:05:12.200 --> 00:05:14.880
where we are, and we need to 

149
00:05:14.890 --> 00:05:16.690
then pad it with however many 

150
00:05:16.770 --> 00:05:19.300
characters we need. We'll take a 

151
00:05:19.310 --> 00:05:23.200
space and repeat however many. 

152
00:05:23.210 --> 00:05:26.050
How many do we need? We take the 

153
00:05:26.060 --> 00:05:31.910
length minus string.length. If 

154
00:05:32.750 --> 00:05:35.500
it's 3, it's going to give us 17 

155
00:05:35.760 --> 00:05:37.420
spaces that have been repeated, 

156
00:05:37.690 --> 00:05:39.570
and them we just tack on the 

157
00:05:39.580 --> 00:05:41.220
string there. Now I've got this 

158
00:05:41.230 --> 00:05:42.650
nice little leftPad function. 

159
00:05:42.710 --> 00:05:44.250
I can take make, model, and 

160
00:05:44.260 --> 00:05:47.340
color, put them in here. It's 

161
00:05:47.350 --> 00:05:48.770
going to console.log each one of 

162
00:05:48.780 --> 00:05:50.650
them out. Console.log leftPad 

163
00:05:55.440 --> 00:05:57.110
model. I'm going to leave out 

164
00:05:57.200 --> 00:06:01.000
the length because we're going 

165
00:06:01.075 --> 00:06:02.520
to default it to 20, and it 

166
00:06:02.530 --> 00:06:03.930
should just pass in the make, 

167
00:06:03.940 --> 00:06:06.290
model, and color. There we go. 

168
00:06:06.330 --> 00:06:07.620
See how all these are perfectly 

169
00:06:07.630 --> 00:06:09.640
left aligned? BMW X5 in royal 

170
00:06:09.650 --> 00:06:12.030
blue, whereas all of this is 

171
00:06:12.040 --> 00:06:14.280
however much padding we actually 

172
00:06:14.320 --> 00:06:16.170
need. That's a nice little use 

173
00:06:16.210 --> 00:06:17.990
for repeat. Another little 

174
00:06:18.000 --> 00:06:20.050
funny one that you can do is, we 

175
00:06:20.060 --> 00:06:22.340
can take an ES6 template string, 

176
00:06:22.630 --> 00:06:26.600
and inside of that let's do a 

177
00:06:26.610 --> 00:06:31.400
statement where we take a...what 

178
00:06:31.475 --> 00:06:32.350
we do we want to multiply? 

179
00:06:32.360 --> 00:06:36.060
Dancing lady, string of dancing 

180
00:06:36.070 --> 00:06:37.930
lady, times five. What 

181
00:06:37.940 --> 00:06:39.600
happens when you take a string 

182
00:06:39.610 --> 00:06:41.320
and multiply it by a number? You 

183
00:06:41.395 --> 00:06:43.440
get a Nan. Some of you might 

184
00:06:43.450 --> 00:06:46.720
have a Nan, yourself. Let's call 

185
00:06:46.730 --> 00:06:49.280
repeat on that 10 times, and 

186
00:06:49.290 --> 00:06:52.070
then tack on Batman. What's 

187
00:06:52.145 --> 00:06:55.900
that going to give us? Nan Nan 

188
00:06:55.975 --> 00:06:57.950
Nan Nan Nan Nan Nan Nan Batman. 

189
00:06:58.100 --> 00:06:59.290
Pretty funny. I didn't make that 

190
00:06:59.300 --> 00:07:00.420
up. I saw it online somewhere, 

191
00:07:00.420 --> 00:07:01.410
but I thought it was pretty cool 

192
00:07:01.940 --> 00:07:03.640
because what's happening here, 

193
00:07:03.715 --> 00:07:04.630
you're giving yourself 

194
00:07:04.720 --> 00:07:06.180
essentially a string of Nan, 

195
00:07:06.430 --> 00:07:08.640
repeat it 10 times, and then 

196
00:07:07.970 --> 00:07:09.550
you're tacking on Batman on to 

197
00:07:09.560 --> 00:07:11.580
the end. Those are some four 

198
00:07:11.620 --> 00:07:12.610
new ones. Put them in your back 

199
00:07:12.610 --> 00:07:13.700
pocket, and hopefully enjoy that. 

200
00:07:13.810 --> 00:07:14.060
Thanks.

