WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.630 --> 00:00:03.890
These last couple examples we've 

3
00:00:03.890 --> 00:00:05.880
been creating HTML and inserting 

4
00:00:05.920 --> 00:00:07.750
it right into the DOM. If you 

5
00:00:07.760 --> 00:00:08.860
have any sort of security 

6
00:00:08.870 --> 00:00:09.910
background and you're probably 

7
00:00:10.070 --> 00:00:11.840
screaming, "Wes, you must 

8
00:00:11.850 --> 00:00:13.410
sanitize that data before you 

9
00:00:13.420 --> 00:00:15.340
put it into the DOM." If you 

10
00:00:15.340 --> 00:00:16.130
don't know what that means, 

11
00:00:16.140 --> 00:00:18.400
essentially when you get data 

12
00:00:18.590 --> 00:00:19.810
from a user, whenever you're 

13
00:00:19.820 --> 00:00:22.500
displaying data from a user, you 

14
00:00:22.510 --> 00:00:24.880
must make sure that the user 

15
00:00:24.890 --> 00:00:27.200
isn't doing any Sneaky Pete 

16
00:00:27.210 --> 00:00:29.410
stuff on you, and trying to 

17
00:00:29.420 --> 00:00:31.610
maybe insert an iframe, or an 

18
00:00:31.620 --> 00:00:33.700
image, or to do an XSS. Here 

19
00:00:33.775 --> 00:00:35.080
I've got an example. Let's 

20
00:00:35.110 --> 00:00:36.530
assume I took this first name in 

21
00:00:36.540 --> 00:00:37.850
the about me. I got that from a 

22
00:00:38.020 --> 00:00:39.580
database, or an API or something 

23
00:00:39.655 --> 00:00:41.260
like that, and the user had this 

24
00:00:41.270 --> 00:00:42.530
saved in their database. 

25
00:00:43.470 --> 00:00:44.930
They said, "I love to do evil," 

26
00:00:44.940 --> 00:00:46.840
and they inserted an image to 

27
00:00:46.915 --> 00:00:48.800
Unsplash, which is allowed. You 

28
00:00:48.810 --> 00:00:49.910
can insert an image into your 

29
00:00:49.920 --> 00:00:51.880
bio, no problem, but they do the 

30
00:00:51.890 --> 00:00:53.570
Sneaky Pete thing here where 

31
00:00:53.580 --> 00:00:55.310
they say, "onload equals alert, 

32
00:00:55.320 --> 00:00:57.190
you got hacked," so when this 

33
00:00:57.200 --> 00:00:59.210
image loads, run this JavaScript. 

34
00:00:59.410 --> 00:01:00.670
That is the big no-no. You 

35
00:01:00.680 --> 00:01:02.040
cannot let your users run 

36
00:01:02.115 --> 00:01:03.860
JavaScript on your page because 

37
00:01:03.870 --> 00:01:05.600
then they could drain your bank 

38
00:01:05.610 --> 00:01:07.290
account, or delete your thing, 

39
00:01:07.300 --> 00:01:08.590
or post as you. They could do 

40
00:01:08.600 --> 00:01:10.670
anything. Imagine if you let 

41
00:01:10.680 --> 00:01:12.680
someone run JavaScript on 

42
00:01:12.690 --> 00:01:14.390
Facebook. You could unfriend 

43
00:01:14.000 --> 00:01:16.540
everyone, or you could look at 

44
00:01:16.550 --> 00:01:17.820
all of their messages, or send 

45
00:01:17.830 --> 00:01:19.240
nasty messages on their behalf. 

46
00:01:19.700 --> 00:01:21.230
Here I've taken the about me and 

47
00:01:21.240 --> 00:01:22.490
I've just popped it into HTML 

48
00:01:23.180 --> 00:01:24.870
and then I've set it into our 

49
00:01:24.880 --> 00:01:26.850
bio. I'm taking it, carte 

50
00:01:26.925 --> 00:01:28.120
blanche, putting it in, I 

51
00:01:28.130 --> 00:01:29.820
refresh, and I get this message, "

52
00:01:29.860 --> 00:01:31.810
You got hacked." That is 

53
00:01:31.930 --> 00:01:33.420
what's called an XSS, across 

54
00:01:33.495 --> 00:01:35.540
site scripting, where we let 

55
00:01:35.550 --> 00:01:36.710
someone else who inputted this 

56
00:01:36.720 --> 00:01:38.610
data run JavaScript on our page. 

57
00:01:38.620 --> 00:01:40.360
That's really dangerous. The 

58
00:01:40.370 --> 00:01:43.340
solution to this is to sanitize 

59
00:01:43.370 --> 00:01:45.910
your HTML. That's another place 

60
00:01:45.920 --> 00:01:47.770
where you could use the tag 

61
00:01:47.780 --> 00:01:49.690
template. In creating all this 

62
00:01:49.700 --> 00:01:51.100
HTML here, I have all kinds of 

63
00:01:51.110 --> 00:01:54.420
inputs from a user. But before I 

64
00:01:54.580 --> 00:01:56.550
put it into my HTML, it's 

65
00:01:56.560 --> 00:01:58.700
probably a good idea to run it 

66
00:01:58.710 --> 00:02:00.250
through a sanitizer. I've 

67
00:02:00.325 --> 00:02:03.490
loaded it in this library called 

68
00:02:03.565 --> 00:02:05.690
DOMPurify. It's a pretty good 

69
00:02:06.020 --> 00:02:08.060
little library that we use to 

70
00:02:08.060 --> 00:02:10.340
sanitize. You can have all kinds 

71
00:02:10.415 --> 00:02:11.680
of options in here in terms of 

72
00:02:11.850 --> 00:02:13.450
what tags are allowed and aren't 

73
00:02:13.460 --> 00:02:14.900
allowed. There's all kinds of 

74
00:02:14.975 --> 00:02:17.280
sanitize libraries here. You 

75
00:02:17.290 --> 00:02:20.460
could make a sanitized tag 

76
00:02:20.510 --> 00:02:22.270
template and use this library 

77
00:02:22.280 --> 00:02:25.300
inside of it. I'm going to show 

78
00:02:25.375 --> 00:02:25.370
you how to do that now. We say 

79
00:02:24.990 --> 00:02:28.790
function sanitize, and again 

80
00:02:29.010 --> 00:02:30.520
that sanitize function is going 

81
00:02:30.530 --> 00:02:32.640
to take in the strings. It's 

82
00:02:32.715 --> 00:02:35.790
going to also take in the values. 

83
00:02:36.650 --> 00:02:39.900
Let's go and do a quick reduce 

84
00:02:39.910 --> 00:02:44.150
function, so return, reduce. It 

85
00:02:44.150 --> 00:02:45.950
takes in a function and what we 

86
00:02:45.390 --> 00:02:47.460
start with, and our function is 

87
00:02:47.470 --> 00:02:49.150
going to be an arrow function 

88
00:02:49.160 --> 00:02:51.460
that gives us the, I'm going to 

89
00:02:51.535 --> 00:02:53.640
say prev, next. Previous is, 

90
00:02:53.650 --> 00:02:55.090
what was the last iteration. 

91
00:02:55.100 --> 00:02:56.310
Next is, what's the current 

92
00:02:56.320 --> 00:02:59.390
iteration, or index, what is the 

93
00:02:59.400 --> 00:03:01.100
index there. Then we're just 

94
00:03:01.110 --> 00:03:02.720
going to return a string that 

95
00:03:02.730 --> 00:03:03.960
tacks all of those things 

96
00:03:04.070 --> 00:03:08.280
together. We've got prev. We've 

97
00:03:08.355 --> 00:03:12.300
got the next. We've got values. 

98
00:03:13.170 --> 00:03:15.660
I or nothing. You need to excuse 

99
00:03:15.670 --> 00:03:16.780
that this is wrapping on to the 

100
00:03:16.790 --> 00:03:18.590
next line. If I zoom out, you'll 

101
00:03:18.665 --> 00:03:19.500
see that's just one quick little 

102
00:03:19.510 --> 00:03:22.510
line there. Now, let's take 

103
00:03:22.520 --> 00:03:23.610
a look here. We take the 

104
00:03:23.620 --> 00:03:26.600
sanitize -- you have to spell it 

105
00:03:26.675 --> 00:03:30.210
right -- put it in front, tag 

106
00:03:30.220 --> 00:03:33.220
that template. Reduce is not a 

107
00:03:33.230 --> 00:03:35.130
function. Obviously we have to 

108
00:03:35.160 --> 00:03:40.090
say strings.reduce. There we go. 

109
00:03:40.165 --> 00:03:40.770
We still have, "you got hacked" 

110
00:03:40.780 --> 00:03:43.610
because we have not yet done 

111
00:03:43.620 --> 00:03:45.610
that. But instead, what we can 

112
00:03:45.620 --> 00:03:48.630
do is say const dirty, and then 

113
00:03:48.760 --> 00:03:50.310
this string right here is dirty 

114
00:03:50.320 --> 00:03:51.710
because it still has it's onload, 

115
00:03:51.785 --> 00:03:53.130
or iframes, or any of the other 

116
00:03:53.140 --> 00:03:54.790
nasty stuff people are trying to 

117
00:03:54.800 --> 00:03:56.550
do. But you can return...

118
00:03:56.810 --> 00:03:58.130
We'll use this library here. 

119
00:03:58.205 --> 00:04:01.090
It's called DOMPurify.sanitize. 

120
00:04:02.700 --> 00:04:05.610
We'll sanitize the dirty HTML. 

121
00:04:06.100 --> 00:04:07.480
Now when I return that, let's 

122
00:04:07.560 --> 00:04:09.730
look at it before. This is 

123
00:04:09.805 --> 00:04:11.180
onload you got hacked. Now when 

124
00:04:11.190 --> 00:04:13.300
I refresh, see that unload has 

125
00:04:13.310 --> 00:04:14.520
been stripped out, along with 

126
00:04:14.530 --> 00:04:16.390
any other nasty stuff. 

127
00:04:16.430 --> 00:04:17.360
Obviously, you could do this 

128
00:04:17.370 --> 00:04:18.500
just with a function as well. 

129
00:04:19.330 --> 00:04:20.710
You could say DOMPurify.sanitize 

130
00:04:19.970 --> 00:04:21.360
and just wrap in there. I'm 

131
00:04:22.930 --> 00:04:24.110
showing you how you could 

132
00:04:24.120 --> 00:04:26.320
possibly create a tag template 

133
00:04:26.330 --> 00:04:27.690
so that any time you are 

134
00:04:27.700 --> 00:04:29.680
creating HTML in, I've put it 

135
00:04:29.690 --> 00:04:30.980
here, but what if they put it in 

136
00:04:30.990 --> 00:04:32.080
there? We could also put it 

137
00:04:32.520 --> 00:04:34.240
on our HTML. You can put this 

138
00:04:34.250 --> 00:04:35.270
wherever you need to quickly 

139
00:04:35.280 --> 00:04:38.490
sanitize something. Even if 

140
00:04:38.500 --> 00:04:39.980
you're using variables or not, 

141
00:04:39.990 --> 00:04:41.080
it's going to sanitize it for 

142
00:04:41.090 --> 00:04:41.250
you.

