WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.310 --> 00:00:03.900
Nous avons trois façons de déclarer 

3
00:00:03.900 --> 00:00:05.390
des variables en Javascript. Nous avons 

4
00:00:05.690 --> 00:00:07.470
Var, que nous avons toujours utilisé. 

5
00:00:07.480 --> 00:00:08.840
Maintenant, nous en avons deux nouveaux, 

6
00:00:08.850 --> 00:00:11.080
qui sont let et const. Ces deux mot-clés 

7
00:00:11.090 --> 00:00:12.840
ont quelques spécificités qui 

8
00:00:12.850 --> 00:00:13.970
nous seront très utiles, 

9
00:00:13.980 --> 00:00:15.750
mais nous avons 

10
00:00:15.760 --> 00:00:16.800
tout d'abord besoin de faire un très, très, 

11
00:00:16.810 --> 00:00:18.880
rapide retour sur le mot-clé Var 

12
00:00:18.970 --> 00:00:20.370
afin de bien comprendre 

13
00:00:20.380 --> 00:00:22.220
les avantages et 

14
00:00:22.230 --> 00:00:24.190
différences entre let et 

15
00:00:24.265 --> 00:00:24.930
const. Première chose que nous avons 

16
00:00:24.940 --> 00:00:26.890
besoin de savoir à propos des variables déclarées avec Var 

17
00:00:26.900 --> 00:00:28.450
est qu'on peut leur réaffecter une valeur. Vous 

18
00:00:28.460 --> 00:00:30.560
pouvez aussi les mettre à jour. Nous allons 

19
00:00:30.570 --> 00:00:32.570
afficher la largeur, la 

20
00:00:32.610 --> 00:00:34.510
mettre à jour afin qu'elle soit à 200, 

21
00:00:34.520 --> 00:00:36.390
puis nous afficherons à nouveau 

22
00:00:36.490 --> 00:00:39.070
la largeur. Quand nous rafraîchissons, 

23
00:00:39.070 --> 00:00:40.990
vous voyez que nous obtenons 100, et 200. Rien 

24
00:00:41.000 --> 00:00:42.420
d'exceptionnel. Nous pouvons les mettre 

25
00:00:42.430 --> 00:00:43.880
à jour. Ce que vous pouvez aussi faire, c'est 

26
00:00:43.890 --> 00:00:45.200
mettre le mot-clé Var devant.

27
00:00:45.220 --> 00:00:46.040
Ce n'est pas quelque chose que 

28
00:00:46.040 --> 00:00:47.510
vous voudriez faire, mais nous avons tous 

29
00:00:47.520 --> 00:00:48.940
atteint ce stade où nous manquons 

30
00:00:48.950 --> 00:00:50.350
de noms pour les variables et que nous 

31
00:00:50.360 --> 00:00:51.600
utilisons accidentellement les 

32
00:00:51.610 --> 00:00:53.690
mêmes. Ce qui arrivera 

33
00:00:53.300 --> 00:00:55.350
ici est qu'il ne se passera 

34
00:00:55.470 --> 00:00:57.420
rien de grave. Ca marche comme vous 

35
00:00:57.430 --> 00:00:58.630
vous y attendiez, mais il ne vous dit rien 

36
00:00:58.705 --> 00:01:00.830
pour avoir créé la même variable 

37
00:01:01.130 --> 00:01:03.160
deux fois dans le même 

38
00:01:03.170 --> 00:01:05.880
périmètre. Ce qu'il y a de particulier avec 

39
00:01:05.955 --> 00:01:06.890
les variables Var est qu'elles peuvent être 

40
00:01:06.900 --> 00:01:08.420
mises à jour ou redéfnies. 

41
00:01:08.750 --> 00:01:09.750
La seconde chose que nous avons besoin de avoir 

42
00:01:09.825 --> 00:01:11.590
à propos des variables Var est : quelle est 

43
00:01:12.430 --> 00:01:13.540
leur portée. La portée signifie essentiellement : 

44
00:01:13.550 --> 00:01:15.140
"Où ces variables 

45
00:01:15.150 --> 00:01:18.780
sont-elle disponibles ?". Les variables 

46
00:01:18.880 --> 00:01:21.060
Var ont une portée définie par les fonctions, 

47
00:01:21.070 --> 00:01:22.650
ce qui signifie qu'elles sont seulement 

48
00:01:22.660 --> 00:01:23.990
disponibles à l'intérieur de la fonction 

49
00:01:24.000 --> 00:01:25.520
dans laquelle elles ont été créées. Si 

50
00:01:25.530 --> 00:01:27.130
elles ne sont pas créées à l'intérieur 

51
00:01:26.740 --> 00:01:28.100
d'une fonction, comme c'est le cas 

52
00:01:28.110 --> 00:01:29.810
ici, elles ont une portée 

53
00:01:29.885 --> 00:01:30.870
globale. Elles sont disponibles dans 

54
00:01:30.880 --> 00:01:32.210
l'objet "window", ce qui explique ici pourquoi nous 

55
00:01:32.460 --> 00:01:34.330
pouvons avoir accès à la largeur "width" dans les DevTools. 

56
00:01:34.340 --> 00:01:35.840
Mais si je crée une fonction 

57
00:01:35.850 --> 00:01:37.680
ici et que je mets ma variable "largeur" à 

58
00:01:37.690 --> 00:01:39.210
l'intérieur, et affiche la 

59
00:01:39.220 --> 00:01:40.900
largeur? 

60
00:01:41.280 --> 00:01:42.990
Est-ce que ça va marcher ? Bien sûr, 

61
00:01:42.990 --> 00:01:44.370
ça va marcher parce que cette 

62
00:01:44.380 --> 00:01:45.600
largeur est disponible à l'intérieur de 

63
00:01:45.610 --> 00:01:47.490
cette fonction. Si j'essayais également 

64
00:01:47.560 --> 00:01:48.910
d'afficher la largeur après avoir 

65
00:01:49.180 --> 00:01:51.470
défini la largeur ? Cela va-t-il 

66
00:01:51.480 --> 00:01:54.940
marcher ? Ça ne marche pas. 

67
00:01:54.950 --> 00:01:56.250
Pourquoi ça ne marche pas ? Parce que 

68
00:01:56.260 --> 00:01:58.540
la largeur a une portée qui se limite 

69
00:01:58.550 --> 00:02:00.150
à la fonction. C'est une variable locale 

70
00:02:00.160 --> 00:02:01.680
à la fonction. Elle n'est pas 

71
00:02:01.690 --> 00:02:03.170
accessible à l'extérieur des limites. 

72
00:02:03.180 --> 00:02:04.140
J'aime bien imaginer que les accolades 

73
00:02:04.150 --> 00:02:05.920
des fonctions sont des 

74
00:02:05.930 --> 00:02:07.490
portes, et que ses variables 

75
00:02:07.500 --> 00:02:08.990
ne peuvent pas aller au-delà. 

76
00:02:09.000 --> 00:02:10.700
Elles sont en prison, [rires] 

77
00:02:10.700 --> 00:02:12.350
si vous voulez.

78
00:02:12.360 --> 00:02:14.960
C'est une information importante à savoir 

79
00:02:14.970 --> 00:02:16.570
pour nous. Ce que vous pourriez 

80
00:02:16.580 --> 00:02:18.270
faire est "var width" là, 

81
00:02:18.280 --> 00:02:20.500
et vous pourriez la mettre à jour. 

82
00:02:20.510 --> 00:02:22.380
Ici, nous sommes en portée globale, 

83
00:02:22.455 --> 00:02:23.740
et nous la mettons à jour. 

84
00:02:23.750 --> 00:02:25.700
Ça devrait marcher.

85
00:02:26.070 --> 00:02:27.260
Généralement, vous ne voudriez pas 

86
00:02:27.270 --> 00:02:28.790
faire ça. Vous voulez 

87
00:02:28.865 --> 00:02:30.360
garder vos variables à l'intérieur 

88
00:02:29.970 --> 00:02:30.900
de votre fonction. Si vous avez 

89
00:02:30.910 --> 00:02:31.940
besoin d'une variable à l'extérieur de la fonction, 

90
00:02:31.950 --> 00:02:33.510
vous la renvoyez et la stockez dans une 

91
00:02:33.520 --> 00:02:35.580
autre variable. C'est quelque chose que nous avons 

92
00:02:35.590 --> 00:02:37.860
besoin de comprendre à propos 

93
00:02:37.870 --> 00:02:39.700
de la limite de portée des fonctions. Je vais 

94
00:02:39.120 --> 00:02:41.660
vous montrer un cas où 

95
00:02:41.670 --> 00:02:43.300
le périmètre de portée des fonctions nous 

96
00:02:43.310 --> 00:02:46.210
piège. Supposons que nous avons une variable 

97
00:02:46.210 --> 00:02:48.830
"âge" et que nous avons une 

98
00:02:48.840 --> 00:02:52.810
condition "if". Nous voulons produire 

99
00:02:52.230 --> 00:02:58.540
l'équivalent de cette âge en "nombre d'années chien". 

100
00:02:58.600 --> 00:03:01.000
S'il est plus âgé que 12 ans, 

101
00:03:01.010 --> 00:03:02.070
calculons l'âge en chien 

102
00:03:02.080 --> 00:03:04.360
et affichons, "Vous avez 

103
00:03:09.380 --> 00:03:12.140
x ans en chien". S'il est plus 

104
00:03:12.150 --> 00:03:13.870
âgé que 12 ans, nous voulons juste 

105
00:03:13.260 --> 00:03:14.250
l'afficher. J'utilise [inaudible] 

106
00:03:14.250 --> 00:03:15.960
ici. Nous allons apprendre 

107
00:03:16.035 --> 00:03:17.170
tout ceci dans la vidéo 

108
00:03:17.180 --> 00:03:19.760
"Template Strings". Nous allons 

109
00:03:19.790 --> 00:03:21.990
enregistrer, et ça marche.

110
00:03:22.320 --> 00:03:24.530
Ce qui est un peu marrant 

111
00:03:24.540 --> 00:03:27.490
ici est que cette variable, 

112
00:03:27.780 --> 00:03:30.090
pour l'âge en années chien, 

113
00:03:30.100 --> 00:03:31.350
était juste une variable temporaire. 

114
00:03:31.360 --> 00:03:33.100
J'avais juste besoin de ça très rapidement 

115
00:03:33.110 --> 00:03:34.430
afin de calculer quelque chose 

116
00:03:34.440 --> 00:03:36.280
et ensuite l'afficher, ou la 

117
00:03:36.290 --> 00:03:37.350
stocker dans une chaîne de caractères.

118
00:03:37.360 --> 00:03:40.600
Et si j'allais dans ma 

119
00:03:40.610 --> 00:03:42.020
console et que je cherchais à afficher la 

120
00:03:42.020 --> 00:03:44.390
variable chien ? [surprise] Regardez, 

121
00:03:44.400 --> 00:03:46.020
vous pouvez voir que la variable chien a fui 

122
00:03:46.210 --> 00:03:48.100
en dehors de mon if et que c'est

123
00:03:49.430 --> 00:03:51.470
 maintenant une variable globale. 

124
00:03:51.545 --> 00:03:50.630
Même si c'était une variable 

125
00:03:50.640 --> 00:03:52.210
temporaire, dont j'avais l'utilité 

126
00:03:52.450 --> 00:03:53.760
seulement à l'intérieur de ma condition if, 

127
00:03:53.770 --> 00:03:56.070
parce que les variables Var 

128
00:03:56.000 --> 00:03:57.590
ont une portée limitée par les fonctions 

129
00:03:58.260 --> 00:03:59.760
-- il n'y a pas de fonction ici -- elles 

130
00:03:59.960 --> 00:04:01.130
ne sont pas délimités. 

131
00:04:01.140 --> 00:04:03.220
La portée de ma variable 

132
00:04:03.295 --> 00:04:06.050
est l'objet "window", 

133
00:04:06.060 --> 00:04:07.740
ce qui est un petit peu 

134
00:04:07.750 --> 00:04:09.790
embêtant ici. C'est un des 

135
00:04:09.870 --> 00:04:11.830
avantages d'utiliser 

136
00:04:12.070 --> 00:04:15.010
les mot-clés let et const. Au lieu d'être délimitée 

137
00:04:15.085 --> 00:04:17.950
par une fonction, la variable 

138
00:04:18.025 --> 00:04:20.030
est délimitée par un bloc. Qu'est ce 

139
00:04:20.040 --> 00:04:22.030
qu'un bloc ? Ici, c'est un bon exemple. 

140
00:04:22.090 --> 00:04:23.870
A chaque accolade ouvrante et 

141
00:04:24.130 --> 00:04:25.480
fermante, nous avons un 

142
00:04:25.850 --> 00:04:27.460
bloc. Les fonctions sont 

143
00:04:27.610 --> 00:04:28.790
également des blocs. 

144
00:04:29.100 --> 00:04:30.380
Les variables auront toujours une portée limitée 

145
00:04:30.330 --> 00:04:31.950
par les fonctions. Cependant, si on est 

146
00:04:31.960 --> 00:04:33.530
à l'intérieur de cette fonction ou 

147
00:04:33.540 --> 00:04:36.380
à l'intérieur d'un autre élément 

148
00:04:36.455 --> 00:04:39.280
que vous avez, les variables 

149
00:04:39.355 --> 00:04:40.750
seront disponibles à l'intérieur 

150
00:04:40.760 --> 00:04:42.560
des accolades. Si je 

151
00:04:43.010 --> 00:04:44.580
prends ma variable des années chien ici et la change en 

152
00:04:44.650 --> 00:04:47.550
let, et que je rafraîchis, tout 

153
00:04:47.560 --> 00:04:50.190
marche comme nous le voulons. Mais si je 

154
00:04:50.200 --> 00:04:51.940
chercher à afficher ma variable ici, ça dit 

155
00:04:52.850 --> 00:04:53.920
qu'elle n'est pas 

156
00:04:53.930 --> 00:04:55.860
définie. Pourquoi ? Parce que 

157
00:04:56.590 --> 00:04:58.180
je l'ai déclarée comme une variable avec le mot-clé let. 

158
00:04:58.350 --> 00:04:59.720
Elle est seulement déclarée dans un 

159
00:04:59.730 --> 00:05:01.550
bloc, et non une fonction, et 

160
00:05:01.560 --> 00:05:03.450
les variables 

161
00:05:03.460 --> 00:05:05.200
temporaires ne dépassent 

162
00:05:05.240 --> 00:05:07.440
pas de leur périmètre. De manière similaire, 

163
00:05:07.450 --> 00:05:09.580
nous pouvons aussi utiliser une variable const 

164
00:05:10.220 --> 00:05:12.800
et ça marchera de la même façon. 

165
00:05:12.875 --> 00:05:14.110
Si je cherche à accéder à ma variable chien, nous avons "Variable 

166
00:05:14.380 --> 00:05:15.960
non définie." Let et const 

167
00:05:16.035 --> 00:05:17.900
sont tout deux 

168
00:05:17.990 --> 00:05:19.660
délimités par blocs 

169
00:05:19.750 --> 00:05:21.660
et non plus par fonctions. 

170
00:05:21.720 --> 00:05:23.030
Dans la prochaine vidéo, 

171
00:05:23.030 --> 00:05:25.050
nous allons approfondir 

172
00:05:23.580 --> 00:05:24.930
nos connaissances 

173
00:05:24.940 --> 00:05:26.590
sur les variables 

174
00:05:26.665 --> 00:05:26.990
en let et const.
