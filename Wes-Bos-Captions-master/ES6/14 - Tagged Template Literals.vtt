WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.680 --> 00:00:03.940
Another feature that comes along 

3
00:00:03.940 --> 00:00:05.020
with template literals, or 

4
00:00:05.030 --> 00:00:06.690
template strings, is the ability 

5
00:00:06.700 --> 00:00:08.460
to tag them. What that means is 

6
00:00:08.470 --> 00:00:10.480
that we can essentially run this 

7
00:00:10.560 --> 00:00:12.400
through a function, and rather 

8
00:00:12.470 --> 00:00:14.660
than have the browser put in the 

9
00:00:14.670 --> 00:00:16.790
variables for us, we can have 

10
00:00:16.800 --> 00:00:18.380
control over how this actual 

11
00:00:18.390 --> 00:00:20.340
string is made. I'm going to 

12
00:00:20.340 --> 00:00:21.720
show you some examples of when 

13
00:00:21.730 --> 00:00:23.220
that would actually be useful in 

14
00:00:23.230 --> 00:00:24.730
just a second. For now, let's 

15
00:00:24.730 --> 00:00:26.400
look at the mechanics of it and 

16
00:00:26.410 --> 00:00:28.060
how it all comes together. The 

17
00:00:28.135 --> 00:00:29.550
way the tag template works is 

18
00:00:29.560 --> 00:00:31.400
you simply make a function. I'm 

19
00:00:31.475 --> 00:00:32.390
going to call this "highlight," 

20
00:00:33.900 --> 00:00:35.090
and you take the name of the 

21
00:00:35.100 --> 00:00:36.410
function that you want to run 

22
00:00:36.420 --> 00:00:37.940
against the string, and you just 

23
00:00:38.000 --> 00:00:40.600
put the name right in front of 

24
00:00:40.880 --> 00:00:42.820
the template. This is tagging 

25
00:00:42.830 --> 00:00:44.610
it with a function name. What's 

26
00:00:44.685 --> 00:00:45.900
going to happen is that the 

27
00:00:45.910 --> 00:00:47.210
browser is going to run this 

28
00:00:47.220 --> 00:00:49.050
function, it's going to provide 

29
00:00:49.060 --> 00:00:50.290
it with all the information 

30
00:00:50.450 --> 00:00:52.370
about the string, all the pieces 

31
00:00:52.380 --> 00:00:53.960
that the person typed, as well 

32
00:00:53.970 --> 00:00:55.560
as the variables that get passed 

33
00:00:55.570 --> 00:00:59.190
in. Whatever we return from this 

34
00:00:59.200 --> 00:01:01.010
function is what sentence 

35
00:01:01.090 --> 00:01:02.780
actually is going to be. Sort 

36
00:01:02.855 --> 00:01:04.250
of like a step in between. 

37
00:01:04.260 --> 00:01:05.940
Before this function actually 

38
00:01:05.950 --> 00:01:07.540
gets put into here, we have the 

39
00:01:07.550 --> 00:01:09.400
ability to modify it in any 

40
00:01:09.410 --> 00:01:11.210
given way. Let's take a look at "

41
00:01:11.570 --> 00:01:12.910
highlight" here. If I just 

42
00:01:12.920 --> 00:01:15.390
return "cool," that is going to 

43
00:01:15.400 --> 00:01:16.840
take in this entire string, and 

44
00:01:16.850 --> 00:01:18.200
then just return the word "cool." 

45
00:01:18.610 --> 00:01:20.460
Now we see "cool" being console.

46
00:01:20.470 --> 00:01:21.720
log. Obviously, that's not what 

47
00:01:21.795 --> 00:01:23.140
we want to do, just replace the 

48
00:01:22.640 --> 00:01:24.470
entire string, but this function 

49
00:01:24.630 --> 00:01:26.660
will take in strings, and it 

50
00:01:26.950 --> 00:01:29.190
will take in the actual values. 

51
00:01:29.200 --> 00:01:30.540
In this case, we're passing name 

52
00:01:30.550 --> 00:01:33.020
and age. Now, we could do this. 

53
00:01:33.030 --> 00:01:34.970
It passes a name and passes an 

54
00:01:34.980 --> 00:01:37.110
age, but if you don't know 

55
00:01:37.150 --> 00:01:38.920
exactly how many values someone 

56
00:01:38.930 --> 00:01:40.430
is being pulled in, there's no 

57
00:01:40.440 --> 00:01:42.310
way for you to...you could say, 

58
00:01:42.385 --> 00:01:47.040
Arg1, Arg2, go through all the 

59
00:01:47.040 --> 00:01:48.420
way to Arg100, just in case 

60
00:01:48.495 --> 00:01:49.350
there are a hundred arguments, 

61
00:01:49.425 --> 00:01:50.260
but that's no way to live your 

62
00:01:50.270 --> 00:01:53.050
life. We can use ES6 rest 

63
00:01:53.210 --> 00:01:54.920
operator, which is three dots. 

64
00:01:54.995 --> 00:01:55.970
We're going to go into that a 

65
00:01:55.980 --> 00:01:57.870
lot more in a future video, but 

66
00:01:57.920 --> 00:01:59.460
know for now, if we do dot, dot, 

67
00:01:59.470 --> 00:02:00.910
dot values, what it's going to 

68
00:02:00.910 --> 00:02:01.910
do is it's going to take the 

69
00:02:01.920 --> 00:02:03.580
rest of the values that are 

70
00:02:03.590 --> 00:02:05.350
passed to that argument, and put 

71
00:02:05.360 --> 00:02:07.000
them into an array for us. I'm 

72
00:02:07.075 --> 00:02:08.940
going to pop a debugger in here, 

73
00:02:09.370 --> 00:02:11.240
and what that will do is it's 

74
00:02:10.840 --> 00:02:12.960
going to stop my function from 

75
00:02:12.970 --> 00:02:15.660
running. You see it, it just 

76
00:02:15.670 --> 00:02:18.310
opened my DevTools here. This 

77
00:02:19.540 --> 00:02:21.030
shows us a couple of things. 

78
00:02:21.090 --> 00:02:23.580
First of all, the local scope of 

79
00:02:23.590 --> 00:02:25.710
this function has -- obviously 

80
00:02:25.720 --> 00:02:27.120
this, which is a window so it's 

81
00:02:27.195 --> 00:02:28.580
not important -- it has strings 

82
00:02:28.655 --> 00:02:31.070
and it has values, strings and 

83
00:02:31.080 --> 00:02:32.540
values. What is strings? 

84
00:02:32.770 --> 00:02:34.060
Strings is an array of three 

85
00:02:34.070 --> 00:02:36.420
things. "My dog's name is," and "

86
00:02:36.430 --> 00:02:38.520
he is, years old." What are 

87
00:02:38.530 --> 00:02:41.120
those? It breaks up the string 

88
00:02:41.520 --> 00:02:43.920
into the biggest pieces it can 

89
00:02:44.190 --> 00:02:46.090
until a variable has interrupted 

90
00:02:46.320 --> 00:02:48.280
it. We've got, "My dog's name is," 

91
00:02:48.670 --> 00:02:50.520
then it pops in a variable, and "

92
00:02:50.595 --> 00:02:52.210
he is," that's the second item 

93
00:02:52.220 --> 00:02:54.130
in the strings array, and then, "

94
00:02:54.140 --> 00:02:56.620
years old." Those are the three 

95
00:02:56.630 --> 00:02:58.000
strings that don't get changed. 

96
00:02:58.320 --> 00:02:59.670
The other things we get is an 

97
00:02:59.680 --> 00:03:02.300
array of values, which we passed 

98
00:03:02.310 --> 00:03:05.740
in two values here. We get "

99
00:03:05.750 --> 00:03:07.260
Snickers," and "100." That's 

100
00:03:07.270 --> 00:03:08.420
what I passed in, I passed in "

101
00:03:08.430 --> 00:03:10.100
Snickers" and "100." Those are 

102
00:03:10.110 --> 00:03:11.320
the values that get passed in. 

103
00:03:11.830 --> 00:03:13.950
This array of strings is always 

104
00:03:13.960 --> 00:03:16.650
going to be one bigger than the 

105
00:03:16.660 --> 00:03:18.570
actual values array. Even if I 

106
00:03:18.580 --> 00:03:21.490
were to put in another variable, 

107
00:03:21.710 --> 00:03:25.130
like transgender, male, dog, if 

108
00:03:25.140 --> 00:03:27.690
I were to just put the gender 

109
00:03:27.770 --> 00:03:28.860
right at the end of this 

110
00:03:28.870 --> 00:03:30.200
template string, even though 

111
00:03:30.275 --> 00:03:31.880
there is nothing after it, watch 

112
00:03:31.955 --> 00:03:34.550
this. Look, it gives you an 

113
00:03:34.610 --> 00:03:36.700
empty string at the end and then 

114
00:03:36.750 --> 00:03:38.810
three. Again, strings array is 

115
00:03:38.820 --> 00:03:40.330
always going to be one longer 

116
00:03:40.405 --> 00:03:42.360
than the actual values. The idea 

117
00:03:42.360 --> 00:03:44.690
behind this is that, we can use 

118
00:03:44.700 --> 00:03:45.790
this function to build the 

119
00:03:45.800 --> 00:03:47.390
string ourself rather than 

120
00:03:47.000 --> 00:03:48.810
relying on the browser to do it. 

121
00:03:48.885 --> 00:03:50.180
I'm going to get rid of our 

122
00:03:50.190 --> 00:03:52.000
gender variable here, get rid of 

123
00:03:52.010 --> 00:03:53.860
this variable here, and get rid 

124
00:03:53.900 --> 00:03:56.200
of the debugger. Now, we need 

125
00:03:56.290 --> 00:03:59.650
to create a string. I'm going to 

126
00:03:59.650 --> 00:04:01.340
make an empty string. I'm using "

127
00:04:01.350 --> 00:04:02.590
let" here, why because we're 

128
00:04:02.600 --> 00:04:04.470
going to be tacking things on to 

129
00:04:04.480 --> 00:04:05.890
this actual string. If I used 

130
00:04:05.900 --> 00:04:06.980
console, I wouldn't be able to 

131
00:04:07.190 --> 00:04:09.540
tack onto it. Then, we want to 

132
00:04:08.950 --> 00:04:11.030
loop over this first strings 

133
00:04:11.040 --> 00:04:13.580
array here, tack on "My dog's 

134
00:04:13.590 --> 00:04:14.990
name is," and then the first 

135
00:04:15.020 --> 00:04:16.710
value, and "he is," and the 

136
00:04:16.720 --> 00:04:19.300
second value, and then "years 

137
00:04:19.310 --> 00:04:21.180
old," and then third value. In 

138
00:04:21.255 --> 00:04:22.040
this case, we don't have a third 

139
00:04:22.050 --> 00:04:24.510
value. You can use whatever 

140
00:04:24.520 --> 00:04:26.330
loop you prefer to do. You could 

141
00:04:26.330 --> 00:04:27.760
even use a map and then join it 

142
00:04:27.760 --> 00:04:28.970
together. I'm going to use the 

143
00:04:28.980 --> 00:04:31.220
dot for each, so let's say 

144
00:04:30.690 --> 00:04:34.270
strings dot for each. We got two 

145
00:04:34.280 --> 00:04:36.030
things here, we get the string 

146
00:04:36.540 --> 00:04:38.050
and we get the index of the 

147
00:04:38.060 --> 00:04:41.050
actual element here. We are 

148
00:04:41.060 --> 00:04:43.110
going to say string, str+=, 

149
00:04:43.650 --> 00:04:44.710
we're going to concatenate on 

150
00:04:44.710 --> 00:04:49.210
what we have, strings or string+

151
00:04:51.330 --> 00:04:54.680
values  . That's going 

152
00:04:54.680 --> 00:04:57.570
to say, give me the first value 

153
00:04:58.090 --> 00:04:59.750
from the strings and the first 

154
00:04:59.760 --> 00:05:01.290
value from our values array and 

155
00:05:01.300 --> 00:05:03.420
tack them on. We're going to hit 

156
00:05:03.495 --> 00:05:04.020
a little bit of an arrow, but if 

157
00:05:04.030 --> 00:05:07.280
we return this string that we've 

158
00:05:07.040 --> 00:05:08.890
been tacking things onto, we 

159
00:05:09.160 --> 00:05:11.720
should now see "My dog's name is 

160
00:05:11.730 --> 00:05:13.340
Snickers and he is 100 years old, 

161
00:05:13.980 --> 00:05:15.780
undefined." First of all, 

162
00:05:15.960 --> 00:05:17.450
that's because the strings array 

163
00:05:17.460 --> 00:05:19.440
is always going to be one larger 

164
00:05:19.450 --> 00:05:21.070
than the values array. When we 

165
00:05:21.080 --> 00:05:22.990
hit that last one, it's only 

166
00:05:23.000 --> 00:05:24.240
going to be a string and there's 

167
00:05:24.315 --> 00:05:25.150
going to be no value to tack on 

168
00:05:25.160 --> 00:05:27.340
the end. You could check if 

169
00:05:27.350 --> 00:05:29.190
values of I is undefined and, if 

170
00:05:29.200 --> 00:05:31.030
it is, then don't put it on. A 

171
00:05:31.040 --> 00:05:32.830
little trick you can do here, is 

172
00:05:32.840 --> 00:05:34.800
you can use your values of I or 

173
00:05:35.570 --> 00:05:37.220
just a blank string, and that 

174
00:05:37.220 --> 00:05:39.370
will adjust if there is no 

175
00:05:39.380 --> 00:05:42.050
values of three, then it will 

176
00:05:42.050 --> 00:05:43.770
just return a blank string there. 

177
00:05:43.930 --> 00:05:46.490
There, that's nice. Now, what 

178
00:05:46.500 --> 00:05:47.600
can we actually do with this? 

179
00:05:47.600 --> 00:05:49.340
Well, we could change this so 

180
00:05:49.380 --> 00:05:51.020
any value that gets passed in 

181
00:05:51.030 --> 00:05:52.220
gets wrapped in a spin and we 

182
00:05:52.230 --> 00:05:54.030
can use CSS to highlight it. You 

183
00:05:54.030 --> 00:05:55.840
maybe want to show your user 

184
00:05:55.850 --> 00:05:58.020
which pieces of the string were 

185
00:05:58.030 --> 00:05:59.310
variables or which pieces of the 

186
00:05:59.320 --> 00:06:00.400
string that they passed in, 

187
00:06:00.410 --> 00:06:02.010
maybe it's their user name or a 

188
00:06:02.010 --> 00:06:03.420
total for our order. In our case, 

189
00:06:03.495 --> 00:06:04.200
we just want to highlight the 

190
00:06:04.210 --> 00:06:06.110
name and the actual age. I'm 

191
00:06:06.110 --> 00:06:08.810
going to duplicate this, I'm 

192
00:06:08.885 --> 00:06:09.940
going to use template tags 

193
00:06:09.950 --> 00:06:12.610
instead of concatenation here, 

194
00:06:12.685 --> 00:06:14.970
and we want to pop in the string, 

195
00:06:14.980 --> 00:06:16.080
which is going to be the first 

196
00:06:16.090 --> 00:06:18.460
part. We want to give ourselves 

197
00:06:18.470 --> 00:06:19.710
a span with the class of "

198
00:06:19.720 --> 00:06:22.360
highlight," or "HL" and inside 

199
00:06:22.370 --> 00:06:26.540
of that, we'll say "values I," 

200
00:06:26.850 --> 00:06:28.880
or nothing. We can get rid of 

201
00:06:28.890 --> 00:06:30.450
all this concatenation here, I 

202
00:06:30.525 --> 00:06:31.620
think that's a little bit nicer. 

203
00:06:31.630 --> 00:06:32.930
That's our old one, we don't 

204
00:06:32.940 --> 00:06:35.340
want that, sayonara. We've got a 

205
00:06:35.350 --> 00:06:37.420
span. Now, let's see what our 

206
00:06:37.430 --> 00:06:39.240
sentence looks like here. There 

207
00:06:39.315 --> 00:06:42.440
we go. We've got a span with a 

208
00:06:42.515 --> 00:06:44.300
class of HL wrapped around every 

209
00:06:44.310 --> 00:06:47.450
single possible one. We've got 

210
00:06:46.830 --> 00:06:47.940
a little bit of a weirdness 

211
00:06:47.950 --> 00:06:48.870
going on here, because that's 

212
00:06:48.880 --> 00:06:51.110
the end one, but I don't think 

213
00:06:51.185 --> 00:06:51.480
that will be an issue. If we go 

214
00:06:51.510 --> 00:06:52.480
into our head here, and give 

215
00:06:52.490 --> 00:06:54.410
ourselves a style tag, our HLs 

216
00:06:55.460 --> 00:06:57.120
are going to be background, 

217
00:06:58.020 --> 00:07:00.360
yellow, favorite yellow in the 

218
00:07:00.020 --> 00:07:01.870
world, beautiful. We want to pop 

219
00:07:01.880 --> 00:07:03.800
this actual sentence onto the 

220
00:07:03.810 --> 00:07:05.400
body, document.body.enterhtml=

221
00:07:08.530 --> 00:07:13.070
sentence. I got, "My name is 

222
00:07:13.080 --> 00:07:14.720
Snickers, and he is 100 years 

223
00:07:14.730 --> 00:07:16.780
old," being highlighted. You can 

224
00:07:16.855 --> 00:07:17.770
go ahead and maybe make those 

225
00:07:17.820 --> 00:07:21.810
content editable, so that if the 

226
00:07:21.820 --> 00:07:22.850
user didn't like it, they can 

227
00:07:23.360 --> 00:07:24.560
change the value they actually 

228
00:07:24.570 --> 00:07:25.980
wanted, they didn't like "he is 

229
00:07:25.980 --> 00:07:26.940
a hundred years old," they could 

230
00:07:26.940 --> 00:07:28.720
change that value as well. It's 

231
00:07:28.690 --> 00:07:30.780
kind of a fun way to do it. 

232
00:07:31.440 --> 00:07:33.600
There are much more complicated 

233
00:07:33.610 --> 00:07:34.990
use cases for that. There are 

234
00:07:35.065 --> 00:07:37.440
much more in depth use cases for 

235
00:07:37.450 --> 00:07:40.070
that, but that is the main idea 

236
00:07:40.340 --> 00:07:42.100
behind these template tag 

237
00:07:42.100 --> 00:07:43.530
templates, is that you have a 

238
00:07:43.540 --> 00:07:46.560
string, you pass in the regular 

239
00:07:46.570 --> 00:07:47.980
string that you want, and then 

240
00:07:47.990 --> 00:07:50.030
you get all the pieces. It's up 

241
00:07:50.040 --> 00:07:52.160
to you to craft it together and 

242
00:07:52.160 --> 00:07:54.640
to return some sort of modified 

243
00:07:54.650 --> 00:07:55.460
data. In our case, we're 

244
00:07:55.535 --> 00:07:57.250
wrapping it in a spin, but you 

245
00:07:57.260 --> 00:07:59.520
may want to format it or do some 

246
00:07:59.590 --> 00:08:00.650
if statement and conditional 

247
00:08:00.660 --> 00:08:02.260
work on all the values.

