WEBVTT

1
00:00:02.410 --> 00:00:02.570
 Instructor: One of 

2
00:00:02.570 --> 00:00:03.500
the reasons people haven't 

3
00:00:03.500 --> 00:00:05.430
picked ES6 just yet is they say, "

4
00:00:05.440 --> 00:00:07.240
Well, it doesn't work in all the 

5
00:00:07.250 --> 00:00:10.070
browsers." That is not true for 

6
00:00:10.080 --> 00:00:11.400
the latest browsers, but it is 

7
00:00:11.410 --> 00:00:13.010
true if you have to support a 

8
00:00:12.620 --> 00:00:14.250
browser that is older than, I 

9
00:00:14.260 --> 00:00:15.690
don't know, a year or two old, 

10
00:00:15.740 --> 00:00:17.410
where they just don't know about 

11
00:00:17.620 --> 00:00:18.800
this ES6 things. However, 

12
00:00:18.810 --> 00:00:20.120
that should not stop you from 

13
00:00:20.130 --> 00:00:22.680
using ES6 today because it is 

14
00:00:22.690 --> 00:00:24.440
possible with Babel and 

15
00:00:24.515 --> 00:00:27.130
polyfilling to get probably 

16
00:00:27.140 --> 00:00:29.230
about 99 percent of all ES6 

17
00:00:29.370 --> 00:00:31.080
working across all the browsers 

18
00:00:31.090 --> 00:00:32.640
that you need to support. 

19
00:00:32.640 --> 00:00:34.220
What does that mean? I'm going 

20
00:00:34.295 --> 00:00:36.220
to explain to you what Babel is, 

21
00:00:36.410 --> 00:00:37.900
how we can set it up, and in the 

22
00:00:37.910 --> 00:00:39.130
next video I'm going to talk all 

23
00:00:39.140 --> 00:00:40.990
about using polyfills to 

24
00:00:41.065 --> 00:00:43.030
polyfill the new methods that we 

25
00:00:43.040 --> 00:00:45.510
haven't used. Babel, what is 

26
00:00:45.520 --> 00:00:46.910
it? I've been talking about it a 

27
00:00:46.920 --> 00:00:47.720
couple of videos and I've 

28
00:00:47.730 --> 00:00:48.600
referenced it, but I haven't 

29
00:00:48.610 --> 00:00:50.220
actually gone through it ahead 

30
00:00:50.230 --> 00:00:51.810
and say what it is. Essentially 

31
00:00:51.820 --> 00:00:54.160
it is a JavaScript compiler, and 

32
00:00:54.050 --> 00:00:55.500
what that means is you put 

33
00:00:55.510 --> 00:00:58.410
JavaScript in and you get ES5 or 

34
00:00:58.485 --> 00:01:00.410
a browser-compliant ES5 out. 

35
00:01:01.750 --> 00:01:03.450
It initially started with just 

36
00:01:03.525 --> 00:01:05.240
ES6 stuff, however it's really 

37
00:01:05.250 --> 00:01:07.910
expanded to future JavaScript 

38
00:01:07.920 --> 00:01:09.510
stuff, experimental JavaScript 

39
00:01:09.520 --> 00:01:11.190
stuff, a lot of React stuff is 

40
00:01:11.200 --> 00:01:13.980
also in it. Let's take a quick 

41
00:01:13.990 --> 00:01:15.160
look at how it works, and then 

42
00:01:15.160 --> 00:01:17.190
we'll step back. I'm just going 

43
00:01:16.400 --> 00:01:19.070
to go to babeljs.io and I'm 

44
00:01:19.145 --> 00:01:21.100
going to go to Try It Out. 

45
00:01:22.610 --> 00:01:24.290
This is really nice, because if 

46
00:01:24.365 --> 00:01:25.660
you're ever trying to understand 

47
00:01:25.670 --> 00:01:27.110
how something works you can just 

48
00:01:27.120 --> 00:01:28.620
go to the babeljs REPL right 

49
00:01:28.730 --> 00:01:30.990
here and try it out. Right 

50
00:01:31.065 --> 00:01:32.820
here, I've got this function 

51
00:01:33.010 --> 00:01:34.960
called log pet. It takes in a 

52
00:01:34.970 --> 00:01:37.770
pet name and it takes in a pet 

53
00:01:37.780 --> 00:01:38.870
type. However, we've got a 

54
00:01:38.880 --> 00:01:41.290
couple of ES6 things going on 

55
00:01:41.350 --> 00:01:43.610
here. I've got this petType = 

56
00:01:43.685 --> 00:01:44.780
dog, where I've set that as a 

57
00:01:44.790 --> 00:01:46.590
default, then I'm also using 

58
00:01:46.600 --> 00:01:48.290
template strings here. Now, 

59
00:01:48.290 --> 00:01:49.430
that works great, but what if 

60
00:01:49.570 --> 00:01:50.740
everyone is using the latest 

61
00:01:50.750 --> 00:01:52.550
Chrome? What Babel will do is 

62
00:01:52.770 --> 00:01:56.040
compile it down to what the 

63
00:01:56.115 --> 00:01:58.550
ES5 equivalent is, and it does a 

64
00:01:58.480 --> 00:02:00.210
fantastic job at doing that. 

65
00:02:00.520 --> 00:02:01.610
Never mind what this code 

66
00:02:01.620 --> 00:02:02.840
actually looks like, because 

67
00:02:02.880 --> 00:02:04.840
you're just concerned with how 

68
00:02:04.850 --> 00:02:06.320
this code looks like. Let's 

69
00:02:06.330 --> 00:02:09.530
take a look. Right here, petType = 

70
00:02:09.390 --> 00:02:11.050
dog, here it does a quick check 

71
00:02:11.230 --> 00:02:13.510
if someone has passed a second 

72
00:02:13.690 --> 00:02:16.850
argument, and if not, they set 

73
00:02:16.925 --> 00:02:19.270
petType to be = dog. Same thing 

74
00:02:19.280 --> 00:02:22.370
goes for when I am doing 

75
00:02:22.560 --> 00:02:24.250
concatenation here. This is 

76
00:02:24.260 --> 00:02:25.840
template strings, but this kicks 

77
00:02:25.850 --> 00:02:27.720
out actual annoying 

78
00:02:27.850 --> 00:02:30.330
concatenation. That's Babel 

79
00:02:30.330 --> 00:02:33.250
and we use it pretty much in 

80
00:02:33.260 --> 00:02:34.610
every single project that you 

81
00:02:34.940 --> 00:02:36.980
need ES6 to work with. It sort 

82
00:02:36.990 --> 00:02:38.660
of goes hand and hand with a 

83
00:02:38.735 --> 00:02:39.140
Webpack or a system JS. I've 

84
00:02:39.200 --> 00:02:43.020
already shown you how to use 

85
00:02:43.095 --> 00:02:45.700
Babel with Webpack. You only 

86
00:02:45.710 --> 00:02:48.040
need Webpack or system or a 

87
00:02:48.115 --> 00:02:49.250
Browserify if you are using 

88
00:02:49.260 --> 00:02:50.930
modules. If you're using 

89
00:02:50.930 --> 00:02:52.350
absolutely everything else, 

90
00:02:53.030 --> 00:02:55.110
there's no need for a Webpack or 

91
00:02:55.185 --> 00:02:56.710
a Browserify or anything like 

92
00:02:56.740 --> 00:02:58.340
that. If you just want to 

93
00:02:58.415 --> 00:02:59.580
write ES6 code and get it to 

94
00:02:59.590 --> 00:03:01.290
compile down without having to 

95
00:03:01.300 --> 00:03:03.160
use modules, then you don't need 

96
00:03:03.170 --> 00:03:04.480
a Webpack or anything like that. 

97
00:03:04.550 --> 00:03:06.170
You can have a much simpler 

98
00:03:06.245 --> 00:03:07.940
setup. I'm going to show you 

99
00:03:07.950 --> 00:03:09.680
how to do that now. Let's take a 

100
00:03:09.690 --> 00:03:12.150
look. Here we are in our ES6 

101
00:03:12.470 --> 00:03:14.240
tooling. Let's make a directory 

102
00:03:14.530 --> 00:03:16.950
called Babel and let's move into 

103
00:03:16.950 --> 00:03:19.690
Babel. Now, I need to set up 

104
00:03:19.700 --> 00:03:21.860
an npm package, we're going to 

105
00:03:21.935 --> 00:03:28.260
set npm in it, and now we have a 

106
00:03:28.580 --> 00:03:30.480
package.json file. Now we need 

107
00:03:30.520 --> 00:03:31.890
to install just two things 

108
00:03:31.900 --> 00:03:33.580
actually. We need to npm install 

109
00:03:33.655 --> 00:03:35.270
babel.cli. What that will do is 

110
00:03:35.300 --> 00:03:38.150
it allow us to run Babel via the 

111
00:03:38.160 --> 00:03:39.710
command line, or we're actually 

112
00:03:39.710 --> 00:03:42.160
going to do an npm script. 

113
00:03:41.790 --> 00:03:43.130
Then we also need what's called 

114
00:03:43.140 --> 00:03:45.820
a preset because Babel has these 

115
00:03:45.820 --> 00:03:47.850
plugins, if we go to plugins 

116
00:03:47.860 --> 00:03:50.100
here, and every single possible 

117
00:03:50.110 --> 00:03:53.660
feature that JavaScript has, has 

118
00:03:53.670 --> 00:03:55.590
a plugin. They sort of chunk 

119
00:03:55.600 --> 00:03:57.870
it out into different plugins, 

120
00:03:57.880 --> 00:03:59.450
so arrow functions, and block 

121
00:03:59.460 --> 00:04:01.580
scoping, and classes, and for...

122
00:04:01.800 --> 00:04:03.540
of, and destructuring, and 

123
00:04:04.910 --> 00:04:07.800
spread, and every single 

124
00:04:07.810 --> 00:04:10.090
possible feature of ES6 is 

125
00:04:10.090 --> 00:04:11.160
available right here. But 

126
00:04:11.170 --> 00:04:13.100
then it also supports modules. 

127
00:04:13.110 --> 00:04:15.270
It also supports some 

128
00:04:15.280 --> 00:04:17.100
experimental like stuff that 

129
00:04:17.210 --> 00:04:18.460
might be added to the language 

130
00:04:18.470 --> 00:04:20.820
but we aren't quite sure just 

131
00:04:20.830 --> 00:04:22.120
yet. It supports some 

132
00:04:22.195 --> 00:04:23.850
minification stuff. It supports 

133
00:04:23.860 --> 00:04:24.860
a whole bunch of React stuff. 

134
00:04:24.860 --> 00:04:26.160
There's all kinds of stuff, and 

135
00:04:26.500 --> 00:04:27.910
probably you don't need all of 

136
00:04:27.985 --> 00:04:30.310
these. You just need all of the 

137
00:04:30.385 --> 00:04:32.800
ES6 stuff, so rather than you 

138
00:04:32.810 --> 00:04:34.290
having to download every single 

139
00:04:34.300 --> 00:04:36.000
plugin that you need here, they 

140
00:04:36.010 --> 00:04:37.440
also have this thing called 

141
00:04:37.515 --> 00:04:39.320
presets. A preset is simple, 

142
00:04:39.330 --> 00:04:41.610
just a collection of plugins, so 

143
00:04:41.620 --> 00:04:43.200
we don't need to install every 

144
00:04:43.210 --> 00:04:45.190
single ES6 plugin, we just need 

145
00:04:45.200 --> 00:04:47.480
to install one ES2015 preset, so 

146
00:04:47.555 --> 00:04:49.640
that's what we'll do. We'll 

147
00:04:49.650 --> 00:04:54.850
say babel-preset-ES2015, and 

148
00:04:54.860 --> 00:04:56.330
then we're going to save of 

149
00:04:56.460 --> 00:04:58.210
those to our packge.json. 

150
00:04:58.040 --> 00:05:00.970
Once it's installed you can 

151
00:05:00.980 --> 00:05:02.690
actually check your package.json 

152
00:05:02.765 --> 00:05:04.120
and you should see that we have 

153
00:05:04.200 --> 00:05:05.980
babel-cli and babel-preset 

154
00:05:06.020 --> 00:05:07.810
installed. Now that we have 

155
00:05:07.820 --> 00:05:09.080
that, we have this command 

156
00:05:09.160 --> 00:05:10.570
called Babel. You won't be able 

157
00:05:10.580 --> 00:05:12.250
to run it via the command line 

158
00:05:12.260 --> 00:05:13.930
unless you have installed that 

159
00:05:13.940 --> 00:05:16.190
globally, but we can run it via 

160
00:05:16.200 --> 00:05:18.190
an npm script. That's 

161
00:05:18.340 --> 00:05:19.480
actually what we're going to go 

162
00:05:19.490 --> 00:05:23.260
ahead and do, is we cab go into 

163
00:05:23.270 --> 00:05:24.850
our scripts here, we can delete 

164
00:05:24.860 --> 00:05:26.150
the test one, and we'll just 

165
00:05:26.150 --> 00:05:27.670
call that script called Babel. 

166
00:05:29.130 --> 00:05:31.130
The actual command that we run 

167
00:05:31.140 --> 00:05:31.760
is called babelapp.js, so we're 

168
00:05:31.760 --> 00:05:34.560
going to run the Babel command 

169
00:05:34.570 --> 00:05:37.900
against app.js, and we are going 

170
00:05:37.910 --> 00:05:39.950
to watch for changes, and we are 

171
00:05:39.950 --> 00:05:42.230
going to save the output out-

172
00:05:42.830 --> 00:05:45.030
file to a file called app-

173
00:05:45.105 --> 00:05:47.430
compiled.js. Now, a couple of 

174
00:05:47.505 --> 00:05:49.660
things we need here. First of 

175
00:05:49.260 --> 00:05:51.500
all, we need an app.js, so let's 

176
00:05:51.210 --> 00:05:52.350
go into our Babel and create a 

177
00:05:52.360 --> 00:05:55.640
file called app.js, and let's 

178
00:05:55.650 --> 00:05:58.200
just say const age = 100, const 

179
00:05:58.275 --> 00:06:06.500
people = Wes and Kate, and then 

180
00:06:06.510 --> 00:06:10.610
let's just say const full names = 

181
00:06:10.610 --> 00:06:14.330
people.map-name, we'll do an 

182
00:06:14.340 --> 00:06:16.690
arrow function, and then we'll 

183
00:06:16.690 --> 00:06:20.080
return the actual name 

184
00:06:20.300 --> 00:06:23.270
plus Bos on the end. What 

185
00:06:23.345 --> 00:06:25.430
did we use? We used const, we 

186
00:06:24.800 --> 00:06:27.000
used arrow function here, we 

187
00:06:27.010 --> 00:06:30.260
used implicit return, we used a 

188
00:06:30.260 --> 00:06:31.460
whole bunch of different ES6 

189
00:06:31.560 --> 00:06:33.130
features here, and ideally what 

190
00:06:33.140 --> 00:06:34.720
should happen if we take that 

191
00:06:35.080 --> 00:06:36.390
and try it out in the Babel 

192
00:06:36.370 --> 00:06:41.610
editor, it should compile that 

193
00:06:41.620 --> 00:06:43.130
down to using var. It should 

194
00:06:43.140 --> 00:06:44.680
properly scope the vars if I'm 

195
00:06:44.750 --> 00:06:46.710
inside of any blocks, and it 

196
00:06:46.710 --> 00:06:49.400
should make it a proper function 

197
00:06:49.410 --> 00:06:50.850
and use concatenation. How 

198
00:06:51.210 --> 00:06:53.160
can we do that here? Let's go 

199
00:06:53.670 --> 00:06:55.750
over to our package.json. Now we 

200
00:06:55.750 --> 00:06:57.900
have the script here. If we were 

201
00:06:57.910 --> 00:06:59.860
to run it, it wouldn't work just 

202
00:06:59.935 --> 00:07:01.430
yet, and I'll show you why...npm 

203
00:07:01.050 --> 00:07:04.740
run Babel. If we up our actual 

204
00:07:04.800 --> 00:07:07.390
app-compiled right here, it 

205
00:07:07.400 --> 00:07:08.900
kicks out or JavaScript file, 

206
00:07:08.910 --> 00:07:10.650
but none of it has changed at 

207
00:07:10.660 --> 00:07:12.920
all because Babel by default 

208
00:07:12.995 --> 00:07:14.000
just is a file mover. It 

209
00:07:14.010 --> 00:07:15.380
doesn't actually do anything 

210
00:07:15.550 --> 00:07:17.150
because we haven't told at which 

211
00:07:17.340 --> 00:07:19.240
plugins or which collections of 

212
00:07:19.250 --> 00:07:20.860
plugins, which is a preset, to 

213
00:07:20.870 --> 00:07:23.140
use. To tell it, we could have 

214
00:07:23.215 --> 00:07:24.470
done it on the command line here, 

215
00:07:24.940 --> 00:07:28.010
or better is to have what's 

216
00:07:28.020 --> 00:07:29.610
called a .babelrc file. A 

217
00:07:29.685 --> 00:07:32.730
babelrc file is very similar to 

218
00:07:32.805 --> 00:07:35.050
an ESLint file, where it will 

219
00:07:35.060 --> 00:07:37.670
check .file for your specific 

220
00:07:37.680 --> 00:07:39.280
settings. I actually don't 

221
00:07:39.290 --> 00:07:41.920
like to use a .babelrc file in 

222
00:07:41.930 --> 00:07:43.100
some of my tutorials because 

223
00:07:43.110 --> 00:07:45.030
it's a .file and it always gets 

224
00:07:45.040 --> 00:07:46.520
lost. People that have hidden 

225
00:07:46.530 --> 00:07:48.510
files don't copy it over, so one 

226
00:07:48.520 --> 00:07:49.510
little thing you can do is you 

227
00:07:49.520 --> 00:07:50.990
can actually put your babelrc 

228
00:07:51.270 --> 00:07:53.900
file inside of package.json, 

229
00:07:53.975 --> 00:07:55.570
which is really cool. We can 

230
00:07:55.580 --> 00:07:57.360
just go into our package.json, 

231
00:07:57.280 --> 00:07:59.310
go to the bottom here and add a 

232
00:07:59.310 --> 00:08:00.810
Babel. Now we are writing json 

233
00:08:00.885 --> 00:08:01.870
here. Make sure you use double 

234
00:08:01.880 --> 00:08:03.850
quotes. Our Babel file is 

235
00:08:03.860 --> 00:08:10.220
going to be a couple of things. 

236
00:08:10.250 --> 00:08:13.080
Which preset are we using? We'll 

237
00:08:13.090 --> 00:08:16.850
we are using ES2015, and that's 

238
00:08:16.860 --> 00:08:18.910
it. If you had multiple presets, 

239
00:08:18.700 --> 00:08:20.080
like you might also be doing 

240
00:08:20.090 --> 00:08:22.600
React, then you do React, like 

241
00:08:22.630 --> 00:08:24.570
that. However, we just have one. 

242
00:08:25.380 --> 00:08:27.280
That is our entire Babel config. 

243
00:08:27.430 --> 00:08:28.560
There's a whole bunch of other 

244
00:08:28.790 --> 00:08:30.030
stuff that you could possibly 

245
00:08:30.040 --> 00:08:31.330
put in there, and to find out 

246
00:08:31.650 --> 00:08:33.580
more about that you go to usage 

247
00:08:33.655 --> 00:08:38.030
cli, or go to usage babelrc, and 

248
00:08:38.105 --> 00:08:40.950
it's going to tell you 

249
00:08:41.110 --> 00:08:42.970
information that can possibly go 

250
00:08:42.980 --> 00:08:45.750
into it and you can check it all 

251
00:08:45.760 --> 00:08:47.880
out via the options on here. 

252
00:08:47.955 --> 00:08:50.590
File name, presets. See, that's 

253
00:08:50.600 --> 00:08:52.360
the one we're using. Plugins, if 

254
00:08:52.370 --> 00:08:53.580
you want to add an additional 

255
00:08:53.590 --> 00:08:55.590
plugin there. Highlight code, 

256
00:08:55.600 --> 00:08:57.190
ignore, etc., etc. All kinds of 

257
00:08:57.200 --> 00:08:58.280
fun stuff that goes in there, 

258
00:08:58.290 --> 00:09:00.290
but we really just need the 

259
00:09:00.365 --> 00:09:01.180
presets here. I think we 

260
00:09:01.220 --> 00:09:04.100
should be able to now run. Quit 

261
00:09:04.110 --> 00:09:08.130
it and then npm run Babel, and 

262
00:09:08.140 --> 00:09:09.600
it should kick out an app-

263
00:09:09.850 --> 00:09:12.910
compiled. I open up my compiled 

264
00:09:12.920 --> 00:09:14.680
in new tab here...There we go, 

265
00:09:14.690 --> 00:09:16.270
look. It's telling me that we 

266
00:09:16.280 --> 00:09:18.680
use var here, we have full names, 

267
00:09:18.690 --> 00:09:20.270
it's using a proper function, 

268
00:09:20.280 --> 00:09:21.990
it's using concatenation. Now 

269
00:09:22.060 --> 00:09:23.840
any time that I write any sort 

270
00:09:23.880 --> 00:09:28.750
of ES6 in here, for person of 

271
00:09:28.980 --> 00:09:34.190
people, const, console.log, 

272
00:09:35.550 --> 00:09:37.510
person, give that a save, it 

273
00:09:37.520 --> 00:09:39.290
will rerun here, and look at 

274
00:09:39.300 --> 00:09:40.840
this. It does all kinds of crazy 

275
00:09:40.950 --> 00:09:45.040
stuff. It uses R4, it uses 

276
00:09:45.050 --> 00:09:46.910
the symbol iterator, it does all 

277
00:09:46.985 --> 00:09:48.360
of the hard work behind the 

278
00:09:48.370 --> 00:09:50.140
scenes to get this to actually 

279
00:09:50.150 --> 00:09:52.000
work, where we just have to 

280
00:09:52.010 --> 00:09:54.380
write the nice, clean ES6 and it 

281
00:09:54.310 --> 00:09:55.510
works extremely well. 

282
00:09:55.660 --> 00:09:56.660
Companies like Facebook are 

283
00:09:56.735 --> 00:09:58.160
using this to compile their 

284
00:09:58.170 --> 00:10:00.230
entire code base, so if it's 

285
00:10:00.305 --> 00:10:00.380
good enough for them it's 

286
00:10:00.390 --> 00:10:02.010
probably also good enough for 

287
00:10:02.020 --> 00:10:04.740
you. One other thing is if 

288
00:10:04.750 --> 00:10:06.390
you would like to add additional 

289
00:10:06.400 --> 00:10:07.730
plugins -- because our package.

290
00:10:07.805 --> 00:10:10.580
json Babel preset is only ES2015, 

291
00:10:11.190 --> 00:10:12.380
but let's say you were 

292
00:10:12.140 --> 00:10:13.900
interested in trying some of the 

293
00:10:13.910 --> 00:10:16.980
other plugins out. One that I am 

294
00:10:16.990 --> 00:10:19.160
a big fan of under experimental 

295
00:10:19.390 --> 00:10:21.350
is this object rest spread. 

296
00:10:21.370 --> 00:10:22.680
Remember you learned about rest 

297
00:10:22.690 --> 00:10:25.560
and spread... and I said this 

298
00:10:25.560 --> 00:10:27.470
only works for arrays. It can 

299
00:10:27.530 --> 00:10:29.940
also work for objects, but it's 

300
00:10:29.950 --> 00:10:30.990
not in the language yet. It 

301
00:10:31.000 --> 00:10:33.900
hasn't totally done. What we 

302
00:10:33.900 --> 00:10:36.740
need to do is install this right 

303
00:10:37.990 --> 00:10:39.180
here, npm solve Babel plugin 

304
00:10:39.270 --> 00:10:41.360
transform object rest spread. 

305
00:10:42.510 --> 00:10:44.000
We take that to our command line. 

306
00:10:44.530 --> 00:10:45.830
Make sure that you save that 

307
00:10:46.040 --> 00:10:50.250
dependency, and now that we've 

308
00:10:50.260 --> 00:10:52.370
installed this right here we can 

309
00:10:52.380 --> 00:10:55.470
go to our package.json, and 

310
00:10:55.480 --> 00:10:57.080
instead of also using presets we 

311
00:10:57.090 --> 00:10:58.820
can use plugins, which is going 

312
00:10:58.830 --> 00:11:00.710
to be an array in itself. 

313
00:11:01.270 --> 00:11:03.340
The plugin that we are using is 

314
00:11:03.350 --> 00:11:07.310
the transform object spread, so 

315
00:11:07.320 --> 00:11:08.590
I should be able to now go into 

316
00:11:08.600 --> 00:11:10.610
my app.js and use some of their 

317
00:11:11.510 --> 00:11:14.090
rest properties or their spreads 

318
00:11:14.100 --> 00:11:16.130
properties, paste it in here. 

319
00:11:16.205 --> 00:11:19.330
Let me paste that at the top so 

320
00:11:19.405 --> 00:11:18.460
we can see it. Give it a 

321
00:11:18.470 --> 00:11:20.110
save, now I need to rerun it, 

322
00:11:20.185 --> 00:11:28.330
npm run Babel, and here we go, 

323
00:11:28.620 --> 00:11:30.170
you see that. They put in some 

324
00:11:30.180 --> 00:11:32.180
helper functions often object 

325
00:11:32.190 --> 00:11:33.960
without properties, and this is 

326
00:11:33.970 --> 00:11:35.310
our actual...It looks a little 

327
00:11:35.320 --> 00:11:37.030
bit funky sometimes, but they 

328
00:11:37.040 --> 00:11:38.180
know what they're doing and the 

329
00:11:38.190 --> 00:11:40.270
code actually turns out working 

330
00:11:40.280 --> 00:11:41.230
really nicely.

