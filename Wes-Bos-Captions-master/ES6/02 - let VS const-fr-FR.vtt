WEBVTT

1
00:00:02.370 --> 00:00:02.760
Instructeur: Nous savons 

2
00:00:03.120 --> 00:00:04.890
que var a une portée limitée par les fonctions. Nous 

3
00:00:04.900 --> 00:00:06.450
savons que let et const sont 

4
00:00:06.460 --> 00:00:07.770
limités par les blocs, 

5
00:00:07.780 --> 00:00:08.940
qui correspond à l'intérieur d'un ensemble 

6
00:00:08.950 --> 00:00:10.310
d'accolades. Maintenant, nous avons 

7
00:00:10.320 --> 00:00:12.200
besoin de savoir si à l'intérieur du périmètre où 

8
00:00:12.290 --> 00:00:13.470
la variable est déclarée, nous ne pouvons 

9
00:00:13.480 --> 00:00:15.350
la déclarer qu'une seule et unique fois. 

10
00:00:15.350 --> 00:00:17.060
Si je tente de faire let points = 60 ici, 

11
00:00:18.400 --> 00:00:19.710
il ne va pas me laisser faire. Il va 

12
00:00:19.785 --> 00:00:20.670
me dire que points a déjà 

13
00:00:20.680 --> 00:00:22.410
été déclarée. Alors qu'avec les 

14
00:00:22.270 --> 00:00:24.050
variables Var, il continuera de marcher 

15
00:00:24.600 --> 00:00:26.740
sans aucun avertissement. 

16
00:00:26.750 --> 00:00:28.180
Cela peut causer beaucoup de 

17
00:00:28.260 --> 00:00:29.890
bugs dans vos applications, parce que 

18
00:00:29.930 --> 00:00:31.280
vous pourriez accidentellement 

19
00:00:31.290 --> 00:00:32.940
utiliser la même variable deux fois. 

20
00:00:33.015 --> 00:00:34.600
Vous pouvez, bien sûr, mettre à jour la 

21
00:00:34.610 --> 00:00:35.930
variable let. Nous regarderons plus en 

22
00:00:35.940 --> 00:00:37.660
détails les différences entre let et const 

23
00:00:37.670 --> 00:00:39.290
dans les vidéos à venir, mais vous ne pouvez pas les redéclarer 

24
00:00:39.365 --> 00:00:40.860
deux fois dans le même périmètre. 

25
00:00:41.100 --> 00:00:42.720
Maintenant, et si j'avais ceci ? Si 

26
00:00:42.795 --> 00:00:46.610
points > 40, nous dirons que 

27
00:00:46.760 --> 00:00:49.930
let winner = true. Sauvegardez, 

28
00:00:49.940 --> 00:00:51.990
rafraîchissez, pas d'erreurs, c'est autorisé. 

29
00:00:52.030 --> 00:00:53.280
Mais si je cherche à accéder à winner, qu'est ce 

30
00:00:53.290 --> 00:00:54.670
que je vais avoir ? À vous de me le dire. 

31
00:00:55.060 --> 00:00:58.340
Nous avons... Oh, mais ça marche. Est-ce que 

32
00:00:58.350 --> 00:01:00.090
ça marche? Console.log, ça marche. 

33
00:01:00.165 --> 00:01:02.230
Voyons voir, est-ce que ça a vraiment marché? 

34
00:01:02.290 --> 00:01:07.210
Ça a marché. Pourquoi est-ce que "winner" est toujours 

35
00:01:07.220 --> 00:01:08.890
à false, si nous l'avons mis 

36
00:01:09.040 --> 00:01:10.840
à true ? Le point important 

37
00:01:10.850 --> 00:01:13.260
ici est que ces deux variables 

38
00:01:13.690 --> 00:01:14.960
sont deux variables séparées. Elles 

39
00:01:15.035 --> 00:01:16.580
ont le même nom, mais ont des 

40
00:01:16.670 --> 00:01:18.360
portées différentes. Ce "winner" 

41
00:01:18.370 --> 00:01:20.090
ci, a une portée reliée 

42
00:01:20.100 --> 00:01:22.030
au "window". Ce "winner" là, 

43
00:01:22.280 --> 00:01:24.400
parce qu'il a été déclaré 

44
00:01:24.410 --> 00:01:26.000
dans un bloc -- regardez, 

45
00:01:26.010 --> 00:01:27.630
c'est un bloc juste ici -- sa portée 

46
00:01:27.630 --> 00:01:29.910
est limitée par ce bloc de code. 

47
00:01:29.985 --> 00:01:32.200
Si je change ce let winner, et 

48
00:01:32.275 --> 00:01:33.770
j'ai changé ces deux pour être des var, 

49
00:01:33.845 --> 00:01:37.010
et si je rentre "winner", "winner" est maintenant à 

50
00:01:37.020 --> 00:01:38.360
true. Pourquoi ? Parce qu'il n'est pas à 

51
00:01:38.430 --> 00:01:39.700
l'intérieur d'une fonction, 

52
00:01:39.775 --> 00:01:41.220
sa portée n'est pas délimitée, alors 

53
00:01:41.230 --> 00:01:44.080
qu'une variable let l'est. C'est 

54
00:01:44.090 --> 00:01:45.070
une chose à retenir. L'autre 

55
00:01:45.080 --> 00:01:45.930
point important à 

56
00:01:46.005 --> 00:01:47.230
savoir est la différence 

57
00:01:47.240 --> 00:01:49.540
entre let et const. 

58
00:01:49.615 --> 00:01:51.140
Const ne peut pas être 

59
00:01:51.150 --> 00:01:53.450
modifié. Les variables let sont faites 

60
00:01:53.460 --> 00:01:55.630
pour être modifiables. Je peux écrire 

61
00:01:55.705 --> 00:01:59.010
points = 60, et ça marchera bien. 

62
00:02:00.070 --> 00:02:01.770
Nous voyons 60. Cependant, j'ai 

63
00:02:01.780 --> 00:02:03.130
cette "key", peut-être quelque chose 

64
00:02:03.140 --> 00:02:05.090
que je ne veux pas pouvoir être modifiable; 

65
00:02:05.165 --> 00:02:07.540
"const" signifie "constant". Si 

66
00:02:07.550 --> 00:02:10.250
j'essaie de changer la valeur -- key = a, b, 

67
00:02:10.260 --> 00:02:13.440
c, 1, 2, 3, 4 -- il va nous 

68
00:02:12.360 --> 00:02:14.860
crier dessus parce que "affectation 

69
00:02:14.870 --> 00:02:16.250
à une variable constante". Vous ne 

70
00:02:16.260 --> 00:02:18.850
pouvez pas mettre à jour une variable const, 

71
00:02:19.060 --> 00:02:20.800
alors que let le permet.

72
00:02:21.000 --> 00:02:21.840
Nous allons approfondir les 

73
00:02:21.930 --> 00:02:23.100
exemples et vous allez 

74
00:02:23.175 --> 00:02:24.110
comprendre où j'utilise 

75
00:02:24.120 --> 00:02:25.920
lequel au fur et à mesure que nous avançons, mais 

76
00:02:25.930 --> 00:02:26.930
c'est tout ce que nous avons besoin de 

77
00:02:26.980 --> 00:02:28.810
savoir pour le moment. 

78
00:02:28.820 --> 00:02:30.070
Rapidement, un dernier point est que 

79
00:02:30.490 --> 00:02:31.890
parfois, les gens pensent que 

80
00:02:31.965 --> 00:02:32.980
const signifie que la variable est immutable, 

81
00:02:33.270 --> 00:02:34.280
ce qui signifie que si j'ai un 

82
00:02:34.350 --> 00:02:36.060
objet comme const person =... 

83
00:02:37.990 --> 00:02:40.740
Je vais dire que name a pour valeur "Wes" et 

84
00:02:41.010 --> 00:02:44.810
l'âge a 28, j'ai cette 

85
00:02:44.820 --> 00:02:47.230
variable "person". Mais si je tente de 

86
00:02:47.270 --> 00:02:48.820
modifier sa valeur en autre chose -- le nom 

87
00:02:49.460 --> 00:02:51.320
sera "Wesley" -- il ne me 

88
00:02:51.330 --> 00:02:53.110
permet pas de le faire. Cependant, les 

89
00:02:53.120 --> 00:02:55.720
propriétés d'une variable const 

90
00:02:55.500 --> 00:02:57.580
peuvent changer. C'est 

91
00:02:57.590 --> 00:02:59.310
parce que l'objet entier n'est pas 

92
00:02:59.320 --> 00:03:00.920
immutable. Il ne peut juste pas être 

93
00:03:01.040 --> 00:03:02.830
réaffecté. L'image que j'aime 

94
00:03:02.840 --> 00:03:05.100
avoir à propos d'un objet est 

95
00:03:05.110 --> 00:03:07.310
que l'objet "person", c'est moi. Je ne vais 

96
00:03:07.320 --> 00:03:08.840
jamais changer, pas ma 

97
00:03:08.850 --> 00:03:11.230
vie entière, mais des parties, des attributs 

98
00:03:11.240 --> 00:03:12.540
de moi, vont en effet changer. 

99
00:03:12.550 --> 00:03:14.290
Peut-être mon âge, ma couleur de cheveux, 

100
00:03:14.300 --> 00:03:15.990
où je vis. Il y a des choses à propos de moi 

101
00:03:16.000 --> 00:03:17.270
qui vont changer. Ça ira, 

102
00:03:17.280 --> 00:03:19.130
aussi longtemps que l'objet qui est 

103
00:03:19.170 --> 00:03:21.400
affecté à Wes est toujours le 

104
00:03:21.410 --> 00:03:22.770
même objet. Je peux tenter de 

105
00:03:22.780 --> 00:03:25.410
faire person.age = 29 et nous avons 

106
00:03:25.485 --> 00:03:29.300
l'objet person. Ça marche 

107
00:03:29.310 --> 00:03:31.670
bien, mais je ne peux pas remplacer 

108
00:03:31.680 --> 00:03:33.390
entièrement toute ma 

109
00:03:33.400 --> 00:03:35.310
variable. Si vous avez besoin de 

110
00:03:35.690 --> 00:03:37.430
geler tout, nous avons quelque 

111
00:03:37.440 --> 00:03:39.670
chose appelé object.freeze. Ça 

112
00:03:39.680 --> 00:03:41.220
ne fait actuellement pas partie de ES6, mais 

113
00:03:41.230 --> 00:03:42.680
vous pouvez jeter un coup d'oeil à ce sujet sur MDN, 

114
00:03:42.680 --> 00:03:44.800
et vous pouvez l'utiliser sur "person". Disons 

115
00:03:44.875 --> 00:03:47.780
const Wes = object.freeze. 

116
00:03:48.930 --> 00:03:50.480
Maintenant, j'ai une variable Wes. Si 

117
00:03:50.490 --> 00:03:54.700
j'essaie de faire Wes.age = 30 

118
00:03:54.710 --> 00:03:58.290
et que j'affiche Wes.age, ça dit toujours 28. 

119
00:03:58.365 --> 00:04:00.390
Je ne peux rien 

120
00:04:00.400 --> 00:04:02.940
changer dans cette variable. 

