WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.590 --> 00:00:03.480
We just learned a whole bunch of 

3
00:00:03.480 --> 00:00:05.000
stuff about arrow functions, and 

4
00:00:05.010 --> 00:00:06.080
really the only way to make it 

5
00:00:06.090 --> 00:00:07.870
sink in now is to do some 

6
00:00:07.920 --> 00:00:09.930
practice. I've got two exercise 

7
00:00:09.940 --> 00:00:11.910
lined up for you and how this is 

8
00:00:11.985 --> 00:00:13.420
going to work is I'm going to 

9
00:00:13.495 --> 00:00:14.650
explain it and then you go off 

10
00:00:14.660 --> 00:00:16.280
and do it. Then you come back 

11
00:00:16.290 --> 00:00:18.250
and continue this video and I'm 

12
00:00:18.325 --> 00:00:19.090
going to show you how I would 

13
00:00:19.165 --> 00:00:21.490
have solved and to sort of 

14
00:00:21.565 --> 00:00:21.010
compare your answers. There's 

15
00:00:21.220 --> 00:00:22.500
obviously going to be way more 

16
00:00:22.510 --> 00:00:24.600
than one possible answer so if 

17
00:00:24.675 --> 00:00:25.760
it works for you that's probably 

18
00:00:25.770 --> 00:00:28.020
a pretty good solution. This is 

19
00:00:28.030 --> 00:00:29.550
the actual problem that I had -- 

20
00:00:29.560 --> 00:00:32.090
I'm in the exercise folder for 

21
00:00:32.100 --> 00:00:34.030
the arrow functions here -- once 

22
00:00:34.080 --> 00:00:36.550
where I actually wanted to sum 

23
00:00:36.560 --> 00:00:38.970
up a YouTube series and say it 

24
00:00:38.970 --> 00:00:40.640
was this many hours, but I 

25
00:00:40.715 --> 00:00:42.060
didn't know like a nice way to 

26
00:00:42.070 --> 00:00:44.790
do that. However, YouTube would 

27
00:00:44.790 --> 00:00:47.050
list all of my videos here and 

28
00:00:47.125 --> 00:00:48.490
they would have a data attribute 

29
00:00:48.600 --> 00:00:50.790
of data-time equals 5 minutes 

30
00:00:50.865 --> 00:00:53.590
and 17 seconds, 7 minutes and 24 

31
00:00:53.665 --> 00:00:55.610
seconds. What I realized that 

32
00:00:55.770 --> 00:00:58.440
you could do is you could select 

33
00:00:58.440 --> 00:01:00.160
all of them, pop out the data 

34
00:01:00.170 --> 00:01:02.040
time, parse the minutes and 

35
00:01:02.050 --> 00:01:04.080
seconds into seconds, add them 

36
00:01:04.090 --> 00:01:07.070
all up, and you're off and ready 

37
00:01:07.145 --> 00:01:10.030
to go. You could do this in one 

38
00:01:10.040 --> 00:01:12.560
big reduce function, but since I 

39
00:01:12.635 --> 00:01:13.950
want you to get a practice with 

40
00:01:14.310 --> 00:01:15.410
working with arrow functions, so 

41
00:01:15.420 --> 00:01:17.130
I have to sort of step through 

42
00:01:17.140 --> 00:01:18.540
where you can use filter(), map(), 

43
00:01:18.550 --> 00:01:19.840
map(), and reduce to get the 

44
00:01:19.850 --> 00:01:22.150
total, and that's going to 

45
00:01:21.780 --> 00:01:23.930
really help us. Go ahead and do 

46
00:01:23.940 --> 00:01:25.380
that one. I'll show you exercise 

47
00:01:25.390 --> 00:01:26.580
two as well. This is a little 

48
00:01:26.620 --> 00:01:28.350
bit easier, we've got an array 

49
00:01:28.360 --> 00:01:32.210
of numbers here, and use the 

50
00:01:32.250 --> 00:01:34.050
filter method and an arrow 

51
00:01:34.060 --> 00:01:35.130
function to create an array of 

52
00:01:35.140 --> 00:01:36.960
numbers that are greater than 70, 

53
00:01:37.110 --> 00:01:38.580
pretty straightforward, but it 

54
00:01:38.655 --> 00:01:40.110
should just be a nice quick one-

55
00:01:40.120 --> 00:01:41.730
liner for you. Good luck with 

56
00:01:41.730 --> 00:01:43.700
that and I will see you back in 

57
00:01:43.710 --> 00:01:45.290
a couple of minutes. Hopefully, 

58
00:01:45.365 --> 00:01:46.410
you had a good time with that 

59
00:01:46.420 --> 00:01:47.530
let's go through it together. 

60
00:01:47.530 --> 00:01:48.780
The first one we'll select all 

61
00:01:48.855 --> 00:01:50.130
the listed times on the page and 

62
00:01:50.140 --> 00:01:51.780
convert it to an array. Select 

63
00:01:51.790 --> 00:01:53.480
all of them, so const items, 

64
00:01:53.490 --> 00:01:55.870
equals, we'll use document.

65
00:01:55.945 --> 00:01:58.600
querySelector() all here, and 

66
00:01:58.600 --> 00:01:59.870
we're going to select them. How 

67
00:01:59.880 --> 00:02:00.940
should we select them? There's 

68
00:02:00.950 --> 00:02:02.820
no class or ID or anything on 

69
00:02:02.830 --> 00:02:04.500
there, the one thing that it 

70
00:02:04.510 --> 00:02:06.040
does have in common is that it 

71
00:02:05.690 --> 00:02:08.610
has a data-time attribute. I'm 

72
00:02:08.685 --> 00:02:10.310
going to use an attribute 

73
00:02:10.385 --> 00:02:11.750
selector, just square brackets 

74
00:02:12.250 --> 00:02:14.080
anything with a data-time set on 

75
00:02:14.090 --> 00:02:15.130
it, I want to select it. 

76
00:02:16.140 --> 00:02:17.200
Actually I'm running in Chrome 

77
00:02:17.210 --> 00:02:19.200
Canary and probably by the time 

78
00:02:19.210 --> 00:02:20.190
you watch this it's going to be 

79
00:02:20.200 --> 00:02:22.280
available in standard Chrome and 

80
00:02:22.290 --> 00:02:24.150
all your other browsers, but in 

81
00:02:24.160 --> 00:02:27.050
some of the older browsers these 

82
00:02:27.250 --> 00:02:29.860
items if I console.log it, this 

83
00:02:29.935 --> 00:02:31.860
is, it looks like an array but 

84
00:02:31.930 --> 00:02:34.040
what is it? It's a NodeList and 

85
00:02:34.115 --> 00:02:36.890
NodeList doesn't have methods 

86
00:02:37.000 --> 00:02:39.040
like map() and filter() and all 

87
00:02:39.115 --> 00:02:40.080
of the things that we're using, 

88
00:02:40.090 --> 00:02:42.210
so it's not a true array, it is 

89
00:02:42.220 --> 00:02:44.940
just a NodeList. While this is 

90
00:02:44.950 --> 00:02:46.360
changing, not all browsers 

91
00:02:46.370 --> 00:02:47.720
support all of the methods that 

92
00:02:47.795 --> 00:02:49.420
we want to use, so in order to 

93
00:02:49.430 --> 00:02:51.300
convert it to a true array we 

94
00:02:51.310 --> 00:02:52.900
can just wrap the entire thing 

95
00:02:52.910 --> 00:02:55.210
in array.from or any of the 

96
00:02:55.220 --> 00:02:57.320
other favorite convert to arrays 

97
00:02:58.090 --> 00:02:59.720
things there and that is going 

98
00:02:59.730 --> 00:03:01.350
to make it a true array logic. 

99
00:03:01.360 --> 00:03:03.500
Give it a refresh, open it up. 

100
00:03:03.575 --> 00:03:06.060
You see now the prototype is an 

101
00:03:06.070 --> 00:03:08.290
array not a NodeList, but we 

102
00:03:08.365 --> 00:03:09.820
still have all the items there. 

103
00:03:09.820 --> 00:03:11.660
Now we have these items variable 

104
00:03:11.670 --> 00:03:13.880
here and let's move through all 

105
00:03:13.955 --> 00:03:15.020
of the ones. The first one is 

106
00:03:15.240 --> 00:03:17.880
filter() only for the items that 

107
00:03:17.955 --> 00:03:19.610
contain the word flexboxes. 

108
00:03:19.660 --> 00:03:21.030
Maybe I have some jumbled videos 

109
00:03:21.040 --> 00:03:22.100
in here that I don't want to add 

110
00:03:22.100 --> 00:03:23.950
up. The ones that have redux on 

111
00:03:23.960 --> 00:03:25.150
them and my selector wasn't 

112
00:03:26.510 --> 00:03:28.270
smart enough to look for 

113
00:03:28.280 --> 00:03:29.790
anything, the class or redux, as 

114
00:03:29.790 --> 00:03:30.950
we didn't have the data in that 

115
00:03:31.060 --> 00:03:32.910
situation. We'll say const 

116
00:03:32.985 --> 00:03:40.200
filtered = items.filter and we 

117
00:03:40.230 --> 00:03:42.330
can use an arrow function here 

118
00:03:42.920 --> 00:03:44.680
where we are only going to 

119
00:03:44.310 --> 00:03:46.780
return it if the items, text 

120
00:03:46.790 --> 00:03:51.730
content includes -- text content 

121
00:03:51.730 --> 00:03:52.710
is  case -- the 

122
00:03:54.350 --> 00:03:57.610
word flexbox, so that should, we 

123
00:03:57.620 --> 00:03:58.940
take this filtered variable. 

124
00:03:59.015 --> 00:03:59.770
Let's go all the way to the 

125
00:03:59.780 --> 00:04:01.570
bottom here in console.log() 

126
00:04:01.645 --> 00:04:02.430
filter(), because we're just 

127
00:04:02.430 --> 00:04:03.170
going to be changing this 

128
00:04:03.180 --> 00:04:05.960
filtered variable as we go. We 

129
00:04:07.110 --> 00:04:10.600
had 20, now we've got 15, good. 

130
00:04:10.630 --> 00:04:11.960
We've got our 15 items that I've 

131
00:04:11.960 --> 00:04:13.060
filtered down. What I'm going 

132
00:04:13.220 --> 00:04:15.480
to do is I'm also going to just 

133
00:04:15.480 --> 00:04:16.750
put this on its own line, 

134
00:04:16.760 --> 00:04:17.680
because we're going to be 

135
00:04:17.680 --> 00:04:19.240
chaining this filter(), map(), 

136
00:04:19.250 --> 00:04:20.780
map(), and reduce() functions on 

137
00:04:20.790 --> 00:04:22.160
each other, so I just like to 

138
00:04:22.170 --> 00:04:23.950
have them each on their own line. 

139
00:04:24.350 --> 00:04:25.830
The next step is map down to a 

140
00:04:25.840 --> 00:04:27.650
list of time strings. This is 

141
00:04:27.660 --> 00:04:31.030
just a list of elements. We 

142
00:04:31.030 --> 00:04:32.280
don't need the entire element. 

143
00:04:32.290 --> 00:04:35.080
We just need that one piece of 

144
00:04:35.090 --> 00:04:36.970
data which is the data-time 

145
00:04:36.980 --> 00:04:38.700
attribute. How do we do that? 

146
00:04:38.900 --> 00:04:40.350
Map() will take in a list of 

147
00:04:40.360 --> 00:04:41.560
things and convert it into a 

148
00:04:41.570 --> 00:04:43.610
list of other things. We want to 

149
00:04:43.685 --> 00:04:47.170
take in the item and we want to 

150
00:04:46.320 --> 00:04:49.160
return the item.dataset.time. 

151
00:04:49.235 --> 00:04:51.890
Why? Because that's going to 

152
00:04:51.890 --> 00:04:55.220
give us data-time, so now I 

153
00:04:55.230 --> 00:04:57.910
think if we refresh we should 

154
00:04:57.920 --> 00:05:00.480
now see an array. Error on 40 

155
00:05:03.010 --> 00:05:06.220
item.days.time, I got it, 

156
00:05:06.295 --> 00:05:07.820
semicolon, I shouldn't have 

157
00:05:07.230 --> 00:05:08.580
stopped my line there, because 

158
00:05:08.590 --> 00:05:10.100
we're chaining these line over 

159
00:05:10.110 --> 00:05:12.520
lines, so I shouldn't have that 

160
00:05:12.595 --> 00:05:13.790
semicolon there. Now, I've got 

161
00:05:13.800 --> 00:05:16.710
an array of still 15 items, but 

162
00:05:16.720 --> 00:05:18.460
now we have a string of the time 

163
00:05:18.670 --> 00:05:19.750
which is the problem in our next 

164
00:05:19.760 --> 00:05:22.110
one which is map() to an array 

165
00:05:22.120 --> 00:05:25.350
of seconds. We can use map() 

166
00:05:25.425 --> 00:05:27.710
again and let's just say we'll 

167
00:05:27.785 --> 00:05:33.040
call it timecode. We can't just 

168
00:05:33.050 --> 00:05:34.530
use an implicit return here like 

169
00:05:34.540 --> 00:05:35.770
we've done here. We don't have 

170
00:05:35.780 --> 00:05:36.900
curly brackets, we don't have 

171
00:05:36.910 --> 00:05:38.350
the return keyword, because 

172
00:05:38.425 --> 00:05:39.930
we're just doing one quick thing. 

173
00:05:40.230 --> 00:05:41.780
Over here we need to use a full 

174
00:05:41.790 --> 00:05:42.650
block because we are going to do 

175
00:05:42.660 --> 00:05:44.400
a couple of things here. First 

176
00:05:44.400 --> 00:05:47.300
of all we need to separate the 

177
00:05:47.310 --> 00:05:49.800
string into minutes and seconds. 

178
00:05:50.050 --> 00:05:51.590
I'm going to make a variable 

179
00:05:51.600 --> 00:05:53.580
called parts, and that is going 

180
00:05:53.590 --> 00:05:56.870
to be time code.split, and we're 

181
00:05:56.945 --> 00:05:58.510
going to split it on the colon. 

182
00:05:59.300 --> 00:06:00.560
I think if we just said console.

183
00:06:00.650 --> 00:06:03.120
log the parts...Let's see what 

184
00:06:03.210 --> 00:06:04.660
we got here, timecode, timecode 

185
00:06:08.180 --> 00:06:10.270
again, make sure we got your 

186
00:06:10.270 --> 00:06:11.100
 case correct. 

187
00:06:12.370 --> 00:06:13.710
We're getting an array now of 

188
00:06:13.720 --> 00:06:16.160
two parts. First piece is going 

189
00:06:16.170 --> 00:06:18.320
to be the full number of minutes, 

190
00:06:18.500 --> 00:06:19.840
the second piece is going to be 

191
00:06:19.850 --> 00:06:22.080
the full number of seconds. 

192
00:06:22.670 --> 00:06:24.230
This is still a string and you 

193
00:06:24.240 --> 00:06:25.800
know that we can't do math with 

194
00:06:25.810 --> 00:06:27.870
a string, so we can actually 

195
00:06:27.880 --> 00:06:29.710
just work on this, this .split 

196
00:06:29.720 --> 00:06:31.440
returns an array. Why don't we 

197
00:06:31.450 --> 00:06:34.790
just map that array immediately 

198
00:06:35.120 --> 00:06:36.850
and take that part and return 

199
00:06:37.030 --> 00:06:40.660
parse float of that part. What 

200
00:06:40.660 --> 00:06:41.360
that's going to do is it's going 

201
00:06:41.360 --> 00:06:43.370
to take in string of 8 and 

202
00:06:43.445 --> 00:06:45.770
return number 8. It's going to 

203
00:06:43.900 --> 00:06:45.790
take in string 22, return number 

204
00:06:45.865 --> 00:06:49.350
22. Now if you refresh, lately 

205
00:06:49.360 --> 00:06:50.910
they just turned blue and that 

206
00:06:50.920 --> 00:06:52.430
means that they are true numbers 

207
00:06:52.440 --> 00:06:54.240
and no longer strings. That was 

208
00:06:54.250 --> 00:06:56.200
a little arrow function inside 

209
00:06:56.210 --> 00:06:57.210
of an arrow function here, 

210
00:06:57.420 --> 00:06:58.550
that's the beauty of this arrow 

211
00:06:58.625 --> 00:06:59.540
function is you can just do 

212
00:06:59.550 --> 00:07:01.290
quick little things like that on 

213
00:07:01.300 --> 00:07:03.240
a single line without having to 

214
00:07:03.250 --> 00:07:04.820
really worry about setting up an 

215
00:07:04.830 --> 00:07:06.770
entire function for us. That's 

216
00:07:06.770 --> 00:07:07.580
good. I'm going to move this 

217
00:07:07.690 --> 00:07:11.040
console.log here. We've got an 

218
00:07:11.115 --> 00:07:15.650
array of minutes and seconds and 

219
00:07:15.660 --> 00:07:17.740
we need to just return from this 

220
00:07:17.750 --> 00:07:20.160
map(). We need to return the 

221
00:07:20.170 --> 00:07:23.360
parts zero, the first thing, 

222
00:07:23.435 --> 00:07:25.240
times 60, is we want to return 

223
00:07:25.250 --> 00:07:27.950
second in total. Plus we just 

224
00:07:27.980 --> 00:07:29.970
want to return the number of 

225
00:07:29.980 --> 00:07:32.070
seconds, so parts of 60 plus 

226
00:07:32.560 --> 00:07:36.560
parts one. Now our time code 

227
00:07:36.570 --> 00:07:39.250
should be -- we've got an array 

228
00:07:39.260 --> 00:07:40.510
of just seconds, seconds, 

229
00:07:40.520 --> 00:07:42.700
seconds, seconds, seconds. Final 

230
00:07:42.710 --> 00:07:45.340
thing we need to do is reduce to 

231
00:07:45.350 --> 00:07:47.970
get the actual total here. 

232
00:07:48.660 --> 00:07:50.440
Reduce takes two arguments, 

233
00:07:50.860 --> 00:07:52.190
first one is going to be our 

234
00:07:52.200 --> 00:07:53.870
function which will give us the 

235
00:07:53.880 --> 00:07:56.970
running total and the actual 

236
00:07:57.520 --> 00:08:00.520
seconds number. Then it also -- 

237
00:08:00.590 --> 00:08:02.540
that's the function here, and 

238
00:08:02.540 --> 00:08:03.480
I'll leave that right there -- 

239
00:08:03.930 --> 00:08:05.420
takes a number to start with. 

240
00:08:06.370 --> 00:08:07.710
Even though we don't technically 

241
00:08:07.720 --> 00:08:08.760
need that in this case let's 

242
00:08:08.770 --> 00:08:10.000
keep it there just so we know 

243
00:08:10.010 --> 00:08:11.280
that we're starting with zero. 

244
00:08:11.590 --> 00:08:13.560
We go on, and then from our 

245
00:08:13.570 --> 00:08:14.950
arrow function we are going to 

246
00:08:14.960 --> 00:08:16.730
just return the running total 

247
00:08:17.130 --> 00:08:19.220
plus the seconds for this 

248
00:08:19.230 --> 00:08:20.870
current one. I'll give that a 

249
00:08:21.000 --> 00:08:25.680
save, 6,132 seconds that's where 

250
00:08:25.690 --> 00:08:27.160
we are at. I probably would have 

251
00:08:27.170 --> 00:08:28.280
another function that would take 

252
00:08:28.290 --> 00:08:29.900
in the seconds and then convert 

253
00:08:29.910 --> 00:08:30.830
that to hours, minutes, and 

254
00:08:30.840 --> 00:08:31.720
seconds and display it, but 

255
00:08:31.730 --> 00:08:33.930
that's a whole another exercise 

256
00:08:33.940 --> 00:08:35.610
on itself. That's really what 

257
00:08:35.620 --> 00:08:37.560
we wanted to do there as we just 

258
00:08:37.570 --> 00:08:39.940
did one thing. We took this huge 

259
00:08:39.950 --> 00:08:42.320
list of DOM elements converted 

260
00:08:42.330 --> 00:08:43.660
it all the way down, distilled 

261
00:08:43.670 --> 00:08:44.940
it all the way done just to a 

262
00:08:44.950 --> 00:08:46.760
number of seconds. That is the 

263
00:08:46.770 --> 00:08:48.180
first one, let's take a look at 

264
00:08:48.190 --> 00:08:50.130
the second one now. Exercise two, 

265
00:08:50.140 --> 00:08:51.130
should be a piece of cake for 

266
00:08:51.140 --> 00:08:52.980
you now. That's just one line of 

267
00:08:52.990 --> 00:08:54.100
code, so what we're going to say 

268
00:08:54.100 --> 00:08:55.950
is we're going to say const 

269
00:08:55.620 --> 00:08:58.750
large equals numbers.filter, and 

270
00:08:58.750 --> 00:09:00.840
we want to return the number if 

271
00:09:00.850 --> 00:09:03.970
it is larger than 70, if not 

272
00:09:04.100 --> 00:09:04.770
then we don't want to do 

273
00:09:04.770 --> 00:09:07.080
anything. We get the number and 

274
00:09:07.090 --> 00:09:09.420
we run a function where it says 

275
00:09:09.430 --> 00:09:12.540
number is greater than 70. If 

276
00:09:12.550 --> 00:09:14.080
the number is greater than 70 

277
00:09:14.155 --> 00:09:15.380
that will be true and therefore, 

278
00:09:15.390 --> 00:09:16.810
it will make it into the large 

279
00:09:17.040 --> 00:09:19.220
if not it won't make it. We got 

280
00:09:19.240 --> 00:09:23.170
there, good to go, one-liner. 

281
00:09:23.490 --> 00:09:25.710
I'm really happy with that. 

282
00:09:25.710 --> 00:09:26.680
Hopefully those exercises were 

283
00:09:26.680 --> 00:09:27.840
good for you. Let's keep going 

284
00:09:27.850 --> 00:09:28.850
with the rest of ES6.

