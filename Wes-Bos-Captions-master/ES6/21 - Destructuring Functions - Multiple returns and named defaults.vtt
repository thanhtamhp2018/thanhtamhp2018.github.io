WEBVTT

1
00:00:02.770 --> 00:00:02.950
 Instructor: There's a 

2
00:00:02.950 --> 00:00:03.970
couple of other things we can do 

3
00:00:03.970 --> 00:00:06.000
with destructuring, and they all 

4
00:00:06.010 --> 00:00:07.620
are related to functions. 

5
00:00:07.695 --> 00:00:08.740
They're actually very handy. 

6
00:00:08.800 --> 00:00:09.880
Let's go through this function 

7
00:00:09.890 --> 00:00:11.460
really quickly. It's a convert 

8
00:00:11.470 --> 00:00:12.710
currency function that takes an 

9
00:00:12.720 --> 00:00:14.780
amount, like 100 bucks, and it's 

10
00:00:14.480 --> 00:00:17.580
going to return an object that 

11
00:00:17.590 --> 00:00:19.840
has US, pounds, Australian 

12
00:00:19.850 --> 00:00:21.950
dollars, and Mexican bucks, 

13
00:00:21.960 --> 00:00:26.280
pesos. We run it here with $

14
00:00:26.355 --> 00:00:27.320
100 Canadian, and it's going to 

15
00:00:27.330 --> 00:00:29.380
return to me this object here. 

16
00:00:29.390 --> 00:00:31.370
When I console.log that object 

17
00:00:31.750 --> 00:00:33.050
we see that we have all these 

18
00:00:33.060 --> 00:00:34.410
values here. Pretty simple. 

19
00:00:35.070 --> 00:00:36.850
Previously, if I wanted to get 

20
00:00:36.880 --> 00:00:38.280
the Australian dollars I would 

21
00:00:38.280 --> 00:00:41.120
say .AUD, and then if I also 

22
00:00:41.130 --> 00:00:44.530
wanted to get the Mexican pesos 

23
00:00:44.540 --> 00:00:46.650
I would .MEX and I would get 

24
00:00:46.660 --> 00:00:48.310
those values like that. However 

25
00:00:48.630 --> 00:00:51.070
with destructuring, you can sort 

26
00:00:51.390 --> 00:00:53.860
of return multiple values from a 

27
00:00:53.920 --> 00:00:55.430
function. What I mean by 

28
00:00:55.440 --> 00:00:57.170
that is you can't really return 

29
00:00:57.180 --> 00:00:58.900
multiple values, but you can 

30
00:00:59.210 --> 00:01:01.210
return an object and destructure 

31
00:01:01.285 --> 00:01:04.130
the answer from that. Rather 

32
00:01:04.140 --> 00:01:06.650
than just console.loging hundo, 

33
00:01:05.850 --> 00:01:07.210
I'm going to destructure 

34
00:01:08.900 --> 00:01:10.620
immediately as it comes back, 

35
00:01:11.010 --> 00:01:16.170
and say USD, GBP, AUD, and MEX. 

36
00:01:16.610 --> 00:01:17.480
Now I should be able to take 

37
00:01:17.530 --> 00:01:18.790
these values and console.log 

38
00:01:18.800 --> 00:01:21.380
them individually, and you know 

39
00:01:21.450 --> 00:01:22.740
that we get them. If I type one 

40
00:01:22.750 --> 00:01:25.400
of them in here, I see them 

41
00:01:25.440 --> 00:01:26.960
individual, so it didn't need 

42
00:01:26.970 --> 00:01:29.680
that variable with all the 

43
00:01:29.690 --> 00:01:31.630
properties on it. I can 

44
00:01:31.705 --> 00:01:32.670
destructure them all into four 

45
00:01:32.680 --> 00:01:34.030
separate values as I want. 

46
00:01:34.300 --> 00:01:35.590
Another cool thing about it is 

47
00:01:35.600 --> 00:01:37.710
that you do not need to care 

48
00:01:37.720 --> 00:01:39.180
about the order in which they 

49
00:01:39.190 --> 00:01:40.810
come out, because it's just an 

50
00:01:40.820 --> 00:01:43.700
object, so I could put this in 

51
00:01:43.710 --> 00:01:45.020
any order that I would want and 

52
00:01:45.030 --> 00:01:46.610
it would still work just fine. 

53
00:01:47.400 --> 00:01:49.280
Especially what's cool is that 

54
00:01:49.355 --> 00:01:52.040
if you only need Australian and 

55
00:01:52.040 --> 00:01:54.390
US, you just don't need to 

56
00:01:54.465 --> 00:01:55.190
destructure the rest of them, 

57
00:01:55.510 --> 00:01:56.830
and they will never show their 

58
00:01:56.980 --> 00:01:58.180
face. They're simply just going 

59
00:01:58.190 --> 00:02:00.510
to be returned for this function 

60
00:02:00.950 --> 00:02:02.070
and destructured immediately. 

61
00:02:01.800 --> 00:02:03.820
The other two will just be 

62
00:02:03.830 --> 00:02:05.600
thrown out. I can console log 

63
00:02:05.675 --> 00:02:07.930
USD and Australian dollars here. 

64
00:02:09.940 --> 00:02:10.700
Cool. That's two things 

65
00:02:10.710 --> 00:02:12.270
there, where you can return 

66
00:02:12.280 --> 00:02:13.900
multiple values as well as pick 

67
00:02:13.910 --> 00:02:16.030
and choose the pieces that you 

68
00:02:16.040 --> 00:02:17.580
want returned from a function. 

69
00:02:18.140 --> 00:02:20.200
The other one is default named 

70
00:02:20.200 --> 00:02:21.230
arguments. We already went 

71
00:02:21.240 --> 00:02:23.060
through that last example, where 

72
00:02:23.110 --> 00:02:25.510
we had a function called a tip 

73
00:02:25.520 --> 00:02:28.020
calculator. We had the total, 

74
00:02:28.390 --> 00:02:30.420
and we had the tip, and we set 

75
00:02:30.430 --> 00:02:32.600
that to default 15 percent, and 

76
00:02:32.675 --> 00:02:34.350
then we had the tax, which we 

77
00:02:34.360 --> 00:02:37.220
set to default 013. That 

78
00:02:37.230 --> 00:02:39.440
works well, because we know that 

79
00:02:39.450 --> 00:02:40.590
the first thing is going to be 

80
00:02:40.600 --> 00:02:42.230
total, second thing is going to 

81
00:02:41.840 --> 00:02:43.560
be tip, or was it tax? I don't 

82
00:02:43.570 --> 00:02:45.150
even know now. Then the third 

83
00:02:45.160 --> 00:02:47.670
one was tip or tax. You see, I'm 

84
00:02:47.745 --> 00:02:48.570
already getting confuse as to 

85
00:02:48.920 --> 00:02:50.240
the order. Which order should I 

86
00:02:50.700 --> 00:02:51.920
actually put them in? I might 

87
00:02:51.930 --> 00:02:53.640
end up tipping too much, or 

88
00:02:53.650 --> 00:02:55.160
maybe not enough. There's 

89
00:02:55.160 --> 00:02:56.520
some things we can do to make 

90
00:02:56.530 --> 00:02:58.230
this order independent. The 

91
00:02:58.240 --> 00:02:59.040
first thing I'm going to do is 

92
00:02:59.050 --> 00:03:00.870
just finish off this function 

93
00:03:00.880 --> 00:03:03.290
here and return to total, the 

94
00:03:03.300 --> 00:03:04.640
tip times the total, and tax 

95
00:03:04.650 --> 00:03:06.320
times the total. Then I'm 

96
00:03:06.330 --> 00:03:08.280
going to wrap these three 

97
00:03:08.370 --> 00:03:10.380
arguments in curly brackets. 

98
00:03:10.390 --> 00:03:11.890
What that's going to do is that, 

99
00:03:12.150 --> 00:03:15.160
when we pass in an object it's 

100
00:03:15.170 --> 00:03:16.780
going to destructure them into 

101
00:03:16.790 --> 00:03:18.410
three variables total, tip, and 

102
00:03:18.420 --> 00:03:19.660
tax, so it is not like we're 

103
00:03:19.660 --> 00:03:20.960
going to have to say options.

104
00:03:20.960 --> 00:03:23.060
total, options.tip. It's going 

105
00:03:23.670 --> 00:03:24.470
to destructure them into three 

106
00:03:24.480 --> 00:03:27.030
variables available inside of 

107
00:03:27.040 --> 00:03:28.860
this actual function. Then 

108
00:03:28.870 --> 00:03:30.800
when we call it, we simply run 

109
00:03:30.875 --> 00:03:34.140
tipCalc and we pass it an object 

110
00:03:34.150 --> 00:03:36.120
with the total value. Maybe 

111
00:03:36.130 --> 00:03:39.720
that's going to be $200. We pass 

112
00:03:39.730 --> 00:03:43.840
the tip at 02 and we pass the 

113
00:03:43.850 --> 00:03:48.780
tax at 013, or whatever it is. 

114
00:03:48.855 --> 00:03:50.970
I'm going to put that in a 

115
00:03:51.510 --> 00:03:54.170
variable, give this a refresh. 

116
00:03:54.180 --> 00:03:55.760
Now we've got $266. That's the 

117
00:03:55.770 --> 00:03:57.630
total. But what is really 

118
00:03:57.640 --> 00:03:58.760
important here is, first of all, 

119
00:03:58.770 --> 00:04:00.830
I can leave off things. We don't 

120
00:04:00.840 --> 00:04:02.670
have to pass that undefined sort 

121
00:04:02.680 --> 00:04:04.570
of hole-filler, if it's in the 

122
00:04:04.580 --> 00:04:06.920
middle. Still works just fine. 

123
00:04:06.930 --> 00:04:09.020
The default tax is going to kick 

124
00:04:09.030 --> 00:04:10.870
in, as well as, I can put them 

125
00:04:10.880 --> 00:04:12.580
in any order that I please. 

126
00:04:12.590 --> 00:04:13.870
Maybe I want to put the tip 

127
00:04:13.970 --> 00:04:15.900
first and the total goes second. 

128
00:04:16.510 --> 00:04:18.690
It still works just as we want. 

129
00:04:18.850 --> 00:04:20.690
We're passing in an object here, 

130
00:04:20.940 --> 00:04:22.040
and it's getting destructured, 

131
00:04:22.860 --> 00:04:25.010
as well as, if we leave the one 

132
00:04:25.020 --> 00:04:26.550
out from the object that we pass 

133
00:04:26.560 --> 00:04:28.660
in, the defaults are filling 

134
00:04:28.670 --> 00:04:30.450
themselves in. One last 

135
00:04:30.460 --> 00:04:33.690
thing is, if you ever are to 

136
00:04:34.320 --> 00:04:36.110
just pass in nothing...Let's say 

137
00:04:36.120 --> 00:04:37.370
if we put a default for the 

138
00:04:37.380 --> 00:04:40.760
total be 100 bucks. This is 

139
00:04:40.930 --> 00:04:42.300
maybe a common order and we 

140
00:04:42.310 --> 00:04:44.490
would want to just run tipCalc. 

141
00:04:46.290 --> 00:04:48.100
What happens here? We get an 

142
00:04:48.170 --> 00:04:49.650
error because it cannot match 

143
00:04:50.030 --> 00:04:51.660
against undefined or null. It's 

144
00:04:52.020 --> 00:04:52.960
a destructuring error, and 

145
00:04:52.970 --> 00:04:54.400
that's because we have passed in 

146
00:04:54.410 --> 00:04:56.150
none of these things. We passed 

147
00:04:56.160 --> 00:04:58.500
in no object for to destructure 

148
00:04:58.200 --> 00:05:00.930
against, so you have to give it, 

149
00:05:00.970 --> 00:05:03.480
itself, a default argument, so 

150
00:05:03.555 --> 00:05:05.010
that if the entire argument 

151
00:05:05.460 --> 00:05:07.920
which is one object, if no 

152
00:05:08.470 --> 00:05:09.840
object is passed it's going to 

153
00:05:09.850 --> 00:05:11.520
default just to a blank object 

154
00:05:11.730 --> 00:05:14.300
and all of the three are going 

155
00:05:14.310 --> 00:05:16.040
to be in. This is a little 

156
00:05:16.040 --> 00:05:17.370
bit of a funky syntax, so it 

157
00:05:17.370 --> 00:05:18.310
takes some times to get 

158
00:05:18.320 --> 00:05:19.810
comfortable with it. Maybe try 

159
00:05:19.820 --> 00:05:21.720
it out throughout your work day, 

160
00:05:21.880 --> 00:05:23.680
but it's definitely worth 

161
00:05:23.730 --> 00:05:25.640
getting used to, because it's 

162
00:05:25.715 --> 00:05:26.690
going to really help you reduce 

163
00:05:26.700 --> 00:05:28.140
a lot of your boilerplate code 

164
00:05:28.150 --> 00:05:29.720
where you're checking for 

165
00:05:29.730 --> 00:05:30.430
defaults.

