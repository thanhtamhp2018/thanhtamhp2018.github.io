WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.340 --> 00:00:03.750
There's a seventh primitive type 

3
00:00:03.750 --> 00:00:05.030
that's been added to JavaScript. 

4
00:00:05.040 --> 00:00:06.070
What are the existing six 

5
00:00:06.080 --> 00:00:07.180
primitive types in JavaScript? 

6
00:00:07.240 --> 00:00:09.020
We got number, string, object, 

7
00:00:09.030 --> 00:00:10.580
Boolean, null, and undefined. 

8
00:00:10.590 --> 00:00:12.030
Now we have a seventh one, which 

9
00:00:12.040 --> 00:00:14.400
is a symbol. Symbols are pretty 

10
00:00:14.410 --> 00:00:15.840
simple, but they take a little 

11
00:00:15.850 --> 00:00:17.000
bit to wrap your head around, 

12
00:00:17.010 --> 00:00:19.150
because I don't think that a lot 

13
00:00:19.150 --> 00:00:20.240
of people were actually asking 

14
00:00:20.250 --> 00:00:21.430
for these things in the language. 

15
00:00:21.440 --> 00:00:23.810
But I can see where it would be 

16
00:00:23.820 --> 00:00:25.880
useful. Symbols are unique 

17
00:00:25.955 --> 00:00:29.180
identifiers. They pretty much 

18
00:00:29.190 --> 00:00:32.080
help us avoid having naming 

19
00:00:32.120 --> 00:00:34.140
collisions. Anytime that you 

20
00:00:34.150 --> 00:00:38.110
want to create a property in a 

21
00:00:38.120 --> 00:00:39.410
unique way, that's when you 

22
00:00:39.420 --> 00:00:41.520
should reach for a symbol. 

23
00:00:42.140 --> 00:00:43.420
Let's take a look at a symbol 

24
00:00:43.495 --> 00:00:45.190
right here. I say const Wes = 

25
00:00:45.470 --> 00:00:47.160
symbol, and then you pass it. 

26
00:00:47.800 --> 00:00:49.070
This is not a value. This is 

27
00:00:49.080 --> 00:00:50.980
what is called a descriptor. The 

28
00:00:50.990 --> 00:00:53.740
symbol itself is just a unique 

29
00:00:53.920 --> 00:00:56.280
identifier. If you were to 

30
00:00:55.570 --> 00:00:57.120
visualize what a symbol would be, 

31
00:00:57.130 --> 00:00:58.460
maybe you could visualize it as 

32
00:00:58.470 --> 00:01:00.540
something like this, "absolute 

33
00:01:00.580 --> 00:01:02.870
unique symbol," so I can make 

34
00:01:02.880 --> 00:01:05.090
sure that it never overrides any 

35
00:01:05.100 --> 00:01:06.820
other piece of code in there. 

36
00:01:07.040 --> 00:01:08.330
This right here, that's just a 

37
00:01:08.340 --> 00:01:09.530
descriptor. Because otherwise, I 

38
00:01:09.540 --> 00:01:10.930
would have no idea what that 

39
00:01:10.940 --> 00:01:12.350
actual thing is, so I've 

40
00:01:12.360 --> 00:01:15.120
described it as Wes here. If we 

41
00:01:15.130 --> 00:01:16.840
go into our console and type in 

42
00:01:16.850 --> 00:01:18.440
Wes, the variable, you'll see 

43
00:01:18.450 --> 00:01:21.370
that it is then a actual symbol. 

44
00:01:21.670 --> 00:01:22.950
What's cool about this is if I 

45
00:01:22.960 --> 00:01:24.850
create a second symbol, like 

46
00:01:24.590 --> 00:01:26.650
person, and I create a symbol 

47
00:01:26.660 --> 00:01:30.910
here with Wes again, are those 

48
00:01:30.920 --> 00:01:31.950
two things going to be the same 

49
00:01:31.960 --> 00:01:33.230
because I described them as the 

50
00:01:33.240 --> 00:01:35.480
same thing? Let's see. Wes, 

51
00:01:35.770 --> 00:01:40.900
person, Wes = person? No. What 

52
00:01:40.910 --> 00:01:43.720
about like ==. No, not allowed 

53
00:01:43.730 --> 00:01:45.500
either. That's one thing that 

54
00:01:45.510 --> 00:01:46.840
you need to know about symbols, 

55
00:01:46.850 --> 00:01:48.800
is they are absolutely unique, 

56
00:01:49.120 --> 00:01:50.700
and you'll never have a naming 

57
00:01:50.710 --> 00:01:52.550
collision with them. That could 

58
00:01:52.560 --> 00:01:55.140
be useful if you were creating 

59
00:01:55.150 --> 00:01:57.330
an object of your class, so I 

60
00:01:57.405 --> 00:01:59.480
say const class =...Don't make 

61
00:01:59.510 --> 00:02:01.360
it class. That's a reserved word. 

62
00:02:01.435 --> 00:02:04.890
Const classroom =, and you 

63
00:02:04.900 --> 00:02:07.820
wanted to name everybody off. 

64
00:02:08.840 --> 00:02:10.720
Maybe you have Mark. You say 

65
00:02:10.795 --> 00:02:16.860
Mark, his grade is a 50, 

66
00:02:16.935 --> 00:02:21.580
and his gender is a male. Then 

67
00:02:21.580 --> 00:02:25.920
you have another, Olivia, grade 

68
00:02:25.930 --> 00:02:28.310
is a 80, gender is 

69
00:02:28.520 --> 00:02:31.120
female. Then you have another 

70
00:02:31.130 --> 00:02:32.450
Olivia, because these days every 

71
00:02:32.460 --> 00:02:34.060
person born is named Olivia. 

72
00:02:34.660 --> 00:02:36.220
You've got a naming collision 

73
00:02:36.260 --> 00:02:38.200
there. You could put some sort 

74
00:02:38.200 --> 00:02:39.980
of guarantee unique identifier 

75
00:02:40.055 --> 00:02:42.120
and hope that they never overlap, 

76
00:02:42.130 --> 00:02:45.220
but that could run into issues, 

77
00:02:45.295 --> 00:02:46.770
especially when you have a lot 

78
00:02:46.780 --> 00:02:48.530
of data. Think about if you were 

79
00:02:48.530 --> 00:02:50.030
doing some 3D work or working 

80
00:02:50.040 --> 00:02:50.980
with Canvas, where you have 

81
00:02:51.020 --> 00:02:52.350
millions and millions of pieces 

82
00:02:52.360 --> 00:02:53.920
of data that you're working with 

83
00:02:53.930 --> 00:02:56.050
at a single time. Rather than 

84
00:02:56.060 --> 00:02:58.040
using the person's name or some 

85
00:02:58.050 --> 00:02:59.850
sort of unique identifier, we 

86
00:02:59.860 --> 00:03:03.720
can use a symbol to name them. 

87
00:03:04.180 --> 00:03:08.740
Here, we'll say symbol of Mark 

88
00:03:10.100 --> 00:03:14.080
is this one. Then we'll do the 

89
00:03:14.090 --> 00:03:15.640
same for both of the Olivias... 

90
00:03:15.640 --> 00:03:20.540
 The square bracket 

91
00:03:20.550 --> 00:03:27.010
symbol Olivia. Even though these 

92
00:03:27.020 --> 00:03:29.250
are the exact same things, now 

93
00:03:29.710 --> 00:03:30.480
they're not going to be 

94
00:03:30.490 --> 00:03:32.410
overwritten if we refresh. Now, 

95
00:03:32.420 --> 00:03:34.730
if you look at classroom, you'll 

96
00:03:34.760 --> 00:03:37.010
see that we've got symbol, 

97
00:03:37.070 --> 00:03:39.250
symbol, symbol, and you would be 

98
00:03:38.560 --> 00:03:40.540
able to see them. Another thing 

99
00:03:40.550 --> 00:03:42.780
we need to know about symbols is 

100
00:03:42.790 --> 00:03:44.530
that they're not enumerable, 

101
00:03:44.310 --> 00:03:45.630
which means that we cannot loop 

102
00:03:45.640 --> 00:03:47.290
over them. Watch, if I were to 

103
00:03:47.365 --> 00:03:52.380
do use form person in 

104
00:03:52.690 --> 00:03:54.970
classroom...Remember, I'm not 

105
00:03:54.970 --> 00:03:56.360
using "person of" because you 

106
00:03:56.370 --> 00:03:58.990
cannot use "of" within object in 

107
00:03:59.065 --> 00:04:00.890
order to console log the person, 

108
00:04:03.320 --> 00:04:05.130
I get nothing. Why? Because 

109
00:04:05.140 --> 00:04:07.250
symbols aren't enumerable. For 

110
00:04:07.260 --> 00:04:08.630
that reason, sometimes people 

111
00:04:08.640 --> 00:04:10.430
use them to store private data, 

112
00:04:10.650 --> 00:04:11.900
because you're never going to be 

113
00:04:11.910 --> 00:04:13.520
looping over any of your symbols. 

114
00:04:14.000 --> 00:04:15.600
Maybe if you had information 

115
00:04:15.610 --> 00:04:16.660
about someone that you didn't 

116
00:04:16.670 --> 00:04:18.440
want to be looping over, you 

117
00:04:18.450 --> 00:04:20.730
could store that data in an 

118
00:04:20.740 --> 00:04:22.490
actual symbol. If you do want 

119
00:04:22.565 --> 00:04:23.940
to get access to all of your 

120
00:04:23.950 --> 00:04:24.870
symbols, because obviously 

121
00:04:24.870 --> 00:04:26.190
there's some information that 

122
00:04:26.190 --> 00:04:27.700
you would want to get here, you 

123
00:04:27.560 --> 00:04:29.220
can use the object method, get 

124
00:04:32.270 --> 00:04:34.060
own property symbols. I'll say, 

125
00:04:34.135 --> 00:04:34.860
object.getOwnPropertySymbols, 

126
00:04:33.270 --> 00:04:35.380
and then you pass it, the object 

127
00:04:35.390 --> 00:04:36.490
you want to grab all of the 

128
00:04:36.500 --> 00:04:38.130
symbols off of, so pass it 

129
00:04:38.140 --> 00:04:40.010
classroom here. I'll just say 

130
00:04:40.085 --> 00:04:42.010
const syms =, and then we'll 

131
00:04:42.960 --> 00:04:44.970
console log the syms. Let's see 

132
00:04:45.045 --> 00:04:47.350
what we got here. What that 

133
00:04:47.360 --> 00:04:49.720
gives is an array of just the 

134
00:04:49.730 --> 00:04:51.810
symbols themselves. Remember 

135
00:04:51.820 --> 00:04:53.940
that the symbols aren't the 

136
00:04:53.950 --> 00:04:56.160
actual object here. The symbols 

137
00:04:56.170 --> 00:04:58.500
are just the property keys that 

138
00:04:58.510 --> 00:05:00.630
are inside of classroom. How do 

139
00:05:00.705 --> 00:05:01.660
I actually get the data? There's 

140
00:05:01.670 --> 00:05:04.200
no data in here at all, and look, 

141
00:05:04.210 --> 00:05:05.740
these two things are exactly the 

142
00:05:05.750 --> 00:05:08.820
same. But if I were to then take 

143
00:05:08.930 --> 00:05:11.000
all of my syms, symbols, let's 

144
00:05:11.075 --> 00:05:14.700
say const data =, I can map over 

145
00:05:14.710 --> 00:05:17.780
each of those symbols, and take 

146
00:05:17.950 --> 00:05:21.390
each symbol and return classroom 

147
00:05:22.580 --> 00:05:24.170
square bracket sym. Why? 

148
00:05:24.360 --> 00:05:25.400
Because the symbol is the 

149
00:05:25.410 --> 00:05:26.890
equivalent of something like 

150
00:05:26.950 --> 00:05:28.630
that, and it's going to be able 

151
00:05:28.640 --> 00:05:30.320
to pull back Mark, Olivia, and 

152
00:05:30.330 --> 00:05:31.430
Olivia, even though these two 

153
00:05:31.440 --> 00:05:34.280
things are exactly the same. By 

154
00:05:34.290 --> 00:05:36.450
using that symbol as the 

155
00:05:36.460 --> 00:05:38.670
property key, I'm now going to 

156
00:05:38.680 --> 00:05:40.680
be able to access my data. Let's 

157
00:05:40.755 --> 00:05:42.270
see it console log the data here. 

158
00:05:43.410 --> 00:05:45.300
There, that's how you actually 

159
00:05:45.310 --> 00:05:47.450
get it. A little bit of a 

160
00:05:47.525 --> 00:05:48.790
workaround, but if you do need 

161
00:05:48.800 --> 00:05:51.110
to ever store some private data, 

162
00:05:51.220 --> 00:05:52.900
or you want to make sure that 

163
00:05:52.910 --> 00:05:54.710
your keys in your object are 

164
00:05:54.760 --> 00:05:56.360
absolutely unique, that's when 

165
00:05:56.370 --> 00:05:57.530
you should reach for a symbol.

