WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:00.030 --> 00:00:03.650
The way that we write JavaScript 

3
00:00:03.710 --> 00:00:05.190
applications is changing. 

4
00:00:05.250 --> 00:00:07.030
Previously, what we would do is 

5
00:00:07.030 --> 00:00:08.220
have maybe a couple of script 

6
00:00:08.290 --> 00:00:09.800
tags in the body of our document, 

7
00:00:10.040 --> 00:00:11.520
and maybe load in jQuery in our 

8
00:00:11.520 --> 00:00:13.330
own JavaScript, or maybe we had 

9
00:00:13.330 --> 00:00:14.770
a build process where we would 

10
00:00:15.030 --> 00:00:16.640
concatenate and minify all of 

11
00:00:16.640 --> 00:00:18.260
JavaScript together. However, 

12
00:00:18.260 --> 00:00:19.420
with ES6, it's starting to 

13
00:00:19.420 --> 00:00:21.310
become popular to pick up what's 

14
00:00:21.310 --> 00:00:23.130
called JavaScript modules. Now, 

15
00:00:23.130 --> 00:00:24.580
this is not new to JavaScript, 

16
00:00:24.580 --> 00:00:26.340
however, with ES6 we're seeing 

17
00:00:26.450 --> 00:00:28.200
everybody sort of uptake it. 

18
00:00:28.580 --> 00:00:29.940
What is a JavaScript module? 

19
00:00:30.030 --> 00:00:31.470
It's essentially just a file 

20
00:00:31.790 --> 00:00:33.720
with one or many functions 

21
00:00:33.720 --> 00:00:35.380
inside of it and then you can 

22
00:00:35.380 --> 00:00:37.160
make those functions available 

23
00:00:37.420 --> 00:00:39.040
to other files. You can make 

24
00:00:39.040 --> 00:00:40.200
those functions available to 

25
00:00:40.200 --> 00:00:42.050
other applications. You can also 

26
00:00:42.050 --> 00:00:44.790
use people's existing modules. 

27
00:00:45.100 --> 00:00:46.500
Instead of using a script tag 

28
00:00:46.500 --> 00:00:47.810
and having a whole bunch of 

29
00:00:47.810 --> 00:00:49.790
global variables, what we do is 

30
00:00:49.790 --> 00:00:52.160
we import things from existing 

31
00:00:52.160 --> 00:00:53.700
modules. Right here, I've got 

32
00:00:54.220 --> 00:00:55.890
three import statements where 

33
00:00:56.140 --> 00:00:58.430
maybe I need a slug library. 

34
00:00:58.910 --> 00:01:00.310
Instead of finding one and using 

35
00:01:00.310 --> 00:01:02.280
a script tag, I did an npm 

36
00:01:02.280 --> 00:01:03.480
install -- we'll look at how to 

37
00:01:03.480 --> 00:01:05.200
do that -- and I import slug 

38
00:01:05.200 --> 00:01:06.890
from slug. Maybe you're using a 

39
00:01:06.890 --> 00:01:08.730
utility library, like Lodash, 

40
00:01:08.730 --> 00:01:09.900
and you need to pull in a couple 

41
00:01:09.900 --> 00:01:11.240
of the methods that you 

42
00:01:11.240 --> 00:01:13.080
explicitly need here in a unique 

43
00:01:13.080 --> 00:01:14.280
 shuffle. I'm 

44
00:01:14.280 --> 00:01:16.080
just importing those two things. 

45
00:01:16.080 --> 00:01:17.160
I'm cherry-picking them in. 

46
00:01:17.570 --> 00:01:19.230
Maybe you're using a slider plug 

47
00:01:19.270 --> 00:01:20.610
where you need to import 

48
00:01:20.610 --> 00:01:22.860
Flickity, import it from the 

49
00:01:22.860 --> 00:01:24.950
package that is called Flickity. 

50
00:01:25.410 --> 00:01:27.110
That is JavaScript modules. We 

51
00:01:27.210 --> 00:01:30.020
are going to dive into how this 

52
00:01:30.020 --> 00:01:31.510
all works, the tooling of all it 

53
00:01:31.510 --> 00:01:33.450
works, how we can create our own 

54
00:01:33.670 --> 00:01:35.100
named exports versus default 

55
00:01:35.100 --> 00:01:37.470
exports. It's a pretty big topic 

56
00:01:37.520 --> 00:01:39.390
to cover, but I think this is 

57
00:01:39.500 --> 00:01:41.630
really crucial to understanding 

58
00:01:41.630 --> 00:01:43.660
how to write modern JavaScript. 

59
00:01:44.120 --> 00:01:45.110
Everything we've been doing so 

60
00:01:45.110 --> 00:01:46.610
far, we've been simply writing 

61
00:01:46.650 --> 00:01:48.590
it in a HTML file and opening it 

62
00:01:48.630 --> 00:01:49.510
up in the browser. That's 

63
00:01:49.530 --> 00:01:51.250
because ES6 has fantastic 

64
00:01:51.250 --> 00:01:52.800
support across all the browsers. 

65
00:01:53.160 --> 00:01:54.740
The one thing where support is 

66
00:01:54.740 --> 00:01:56.060
really lacking, and we're sort 

67
00:01:56.060 --> 00:01:57.850
of seeing browser vendors look 

68
00:01:57.850 --> 00:01:58.610
at how they're going to 

69
00:01:58.670 --> 00:02:01.170
implement it, is ES6 modules. We 

70
00:02:01.220 --> 00:02:03.050
do need some tooling in order to 

71
00:02:03.050 --> 00:02:05.230
actually start using the syntax 

72
00:02:05.530 --> 00:02:07.320
and using the idea of importing 

73
00:02:07.320 --> 00:02:09.440
and exporting modules. What we 

74
00:02:09.440 --> 00:02:12.000
need to do is, first, set up a 

75
00:02:12.060 --> 00:02:13.600
package adjacent file, which is 

76
00:02:13.600 --> 00:02:15.060
going to let us install our 

77
00:02:15.060 --> 00:02:17.010
external dependencies from npm, 

78
00:02:17.010 --> 00:02:18.850
and then we're also going to 

79
00:02:18.850 --> 00:02:20.690
need to use Webpack, which is 

80
00:02:20.690 --> 00:02:22.420
going to bundle up all of our 

81
00:02:22.420 --> 00:02:24.170
JavaScript together. If I 

82
00:02:24.220 --> 00:02:25.520
import a couple libraries, I 

83
00:02:25.620 --> 00:02:26.810
export a couple things, and I 

84
00:02:26.810 --> 00:02:29.030
have maybe seven or eight files, 

85
00:02:29.070 --> 00:02:30.880
it's going to bundle it up into 

86
00:02:31.190 --> 00:02:33.380
a single or multiple files for 

87
00:02:33.380 --> 00:02:35.320
me. What we want to do here is...

88
00:02:35.550 --> 00:02:37.920
I am in the JavaScript modules 

89
00:02:37.920 --> 00:02:40.030
and using npm folder. What I 

90
00:02:40.030 --> 00:02:42.060
want to do is then create a 

91
00:02:42.060 --> 00:02:43.800
second folder inside of that. 

92
00:02:43.800 --> 00:02:45.470
I'm going to type M-K-D-I-R, 

93
00:02:45.470 --> 00:02:47.370
mkdir. You can do this via your 

94
00:02:47.450 --> 00:02:48.990
Winder OL. I'm going to say 

95
00:02:48.990 --> 00:02:52.100
mkdir ES6 modules. I'm going to 

96
00:02:52.560 --> 00:02:55.870
go into ES6 modules. Triple-

97
00:02:55.870 --> 00:02:57.040
check you are in the right 

98
00:02:57.040 --> 00:02:58.900
folder. You should be in a file 

99
00:02:58.900 --> 00:03:01.280
called ES6 modules. Again, I did 

100
00:03:01.280 --> 00:03:02.450
not give you that. You should 

101
00:03:02.450 --> 00:03:05.110
create that yourself. Then we 

102
00:03:05.110 --> 00:03:06.510
need to start things off. Now, 

103
00:03:07.270 --> 00:03:09.040
there are lots of ways to get 

104
00:03:09.080 --> 00:03:11.340
modules. There is Bower and 

105
00:03:11.340 --> 00:03:13.040
there's something called jspm. 

106
00:03:13.430 --> 00:03:15.430
But the pretty standard way to 

107
00:03:15.530 --> 00:03:18.100
do it and what has won out is 

108
00:03:18.580 --> 00:03:20.520
called npm. You probably have 

109
00:03:20.520 --> 00:03:22.660
stumbled upon npm before and 

110
00:03:22.660 --> 00:03:23.780
that's what we're going to use 

111
00:03:23.780 --> 00:03:24.910
to install all of our 

112
00:03:24.910 --> 00:03:26.530
dependencies. What we need to 

113
00:03:26.530 --> 00:03:29.940
do is first create ourselves an 

114
00:03:30.120 --> 00:03:31.870
entry point. I like to call this 

115
00:03:32.130 --> 00:03:34.910
app.js. I'll say touch, app.js. 

116
00:03:34.910 --> 00:03:37.330
Let's see what we got. We just 

117
00:03:37.330 --> 00:03:40.140
have a app.js file so far. Then 

118
00:03:40.140 --> 00:03:42.570
we need to initialize an npm 

119
00:03:43.270 --> 00:03:45.110
package.json, so you just say 

120
00:03:45.210 --> 00:03:48.280
npm init. It's going to ask you 

121
00:03:48.280 --> 00:03:49.690
a series of questions here in 

122
00:03:49.690 --> 00:03:50.830
terms of what would you like to 

123
00:03:50.900 --> 00:03:52.660
call it. You can go ahead and 

124
00:03:52.660 --> 00:03:53.830
fill this out to be whatever you 

125
00:03:53.830 --> 00:03:56.340
want. Really there is not any 

126
00:03:56.340 --> 00:03:57.530
information that you need to put 

127
00:03:57.530 --> 00:03:58.980
in so you can just hit Enter as 

128
00:03:58.980 --> 00:04:01.030
you go on through. We're going 

129
00:04:01.030 --> 00:04:02.660
to go back into that package.

130
00:04:02.820 --> 00:04:04.930
json. If you actually take a 

131
00:04:04.930 --> 00:04:07.440
look here you'll see that our 

132
00:04:07.440 --> 00:04:10.270
ES6 modules now has app.js and 

133
00:04:10.400 --> 00:04:13.100
package.json file. If you open 

134
00:04:13.100 --> 00:04:14.750
up package.json, you'll see that 

135
00:04:14.750 --> 00:04:16.130
it just has some information 

136
00:04:16.170 --> 00:04:18.120
about it. Why that is important 

137
00:04:18.120 --> 00:04:19.410
is because this package that .

138
00:04:19.410 --> 00:04:21.950
json is going to save all of the 

139
00:04:21.950 --> 00:04:23.880
references to the packages that 

140
00:04:23.880 --> 00:04:25.410
we want to install. Let's go 

141
00:04:25.410 --> 00:04:26.410
ahead and try and install a 

142
00:04:26.410 --> 00:04:28.230
couple packages. We'll do npm 

143
00:04:28.230 --> 00:04:30.250
install slug. That's a slug 

144
00:04:30.250 --> 00:04:31.850
library that I like to use if 

145
00:04:31.850 --> 00:04:33.520
you ever need slugs. Let's take 

146
00:04:33.520 --> 00:04:37.810
a look. npm.im/slug. Just a 

147
00:04:37.810 --> 00:04:39.660
library like this where you can 

148
00:04:39.760 --> 00:04:41.620
import a slug library and then 

149
00:04:41.620 --> 00:04:43.250
you simply just use it. Say "I 

150
00:04:43.250 --> 00:04:45.440
love Unicode" and it will return 

151
00:04:45.440 --> 00:04:47.310
to you these nice URL-friendly 

152
00:04:47.360 --> 00:04:49.110
slugs. We'll say npm install 

153
00:04:49.110 --> 00:04:51.730
slug, dash, dash, save. Go ahead 

154
00:04:51.730 --> 00:04:53.620
and install that. What that is 

155
00:04:53.620 --> 00:04:54.900
doing now...if you open up your 

156
00:04:54.900 --> 00:04:57.710
package.json, you will see it 

157
00:04:58.010 --> 00:04:59.620
change. There we go. We have 

158
00:04:59.770 --> 00:05:01.680
dependencies added. Now we have 

159
00:05:02.020 --> 00:05:04.020
slug and also you should see a 

160
00:05:04.020 --> 00:05:06.170
node modules folder pop up. You 

161
00:05:06.170 --> 00:05:07.760
don't really have to look inside 

162
00:05:07.760 --> 00:05:09.240
of here, but what we need to 

163
00:05:09.240 --> 00:05:10.570
know is that it installed a 

164
00:05:10.570 --> 00:05:12.440
library called slug. I got a 

165
00:05:12.440 --> 00:05:13.630
lot of emails with people asking 

166
00:05:13.630 --> 00:05:14.460
me, "Why are there so many 

167
00:05:14.460 --> 00:05:15.950
folders in here?" These other 

168
00:05:15.950 --> 00:05:17.760
folders are just because the 

169
00:05:17.760 --> 00:05:19.980
slug has dependencies of its own 

170
00:05:20.310 --> 00:05:21.670
and these install in a flat 

171
00:05:21.860 --> 00:05:23.770
fashion. Really, don't worry too, 

172
00:05:23.770 --> 00:05:24.980
too much about what's inside of 

173
00:05:24.980 --> 00:05:26.420
this node modules here. Let's 

174
00:05:26.420 --> 00:05:27.590
go ahead install a couple more, 

175
00:05:27.870 --> 00:05:29.920
npm install, Lodash and then 

176
00:05:29.920 --> 00:05:31.530
let's also install Flickity at 

177
00:05:31.530 --> 00:05:33.430
the same time, dash, dash, save 

178
00:05:38.850 --> 00:05:39.520
Now, if we go back to our 

179
00:05:39.520 --> 00:05:40.430
dependencies you see we have 

180
00:05:40.430 --> 00:05:42.720
Flickity, Lodash and slug. If 

181
00:05:42.720 --> 00:05:44.070
you're using jQuery or any other 

182
00:05:44.070 --> 00:05:45.790
library like this, pretty much 

183
00:05:45.870 --> 00:05:47.420
every single JavaScript library 

184
00:05:47.420 --> 00:05:49.570
is available on npm. You can 

185
00:05:49.650 --> 00:05:52.230
install it like this. I'm going 

186
00:05:52.230 --> 00:05:53.400
to close this node modules 

187
00:05:53.400 --> 00:05:54.610
folder. One thing I want to 

188
00:05:54.610 --> 00:05:55.560
tell you is if you ever 

189
00:05:55.560 --> 00:05:56.910
accidentally or on purpose 

190
00:05:56.910 --> 00:05:58.520
delete the node modules folder...

191
00:05:58.770 --> 00:05:59.740
I'll often delete the node 

192
00:05:59.760 --> 00:06:01.020
modules folder on purpose, 

193
00:06:01.020 --> 00:06:02.620
because it is fairly large and I 

194
00:06:02.620 --> 00:06:04.430
run out of computer space. If 

195
00:06:04.430 --> 00:06:05.860
you ever delete it, you simply 

196
00:06:05.860 --> 00:06:07.640
just need to type npm install 

197
00:06:07.730 --> 00:06:09.420
once more. What that does is 

198
00:06:09.420 --> 00:06:10.120
that it will read your 

199
00:06:10.120 --> 00:06:12.140
dependencies in your package at 

200
00:06:12.140 --> 00:06:13.680
json file. It will say, "Oh, I 

201
00:06:13.680 --> 00:06:14.670
need to download Flickity, 

202
00:06:14.670 --> 00:06:16.890
Lodash and slug for it." See how 

203
00:06:16.890 --> 00:06:18.660
it's going to get it. You never 

204
00:06:18.660 --> 00:06:20.570
need to check this node models 

205
00:06:20.570 --> 00:06:22.060
folder and to get...you never 

206
00:06:22.060 --> 00:06:23.380
really need to hang on to it 

207
00:06:23.380 --> 00:06:24.520
unless you're going on a plane 

208
00:06:24.890 --> 00:06:26.660
and need offline access. You can 

209
00:06:26.660 --> 00:06:28.710
always type npm install to get 

210
00:06:29.160 --> 00:06:31.000
that again. Go ahead and 

211
00:06:31.000 --> 00:06:32.350
install a couple more libraries 

212
00:06:32.350 --> 00:06:33.530
that...something that you would 

213
00:06:33.530 --> 00:06:34.670
use. I want you to try this 

214
00:06:34.670 --> 00:06:35.480
with code that you would 

215
00:06:35.480 --> 00:06:37.230
probably use every day. If you 

216
00:06:37.280 --> 00:06:38.690
use jQuery from day to day, do 

217
00:06:39.190 --> 00:06:42.180
npm install, jQuery, dash, dash, 

218
00:06:42.180 --> 00:06:44.000
save. I also use one called 

219
00:06:44.060 --> 00:06:45.440
Insane which is a really nice 

220
00:06:45.550 --> 00:06:48.070
HTML sanitization library, so 

221
00:06:48.360 --> 00:06:50.650
npm, install Insane, dash, dash, 

222
00:06:50.650 --> 00:06:53.000
save. Now when we head over to 

223
00:06:53.000 --> 00:06:54.370
here, you'll see we have Insane 

224
00:06:54.850 --> 00:06:57.180
and jQuery being loaded on up. 

225
00:06:57.540 --> 00:06:59.160
Now we want to go to our app.js 

226
00:06:59.160 --> 00:07:01.720
file, and write some import 

227
00:07:01.720 --> 00:07:04.270
statements. Let's import just 

228
00:07:04.270 --> 00:07:06.480
one of the methods from Lodash, 

229
00:07:06.730 --> 00:07:11.130
so U-N-I-Q from Lodash. We're 

230
00:07:11.130 --> 00:07:12.790
going to go over the syntax here. 

231
00:07:12.850 --> 00:07:13.830
Essentially what I'm doing is 

232
00:07:13.830 --> 00:07:15.150
that I'm importing a named 

233
00:07:15.310 --> 00:07:16.720
export. What is that? We'll 

234
00:07:16.720 --> 00:07:18.070
learn all about it, but you have 

235
00:07:18.070 --> 00:07:19.510
to put curly brackets around it. 

236
00:07:20.000 --> 00:07:21.760
Then also let's also import 

237
00:07:21.970 --> 00:07:25.280
Insane from the Insane library. 

238
00:07:26.290 --> 00:07:28.670
Then let's go over to our 

239
00:07:28.840 --> 00:07:30.270
terminal and install one called 

240
00:07:30.270 --> 00:07:33.730
JSONP, npm install JSONP, dash, 

241
00:07:33.730 --> 00:07:34.930
dash, save. The reason why I 

242
00:07:34.930 --> 00:07:36.150
want to show you that is because 

243
00:07:36.320 --> 00:07:38.250
we looked at fetch earlier, but 

244
00:07:38.250 --> 00:07:39.400
fetch doesn't work with JSONP 

245
00:07:39.400 --> 00:07:41.380
API. If you ever want to work 

246
00:07:41.940 --> 00:07:45.000
with JSONP API, I can't even say 

247
00:07:45.000 --> 00:07:46.460
it, then you need to install 

248
00:07:46.460 --> 00:07:47.960
this really nice small package 

249
00:07:47.960 --> 00:07:51.130
called JSONP. Maybe let's import 

250
00:07:51.760 --> 00:07:55.150
JSONP from JSONP package. Now 

251
00:07:55.150 --> 00:07:56.890
we have imported all of these 

252
00:07:56.930 --> 00:07:58.970
things. We need to create an 

253
00:07:59.100 --> 00:08:01.320
HTML file to load in as app.js. 

254
00:08:01.420 --> 00:08:02.840
Create a new file, I'm going to 

255
00:08:02.840 --> 00:08:05.570
call it index.html. Give 

256
00:08:05.590 --> 00:08:07.040
ourselves some HTML in there. 

257
00:08:07.040 --> 00:08:08.710
We're going to call it Js 

258
00:08:08.710 --> 00:08:10.980
modules. We give ourselves a 

259
00:08:10.980 --> 00:08:13.720
script tag, which will give us...

260
00:08:13.720 --> 00:08:16.820
let's try app.js. Now if I open 

261
00:08:16.820 --> 00:08:18.380
that up in my browser and take a 

262
00:08:18.380 --> 00:08:19.540
look at my dev tools, we're 

263
00:08:19.540 --> 00:08:20.420
going to get this error, 

264
00:08:20.750 --> 00:08:22.920
unexpected token import on the 

265
00:08:22.920 --> 00:08:25.560
first line. It doesn't know how 

266
00:08:25.560 --> 00:08:27.000
to actually handle this import 

267
00:08:27.000 --> 00:08:28.460
stuff because that's a one piece 

268
00:08:28.460 --> 00:08:30.200
of ES6 that has not yet been 

269
00:08:30.520 --> 00:08:32.490
implemented. What we need to do 

270
00:08:32.490 --> 00:08:33.890
is we need to use Webpack that's 

271
00:08:33.890 --> 00:08:35.530
going to bundle it all together 

272
00:08:35.780 --> 00:08:37.900
for us. This a little bit of a 

273
00:08:37.900 --> 00:08:39.380
task to get up and running, but 

274
00:08:39.380 --> 00:08:40.440
it's generally one thing that 

275
00:08:40.440 --> 00:08:41.190
you do at the start of your 

276
00:08:41.190 --> 00:08:42.750
project and you're golden. If 

277
00:08:42.750 --> 00:08:43.820
you have multiple projects, you 

278
00:08:43.820 --> 00:08:46.570
can re-use this set up. We'll go 

279
00:08:46.570 --> 00:08:48.150
through it together. You can 

280
00:08:48.150 --> 00:08:49.710
find boiler plates online, 

281
00:08:49.760 --> 00:08:51.710
however, they are so confusing, 

282
00:08:52.040 --> 00:08:53.490
and it's a really overwhelming 

283
00:08:53.490 --> 00:08:55.210
space. I really want to make 

284
00:08:55.210 --> 00:08:57.190
sure that you understand what's 

285
00:08:57.190 --> 00:08:58.230
happening with the module 

286
00:08:58.230 --> 00:09:00.170
bundling here with Webpack. 

287
00:09:01.050 --> 00:09:01.950
First things that we need to do 

288
00:09:01.950 --> 00:09:03.480
is install some dependencies 

289
00:09:03.480 --> 00:09:05.180
here. There's a couple. I'm 

290
00:09:05.180 --> 00:09:06.660
going to be using Webpack 2 

291
00:09:06.930 --> 00:09:08.380
right now because that's going 

292
00:09:08.520 --> 00:09:10.070
to come out pretty soon. It's 

293
00:09:10.070 --> 00:09:12.080
not yet available. We had to do 

294
00:09:12.160 --> 00:09:15.010
npm install Webpack app beta. 

295
00:09:15.640 --> 00:09:16.710
The way you can check if you 

296
00:09:16.710 --> 00:09:19.160
need that app beta any longer is 

297
00:09:19.160 --> 00:09:22.050
you can go to npm.im/webpack, 

298
00:09:22.280 --> 00:09:23.930
and then check the version of 

299
00:09:23.930 --> 00:09:25.340
Webpack. See the current one for 

300
00:09:25.340 --> 00:09:28.920
me is 1.13.1. If that says 2.0

301
00:09:29.190 --> 00:09:30.870
for you, you simply just need to 

302
00:09:30.910 --> 00:09:33.160
install Webpack. If it still 

303
00:09:33.160 --> 00:09:34.480
says one point something, we 

304
00:09:34.480 --> 00:09:35.770
want to install the beta of 

305
00:09:35.770 --> 00:09:37.550
Webpack because there's no sense 

306
00:09:37.550 --> 00:09:38.850
in really learning Webpack 1 

307
00:09:38.850 --> 00:09:40.820
right now when we're trying to 

308
00:09:40.820 --> 00:09:41.860
look a little bit future-

309
00:09:41.860 --> 00:09:44.190
friendly here. Webpack app beta, 

310
00:09:44.190 --> 00:09:45.670
and we'll say dash, dash, save, 

311
00:09:45.670 --> 00:09:47.250
dev. The reason why we're 

312
00:09:47.250 --> 00:09:48.480
saying dash, dash, save, dev 

313
00:09:48.480 --> 00:09:50.050
instead of just dash, dash, save 

314
00:09:50.350 --> 00:09:52.110
is because this is just a tool 

315
00:09:52.350 --> 00:09:53.530
for building it. It's not part 

316
00:09:53.530 --> 00:09:55.130
of our application. It's just a 

317
00:09:55.130 --> 00:09:56.830
development tool. We're going 

318
00:09:56.830 --> 00:09:58.180
to go and install that. Let's 

319
00:09:58.180 --> 00:09:59.680
head over to our package at JSON. 

320
00:10:00.090 --> 00:10:02.090
We should see a secondary item 

321
00:10:02.200 --> 00:10:03.530
being added here called dev 

322
00:10:03.530 --> 00:10:04.940
dependencies. There we go. 

323
00:10:05.010 --> 00:10:07.130
Popped up, Webpack, this one is 

324
00:10:07.180 --> 00:10:10.000
beta 15, it will probably a more 

325
00:10:10.000 --> 00:10:12.150
recent version when you actually 

326
00:10:12.150 --> 00:10:13.960
get around to doing the series. 

327
00:10:14.610 --> 00:10:16.890
Then we also need a couple 

328
00:10:16.890 --> 00:10:18.400
things that's going to help us 

329
00:10:18.400 --> 00:10:20.840
convert our code to ES5. Now we 

330
00:10:20.840 --> 00:10:22.200
haven't talked about Babel, but 

331
00:10:22.310 --> 00:10:23.540
the long and short of it right 

332
00:10:23.540 --> 00:10:25.230
now is that it will take your 

333
00:10:25.360 --> 00:10:27.370
ES6 code and convert it to the 

334
00:10:27.460 --> 00:10:29.590
equivalent ES5 code and make it 

335
00:10:29.620 --> 00:10:31.510
work in all of the browsers. We 

336
00:10:31.510 --> 00:10:32.980
will go much more into it, but 

337
00:10:32.980 --> 00:10:34.030
this is the point when we 

338
00:10:34.030 --> 00:10:35.860
actually integrate Babel into 

339
00:10:35.860 --> 00:10:37.440
our build system so that it will 

340
00:10:37.440 --> 00:10:39.330
work on all of our browsers. We 

341
00:10:39.330 --> 00:10:41.140
need to install a whole bunch of 

342
00:10:41.190 --> 00:10:42.990
Babel add-ons and I've included 

343
00:10:42.990 --> 00:10:44.860
the instructions on ES6 module 

344
00:10:44.860 --> 00:10:45.730
instructions so you don't have 

345
00:10:45.730 --> 00:10:47.740
to type it every single time. We 

346
00:10:47.740 --> 00:10:49.640
already did Webpack install app 

347
00:10:49.640 --> 00:10:51.250
beta. We also need this thing 

348
00:10:51.250 --> 00:10:53.090
called a Babel loader, we need 

349
00:10:53.090 --> 00:10:54.530
the Babel core, and then we need 

350
00:10:54.530 --> 00:10:57.260
this thing, Babel preset ES2015 

351
00:10:57.700 --> 00:10:59.660
Native modules. What that does 

352
00:10:59.660 --> 00:11:00.750
is it's going to convert all of 

353
00:11:00.750 --> 00:11:03.880
our code from ES6 or ES2015 down 

354
00:11:03.880 --> 00:11:06.400
to ES5, but this Native modules 

355
00:11:06.400 --> 00:11:07.590
version is going to skip 

356
00:11:07.690 --> 00:11:09.780
converting them to this older 

357
00:11:09.830 --> 00:11:11.740
module version called common Js, 

358
00:11:12.100 --> 00:11:14.240
because Webpack 2 is able to 

359
00:11:14.240 --> 00:11:16.280
handle Native modules. Now, if 

360
00:11:16.280 --> 00:11:17.530
top of your head just blew off 

361
00:11:17.530 --> 00:11:18.740
after everything I said don't 

362
00:11:18.740 --> 00:11:20.510
worry about it. You'll catch on 

363
00:11:20.510 --> 00:11:22.470
to it. Just take this one npm 

364
00:11:22.470 --> 00:11:24.270
install line, pop it into here, 

365
00:11:24.550 --> 00:11:26.160
and let that install. You can 

366
00:11:26.160 --> 00:11:27.200
check if it worked if you go to 

367
00:11:27.200 --> 00:11:28.660
your package at JSON and you see 

368
00:11:28.660 --> 00:11:29.900
your dev dependencies is now 

369
00:11:29.980 --> 00:11:32.510
Babel core, loader, preset and 

370
00:11:32.510 --> 00:11:35.290
Webpack all installed. Finally, 

371
00:11:35.290 --> 00:11:37.140
we need to create a Webpack file 

372
00:11:37.140 --> 00:11:38.200
that's actually going to hold 

373
00:11:38.200 --> 00:11:39.670
all the config for this, so we 

374
00:11:39.720 --> 00:11:41.460
will say touch, Webpack, dot, 

375
00:11:42.140 --> 00:11:45.950
config, dot Js and you can open 

376
00:11:45.950 --> 00:11:48.400
that up and we need to import 

377
00:11:48.690 --> 00:11:50.550
Webpack. Const Webpack equals 

378
00:11:50.550 --> 00:11:52.920
require Webpack. Now you might 

379
00:11:52.920 --> 00:11:53.890
be saying, "Why are we using 

380
00:11:53.890 --> 00:11:55.820
require here." That's common Js 

381
00:11:55.820 --> 00:11:57.170
if you ever heard of that, but 

382
00:11:57.230 --> 00:11:58.240
the problem here is that our 

383
00:11:58.310 --> 00:12:00.090
Webpack config actually isn't 

384
00:12:00.090 --> 00:12:01.860
going to use ES6 imports because 

385
00:12:02.140 --> 00:12:03.540
node doesn't support that just 

386
00:12:03.540 --> 00:12:05.810
yet. Then we will also need a 

387
00:12:05.810 --> 00:12:07.750
variable for the environment and 

388
00:12:07.750 --> 00:12:10.300
this is going to help us do 

389
00:12:10.300 --> 00:12:11.850
production builds and 

390
00:12:12.190 --> 00:12:13.280
development builds and the 

391
00:12:13.280 --> 00:12:14.390
production builds will be much 

392
00:12:14.390 --> 00:12:16.980
smaller. So it's Const node in 

393
00:12:17.570 --> 00:12:21.110
equals. All right, now what we 

394
00:12:21.110 --> 00:12:23.160
need to do is create a module 

395
00:12:23.680 --> 00:12:26.130
dot exports and that is going to 

396
00:12:26.130 --> 00:12:28.740
be an object and inside of this 

397
00:12:28.740 --> 00:12:30.390
module exports we have a couple 

398
00:12:30.460 --> 00:12:31.660
things. We have a dev tool, 

399
00:12:32.420 --> 00:12:34.340
which is going to give us 

400
00:12:34.340 --> 00:12:35.580
something called source maps, 

401
00:12:35.810 --> 00:12:37.390
source dash map. We have an 

402
00:12:37.510 --> 00:12:39.880
entry point. So with web pack 

403
00:12:39.950 --> 00:12:41.320
you have an entry point it 

404
00:12:41.450 --> 00:12:42.890
essentially says where do you 

405
00:12:42.890 --> 00:12:45.020
want to start your application. 

406
00:12:45.200 --> 00:12:47.370
We are going to start in app.js. 

407
00:12:47.370 --> 00:12:53.020
You see the file name is app.js, 

408
00:12:53.460 --> 00:12:57.640
and then the output is where do 

409
00:12:57.640 --> 00:13:00.250
you wish for it to go. File name 

410
00:13:01.100 --> 00:13:02.620
is going to be, I'm going to 

411
00:13:02.620 --> 00:13:04.620
make a folder called Build, and 

412
00:13:04.620 --> 00:13:06.070
make it called bundle.js. You 

413
00:13:06.070 --> 00:13:07.790
might see I already have it here, 

414
00:13:07.790 --> 00:13:09.060
that's because I made it once to 

415
00:13:09.060 --> 00:13:10.980
test it for the screen cast. 

416
00:13:11.290 --> 00:13:15.530
Then we have a module inside of 

417
00:13:15.590 --> 00:13:19.470
here which has a loaders array. 

418
00:13:20.860 --> 00:13:22.070
Loaders are essentially how 

419
00:13:22.070 --> 00:13:23.920
should I handle specific types 

420
00:13:23.920 --> 00:13:25.800
of files because Webpack is just 

421
00:13:25.800 --> 00:13:26.900
a beast. You can use it for 

422
00:13:26.900 --> 00:13:28.470
absolutely everything. It can 

423
00:13:28.470 --> 00:13:29.980
pretty much do everything under 

424
00:13:29.980 --> 00:13:31.840
the sun. One of the loaders 

425
00:13:31.840 --> 00:13:32.600
that we are going to do is we 

426
00:13:32.680 --> 00:13:33.660
are going to take all of our 

427
00:13:33.660 --> 00:13:35.480
JavaScript files and we are 

428
00:13:35.480 --> 00:13:38.110
going to run it through Babel 

429
00:13:38.220 --> 00:13:40.700
with our specific plug-ins. The 

430
00:13:40.700 --> 00:13:42.200
first loader is going to be an 

431
00:13:42.200 --> 00:13:44.800
object and the way that you tell 

432
00:13:45.270 --> 00:13:48.140
it the entry point is that if it 

433
00:13:48.160 --> 00:13:51.560
is a .js file. We'll say test 

434
00:13:52.090 --> 00:13:54.560
for a bit of a funky 

435
00:13:54.560 --> 00:13:56.310
 here .js and it 

436
00:13:56.360 --> 00:13:59.370
ends with Js, by the way if you 

437
00:13:59.370 --> 00:14:00.410
don't feel like typing this you 

438
00:14:00.410 --> 00:14:02.890
can just scroll on to ES6 module 

439
00:14:02.890 --> 00:14:04.110
instructions and just copy and 

440
00:14:04.110 --> 00:14:06.250
paste this entire thing. If 

441
00:14:06.250 --> 00:14:07.620
you'd like to hear me explain it 

442
00:14:08.000 --> 00:14:09.760
all the way through then stick 

443
00:14:09.760 --> 00:14:13.510
around. We want to exclude the 

444
00:14:13.510 --> 00:14:16.170
node modules directory. We don't 

445
00:14:16.170 --> 00:14:17.140
want it to run against the 

446
00:14:17.140 --> 00:14:18.460
entire node modules directory. 

447
00:14:18.770 --> 00:14:19.880
The loader that we are going to 

448
00:14:19.880 --> 00:14:21.880
run this JavaScript file through 

449
00:14:21.920 --> 00:14:24.330
is Babel or Babel dash core. 

450
00:14:24.610 --> 00:14:25.880
That's going to convert it all 

451
00:14:25.880 --> 00:14:28.400
to ES5 and then there is a query 

452
00:14:28.400 --> 00:14:30.280
which will allow us to set some 

453
00:14:30.280 --> 00:14:32.950
presets with JavaScript. We want 

454
00:14:33.080 --> 00:14:36.240
the ES2015 dash native dash 

455
00:14:36.270 --> 00:14:38.380
modules. Again the reason I am 

456
00:14:38.380 --> 00:14:40.200
using Native modules here is 

457
00:14:40.200 --> 00:14:41.850
because Webpack 2 doesn't need 

458
00:14:41.850 --> 00:14:43.630
them converted to common Js 

459
00:14:43.630 --> 00:14:45.390
files. Webpack 2 knows how to 

460
00:14:45.390 --> 00:14:48.080
handle ES6 modules, which is 

461
00:14:48.120 --> 00:14:49.980
really, really nice. So, that 

462
00:14:50.070 --> 00:14:52.110
is my module up and running. The 

463
00:14:52.250 --> 00:14:53.590
final is, let's go down here, we 

464
00:14:53.590 --> 00:14:54.900
need some plug-ins that are 

465
00:14:54.900 --> 00:14:57.550
going to actually handle that. 

466
00:14:57.650 --> 00:15:00.140
Plug-ins, the plug-ins, there is 

467
00:15:00.140 --> 00:15:01.900
going to be a couple of them 

468
00:15:01.900 --> 00:15:03.520
right here. Let's just leave 

469
00:15:03.520 --> 00:15:05.020
comments. So like, Uglify Js, 

470
00:15:05.520 --> 00:15:07.210
that's just going to compress 

471
00:15:07.420 --> 00:15:09.850
our JavaScript so it is nice and 

472
00:15:09.850 --> 00:15:11.860
small. Then we have the 

473
00:15:11.860 --> 00:15:13.620
environment plug-in which will 

474
00:15:13.620 --> 00:15:15.410
set the actual environment 

475
00:15:15.410 --> 00:15:19.630
inside of that. Uglify Js is 

476
00:15:19.760 --> 00:15:24.060
new Webpack.optimize.uglify 

477
00:15:25.010 --> 00:15:27.870
Js plug-in. That takes the 

478
00:15:27.960 --> 00:15:30.360
object of Uglify JS properties 

479
00:15:30.940 --> 00:15:34.590
compress is going to be warnings. 

480
00:15:35.720 --> 00:15:38.410
Output is going to have comments 

481
00:15:38.820 --> 00:15:42.010
false and source maps is going 

482
00:15:42.010 --> 00:15:44.150
to be true. That's the Webpack 

483
00:15:44.150 --> 00:15:45.140
1 and then we have this 

484
00:15:45.140 --> 00:15:46.350
environment plug-in, which is 

485
00:15:46.350 --> 00:15:49.540
another new webpack.define plug 

486
00:15:49.540 --> 00:15:51.260
in. That will take an object, 

487
00:15:51.430 --> 00:15:57.720
process is the node mv. Going to 

488
00:15:57.720 --> 00:16:00.960
be set to JSON.Stringify the 

489
00:16:01.070 --> 00:16:02.950
node and variable we have 

490
00:16:03.020 --> 00:16:04.650
created there. Essentially what 

491
00:16:04.650 --> 00:16:05.950
that does is it passes the 

492
00:16:05.950 --> 00:16:07.910
environment variable to this 

493
00:16:07.910 --> 00:16:09.810
code and plug-ins like Uglify 

494
00:16:09.810 --> 00:16:11.470
are going to be able to know if 

495
00:16:11.470 --> 00:16:12.480
they should remove certain 

496
00:16:12.480 --> 00:16:13.850
things or not depending on what 

497
00:16:13.970 --> 00:16:15.930
environment we are actually in. 

498
00:16:16.510 --> 00:16:18.110
Lets just do a quick look over. 

499
00:16:18.110 --> 00:16:19.260
Looks like I forgot a comma 

500
00:16:19.260 --> 00:16:22.910
there. Any other errors? Nope. 

501
00:16:22.910 --> 00:16:25.000
Looking pretty good. Third step 

502
00:16:25.000 --> 00:16:26.380
what we want to do in order to 

503
00:16:26.380 --> 00:16:28.670
run Webpack we need to run it. 

504
00:16:28.670 --> 00:16:30.590
We could run it from the command 

505
00:16:30.590 --> 00:16:31.990
line. We could install Webpack 

506
00:16:31.990 --> 00:16:35.160
globally. An even nicer way is 

507
00:16:35.160 --> 00:16:36.520
to use what is called and npm 

508
00:16:36.520 --> 00:16:38.410
script. If you head on over to 

509
00:16:38.410 --> 00:16:40.630
your package.json file and 

510
00:16:40.630 --> 00:16:42.000
scroll up to where it says 

511
00:16:42.060 --> 00:16:44.000
scripts, you will see that we 

512
00:16:44.000 --> 00:16:45.770
have only one that's called "

513
00:16:45.770 --> 00:16:47.840
Test." You can delete that 

514
00:16:47.840 --> 00:16:49.240
that's for running tests. So 

515
00:16:49.240 --> 00:16:51.200
delete that entirely. We are 

516
00:16:51.200 --> 00:16:52.680
going to create a script called 

517
00:16:52.750 --> 00:16:55.460
Build and that Build is going to 

518
00:16:55.460 --> 00:16:57.450
be set to the command Webpack 

519
00:16:58.230 --> 00:16:59.280
and we are going to pass it just 

520
00:16:59.280 --> 00:17:02.060
two flags. Progress and watch. 

521
00:17:02.190 --> 00:17:04.150
Now, without having to globally 

522
00:17:04.150 --> 00:17:05.840
install Webpack we should be 

523
00:17:05.840 --> 00:17:09.260
able to say npm, run, build. We 

524
00:17:09.260 --> 00:17:11.000
say Run and Build is the name of 

525
00:17:11.000 --> 00:17:12.820
the actual script that we have 

526
00:17:12.860 --> 00:17:14.440
here. Let's run it and see if we 

527
00:17:14.440 --> 00:17:15.550
have any errors, we might. 

528
00:17:16.270 --> 00:17:17.620
Beautiful! So what happened 

529
00:17:17.620 --> 00:17:19.980
here is that it created us a 

530
00:17:19.980 --> 00:17:23.320
Build file which is bundle.js. 

531
00:17:23.590 --> 00:17:24.850
One thing is I'm not seeing my 

532
00:17:24.850 --> 00:17:26.110
source map show up. Let me 

533
00:17:26.110 --> 00:17:27.800
double check my Webpack config. 

534
00:17:29.680 --> 00:17:32.390
I forgot a capital M on the 

535
00:17:32.890 --> 00:17:34.890
Uglify so Uglify Js was 

536
00:17:34.890 --> 00:17:36.400
stripping them back out. So if I 

537
00:17:36.400 --> 00:17:38.660
quit that and rerun npm run 

538
00:17:38.660 --> 00:17:40.390
build, it then kick outs a nice 

539
00:17:40.630 --> 00:17:42.910
tidy bundle as well as a source 

540
00:17:42.910 --> 00:17:45.520
map for us. If we go to our 

541
00:17:45.590 --> 00:17:48.780
index.html, change this app.js 

542
00:17:48.810 --> 00:17:53.740
to _build/bundle.js. Why? 

543
00:17:54.070 --> 00:17:56.470
Because it's _build bundle.js. 

544
00:17:57.080 --> 00:17:59.700
If we go to our app.js and try 

545
00:17:59.700 --> 00:18:01.070
to use these things, so let's 

546
00:18:01.070 --> 00:18:07.340
just say, const ages = 1, 1, 4, 

547
00:18:07.860 --> 00:18:12.570
52, 12, 4. I have these ages 

548
00:18:12.570 --> 00:18:13.900
here, and I want to just get the 

549
00:18:13.900 --> 00:18:16.570
unique versions of them. Let's 

550
00:18:16.570 --> 00:18:20.170
just say, console.log unique 

551
00:18:20.280 --> 00:18:22.500
ages. That should work. See how 

552
00:18:22.500 --> 00:18:24.610
when I hit save, it reruns this 

553
00:18:24.730 --> 00:18:27.360
Webpack bundle here? If we open 

554
00:18:27.490 --> 00:18:30.650
up our index.html in our browser 

555
00:18:30.650 --> 00:18:32.260
and open up our console here, 

556
00:18:32.590 --> 00:18:34.670
you now see unique array. It 

557
00:18:34.800 --> 00:18:36.750
tells us that we wrote that on 

558
00:18:36.990 --> 00:18:40.520
app.js, on line 7. That was a 

559
00:18:40.520 --> 00:18:41.800
very basic getting up-and-

560
00:18:41.800 --> 00:18:42.840
running with Webpack. I know it 

561
00:18:42.840 --> 00:18:45.030
was a little bit of a slog to 

562
00:18:45.030 --> 00:18:46.460
get through some of that. It's 

563
00:18:46.460 --> 00:18:47.610
the tooling is a little bit 

564
00:18:47.610 --> 00:18:49.420
tough right now, but if you get 

565
00:18:49.440 --> 00:18:50.650
the hang of it, it's definitely 

566
00:18:50.650 --> 00:18:52.220
worth implementing into your 

567
00:18:52.290 --> 00:18:52.720
workflow.

