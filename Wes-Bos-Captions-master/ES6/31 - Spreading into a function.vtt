WEBVTT

1
00:00:02.360 --> 00:00:02.710
 Instructor: A really 

2
00:00:02.710 --> 00:00:04.340
great use case for spreads is 

3
00:00:04.350 --> 00:00:06.520
when you spread into a function. 

4
00:00:06.590 --> 00:00:07.730
Now, let's take a look at this 

5
00:00:07.740 --> 00:00:09.540
example. I've got my inventors 

6
00:00:09.620 --> 00:00:11.550
array right here, and I want to 

7
00:00:11.625 --> 00:00:13.200
take the items from New 

8
00:00:13.210 --> 00:00:15.150
Inventors and put them into 

9
00:00:15.520 --> 00:00:16.810
Inventors. I don't want a third 

10
00:00:16.820 --> 00:00:19.140
array. I don't want to overwrite 

11
00:00:18.020 --> 00:00:19.850
the entire array. I just want to 

12
00:00:19.460 --> 00:00:21.280
tack them onto the end. You 

13
00:00:21.200 --> 00:00:22.270
might think, "OK, we'll just 

14
00:00:22.280 --> 00:00:23.480
take the inventors and we'll 

15
00:00:23.490 --> 00:00:25.620
call push on it, and we'll pass 

16
00:00:25.630 --> 00:00:27.990
it the new inventors." Let's see 

17
00:00:28.000 --> 00:00:30.050
what that gives us. Console.log 

18
00:00:30.060 --> 00:00:32.300
Inventors, now we get three 

19
00:00:32.310 --> 00:00:33.340
items, and then we have the 

20
00:00:33.350 --> 00:00:34.920
fourth item is an array of two 

21
00:00:34.930 --> 00:00:36.970
things. That's inside it. That's 

22
00:00:36.980 --> 00:00:38.190
not what we want. We 

23
00:00:38.200 --> 00:00:39.250
essentially just did this. We 

24
00:00:39.260 --> 00:00:41.080
took the array and added it as a 

25
00:00:41.090 --> 00:00:42.470
fourth item, so we have an array 

26
00:00:42.545 --> 00:00:43.970
in an array. We don't want that. 

27
00:00:45.180 --> 00:00:46.720
A way that you could have solved 

28
00:00:46.730 --> 00:00:48.710
this in the past is inventors.

29
00:00:48.840 --> 00:00:50.340
push, and then you call the 

30
00:00:50.440 --> 00:00:53.530
apply on it, and you pass it 

31
00:00:53.580 --> 00:00:55.430
this context, which is inventors, 

32
00:00:55.505 --> 00:00:58.410
and you pass it. That will work, 

33
00:00:59.580 --> 00:01:01.380
and I'll tell you why. There we 

34
00:01:01.380 --> 00:01:03.100
go. What's happening here is 

35
00:01:03.110 --> 00:01:04.620
when you call apply, it's going 

36
00:01:04.630 --> 00:01:05.850
to run the function that you 

37
00:01:05.860 --> 00:01:08.280
called apply against, but every 

38
00:01:08.380 --> 00:01:10.420
single item of the array as an 

39
00:01:10.430 --> 00:01:11.800
argument. It's essentially 

40
00:01:11.810 --> 00:01:15.600
doing this, .push, musk, and 

41
00:01:15.880 --> 00:01:17.370
jobs, because you can't pass 

42
00:01:17.380 --> 00:01:19.530
push an array. You can pass push 

43
00:01:19.540 --> 00:01:21.260
as many arguments as you wish. 

44
00:01:21.520 --> 00:01:22.980
That's a little bit funky, and 

45
00:01:22.990 --> 00:01:23.930
I've seen a lot of people 

46
00:01:23.940 --> 00:01:25.340
scratch their heads looking at 

47
00:01:25.350 --> 00:01:26.590
something like that, where you 

48
00:01:26.600 --> 00:01:27.960
have Inventors twice, and then 

49
00:01:27.970 --> 00:01:29.240
you call this weird apply thing 

50
00:01:29.250 --> 00:01:30.770
on it? It's a little bit hard to 

51
00:01:30.780 --> 00:01:32.740
actually understand. Rather 

52
00:01:32.750 --> 00:01:33.920
than that, what we can do is you 

53
00:01:33.930 --> 00:01:35.430
just simply call push, and we 

54
00:01:35.440 --> 00:01:37.480
only pass it the New Inventors. 

55
00:01:38.780 --> 00:01:40.900
Again, let's see the issue that 

56
00:01:40.910 --> 00:01:43.450
we get with that. That's the 

57
00:01:43.460 --> 00:01:45.800
array, but if you were to spread 

58
00:01:45.810 --> 00:01:47.190
into it, what does spread do? 

59
00:01:47.200 --> 00:01:48.900
Spread is going to take musk and 

60
00:01:48.910 --> 00:01:51.020
jobs to pass it as individual 

61
00:01:51.340 --> 00:01:54.640
argument into push. Now we don't 

62
00:01:54.650 --> 00:01:55.750
have to worry about any of that 

63
00:01:55.760 --> 00:01:58.390
ply, or this, or any of these 

64
00:01:58.400 --> 00:01:59.300
things. We simply just 

65
00:01:59.310 --> 00:02:01.750
spread right into the functions. 

66
00:02:02.070 --> 00:02:03.600
We've been spreading into arrays, 

67
00:02:03.610 --> 00:02:04.890
but you can also spread into a 

68
00:02:04.900 --> 00:02:06.750
function where every single item 

69
00:02:06.790 --> 00:02:09.320
of the array is going to be used 

70
00:02:09.380 --> 00:02:10.740
as an argument. Let's build 

71
00:02:10.750 --> 00:02:12.260
another example ourselves where 

72
00:02:12.270 --> 00:02:13.380
we have a function that says, "

73
00:02:13.390 --> 00:02:15.200
Say hi." It's going to have a 

74
00:02:15.210 --> 00:02:17.750
first name and a last name, and 

75
00:02:17.760 --> 00:02:19.330
we're simply just going to alert, "

76
00:02:19.910 --> 00:02:22.880
Hey there first." What am I 

77
00:02:22.890 --> 00:02:24.210
doing? Let's use a template 

78
00:02:24.220 --> 00:02:28.870
string. "Hey there first and 

79
00:02:29.420 --> 00:02:31.080
last." We're going to do a 

80
00:02:30.730 --> 00:02:32.660
really simple thing. Then I 

81
00:02:32.670 --> 00:02:34.800
have someone's name, so const 

82
00:02:34.940 --> 00:02:39.240
name is an array Wes and Bos. 

83
00:02:39.840 --> 00:02:42.390
For whatever reason, we've got 

84
00:02:42.400 --> 00:02:44.510
an array, and we need to pass 

85
00:02:44.520 --> 00:02:46.350
argument one, argument two. You 

86
00:02:46.360 --> 00:02:49.590
could do this. Say, "Hi." Then 

87
00:02:49.600 --> 00:02:52.210
you say, "Name 0And "Name 1." 

88
00:02:54.630 --> 00:02:56.830
That should work. OK. "Hey 

89
00:02:56.840 --> 00:02:58.260
there, Wes Bos," but that 

90
00:02:58.270 --> 00:02:59.180
doesn't really work that well, 

91
00:02:59.190 --> 00:03:00.390
especially if you had a whole 

92
00:03:00.400 --> 00:03:02.060
bunch of arguments that you need 

93
00:03:02.070 --> 00:03:03.700
to pass in. What we could do 

94
00:03:03.710 --> 00:03:05.720
instead of passing the two 

95
00:03:05.770 --> 00:03:07.030
individual arguments is you just 

96
00:03:07.040 --> 00:03:08.680
spread the array, and that will 

97
00:03:08.690 --> 00:03:10.750
pass "Wes" as the first argument 

98
00:03:10.760 --> 00:03:12.250
and "Bos" as the second argument. 

99
00:03:12.740 --> 00:03:14.230
Then you say, "Hey there, Wes 

100
00:03:14.240 --> 00:03:15.720
Bos," without having to do any 

101
00:03:15.730 --> 00:03:17.400
of that weird square bracket 

102
00:03:17.410 --> 00:03:19.050
stuff. Spreading into a 

103
00:03:19.060 --> 00:03:20.660
function, very, very handy.

