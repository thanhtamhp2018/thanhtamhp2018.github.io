WEBVTT

1
00:00:02.480 --> 00:00:02.760
 Man: Another really 

2
00:00:02.760 --> 00:00:04.320
great use case for proxies is 

3
00:00:04.330 --> 00:00:05.970
when you are building a library 

4
00:00:05.980 --> 00:00:07.320
that other developers are going 

5
00:00:07.395 --> 00:00:09.070
to use, you need to implement 

6
00:00:09.080 --> 00:00:10.700
some sort of ergonomics so that 

7
00:00:11.000 --> 00:00:12.950
they are going to use it with 

8
00:00:13.080 --> 00:00:16.120
the greatest ease possible. This 

9
00:00:16.120 --> 00:00:17.440
is something that I run into all 

10
00:00:17.450 --> 00:00:18.220
the time. It drives me 

11
00:00:18.230 --> 00:00:20.540
bonkers that, when you have a 

12
00:00:20.550 --> 00:00:21.500
map and you want to set the 

13
00:00:21.510 --> 00:00:22.900
longitude, people have a hard 

14
00:00:22.910 --> 00:00:24.930
time deciding on if the 

15
00:00:24.940 --> 00:00:27.070
property's going to be longitude, 

16
00:00:27.080 --> 00:00:28.080
or they're going to spell it 

17
00:00:28.090 --> 00:00:30.590
wrong, or you use L-O-N-G or L-O-

18
00:00:30.600 --> 00:00:32.710
N. Finally at the end of the day 

19
00:00:32.720 --> 00:00:35.180
they realize "OK, it's LNG," but 

20
00:00:34.440 --> 00:00:36.150
that might be half an hour of 

21
00:00:36.160 --> 00:00:37.510
debugging to realize that's such 

22
00:00:37.520 --> 00:00:38.850
a silly mistake. Same thing 

23
00:00:38.860 --> 00:00:41.010
goes with CamelCasing or 

24
00:00:41.020 --> 00:00:41.950
something like that where you 

25
00:00:41.960 --> 00:00:44.140
have a property like ID. People 

26
00:00:44.140 --> 00:00:45.540
don't know if identification 

27
00:00:45.550 --> 00:00:46.480
should be CamelCased -- it 

28
00:00:46.490 --> 00:00:48.020
shouldn't -- or if it's all 

29
00:00:48.095 --> 00:00:49.200
uppercase -- it shouldn't -- or 

30
00:00:49.330 --> 00:00:50.160
if it's just lower case. 

31
00:00:50.235 --> 00:00:51.730
Something like that, so it 

32
00:00:51.860 --> 00:00:54.990
really is helpful when you're 

33
00:00:55.000 --> 00:00:56.310
making something to check. 

34
00:00:56.320 --> 00:00:57.560
Are people making any of these 

35
00:00:57.570 --> 00:00:59.560
common mistakes, or is someone 

36
00:00:59.570 --> 00:01:01.500
setting a property where there 

37
00:01:01.510 --> 00:01:03.430
is an existing property already 

38
00:01:03.650 --> 00:01:05.190
that is in a different case like 

39
00:01:05.200 --> 00:01:06.580
that? Then maybe we should 

40
00:01:06.620 --> 00:01:08.780
actually warn them. Let's take 

41
00:01:08.790 --> 00:01:10.990
an example with this. I'm going 

42
00:01:11.170 --> 00:01:13.060
to delete this, and we're going 

43
00:01:13.135 --> 00:01:14.700
to make a new safety object. 

44
00:01:14.775 --> 00:01:15.960
I'm going to start with an 

45
00:01:15.970 --> 00:01:18.200
object here, and we'll put an ID 

46
00:01:18.210 --> 00:01:20.400
of 100 in there. Then we also 

47
00:01:20.410 --> 00:01:22.250
need a handler, so we'll create 

48
00:01:22.260 --> 00:01:23.240
the handler and call it "Safe 

49
00:01:24.500 --> 00:01:27.960
handler". It's an object. We'll 

50
00:01:27.990 --> 00:01:30.160
take that object and pop it into 

51
00:01:31.180 --> 00:01:33.310
here. Now the way we're going to 

52
00:01:32.700 --> 00:01:34.250
test this is we're going to go 

53
00:01:34.250 --> 00:01:36.210
down here and say "safety.id=200." 

54
00:01:36.285 --> 00:01:39.340
If someone tries to change the 

55
00:01:39.340 --> 00:01:42.840
ID and they're using a different 

56
00:01:42.850 --> 00:01:44.320
case than what we initially 

57
00:01:44.330 --> 00:01:46.730
intended, then we should throw 

58
00:01:46.740 --> 00:01:48.820
an error in actually one of them. 

59
00:01:48.830 --> 00:01:51.860
We only need to trap the set 

60
00:01:51.870 --> 00:01:53.090
here. The get doesn't really 

61
00:01:53.100 --> 00:01:54.700
matter to us, and neither do any 

62
00:01:54.710 --> 00:01:56.190
of the other traps. We just want 

63
00:01:56.200 --> 00:01:57.460
the set value, which will take a 

64
00:01:57.470 --> 00:01:59.810
target, a name, and a value. 

65
00:02:01.240 --> 00:02:03.070
Now here what we want to do is 

66
00:02:03.500 --> 00:02:06.680
make a list of like keys, so 

67
00:02:06.755 --> 00:02:07.310
we're going to make them all 

68
00:02:07.320 --> 00:02:11.060
lower case. We can use "object 

69
00:02:11.070 --> 00:02:12.900
at keys" to get a list of all of 

70
00:02:12.975 --> 00:02:14.000
the keys off of the current 

71
00:02:14.020 --> 00:02:17.400
object. Then I'm just going to 

72
00:02:16.600 --> 00:02:19.780
find all of the like keys that 

73
00:02:19.790 --> 00:02:21.610
are equal to the one that the 

74
00:02:21.620 --> 00:02:23.770
person is looking for but in 

75
00:02:23.845 --> 00:02:26.870
lowercase. It's equal 

76
00:02:26.880 --> 00:02:30.900
to name.2 lower case. The 

77
00:02:30.900 --> 00:02:32.340
reason I did two lower case on 

78
00:02:32.350 --> 00:02:34.240
both of them is so that we have 

79
00:02:34.250 --> 00:02:35.380
apples to apples here, and we're 

80
00:02:35.390 --> 00:02:37.860
not trying to check against all 

81
00:02:37.870 --> 00:02:39.000
of the other ones. If someone 

82
00:02:39.010 --> 00:02:43.050
passes Wes and our key 

83
00:02:43.060 --> 00:02:44.960
is Wes, then we know that 

84
00:02:44.970 --> 00:02:46.440
there's a difference, or if 

85
00:02:46.450 --> 00:02:49.550
someone passes Wes and our key 

86
00:02:49.560 --> 00:02:51.120
is Wes, you know that there's a 

87
00:02:51.130 --> 00:02:52.140
difference. That just covers 

88
00:02:52.150 --> 00:02:53.870
every single possible use case 

89
00:02:53.880 --> 00:02:55.760
for us if we normalize them all 

90
00:02:55.770 --> 00:02:57.960
to lower case here. Now we say, "

91
00:02:58.560 --> 00:03:03.100
If there is no name in the 

92
00:03:03.110 --> 00:03:05.330
target, if they are trying to 

93
00:03:05.340 --> 00:03:07.770
set a new property, which 

94
00:03:08.260 --> 00:03:10.350
setting uppercase ID would be a 

95
00:03:10.360 --> 00:03:11.790
new property because the 

96
00:03:11.170 --> 00:03:13.820
existing property is lowercase 

97
00:03:13.440 --> 00:03:16.440
ID, and there is a like key. 

98
00:03:17.210 --> 00:03:20.230
There is a key that is like ID, 

99
00:03:20.240 --> 00:03:21.700
but it's in uppercase. That's 

100
00:03:21.710 --> 00:03:23.060
what this did right here. We 

101
00:03:23.070 --> 00:03:24.790
checked for that. If that's the 

102
00:03:24.800 --> 00:03:26.970
case, then we just want to throw 

103
00:03:26.980 --> 00:03:30.490
a new error. We'll tell them, "

104
00:03:31.240 --> 00:03:36.220
Oops. Looks like we already have 

105
00:03:36.295 --> 00:03:38.810
a property but with a case of..." 

106
00:03:38.885 --> 00:03:42.620
You use template strings to put 

107
00:03:42.630 --> 00:03:47.760
the name in there, like he. 

108
00:03:48.690 --> 00:03:50.040
Otherwise, if that doesn't 

109
00:03:50.050 --> 00:03:51.500
happen, then we'll just go along 

110
00:03:51.510 --> 00:03:53.350
with our lives and set the key 

111
00:03:53.360 --> 00:03:55.210
for them because that's what we 

112
00:03:55.210 --> 00:03:57.570
actually wanted. Good. Now I 

113
00:03:57.580 --> 00:03:58.760
should be able to refresh this, 

114
00:03:59.110 --> 00:04:00.690
and we get an error. Oops. Looks 

115
00:04:00.700 --> 00:04:03.440
like we already have an ID 

116
00:04:03.450 --> 00:04:05.330
property but with the case of 

117
00:04:05.660 --> 00:04:07.650
lower case ID. Let's try it 

118
00:04:07.660 --> 00:04:13.120
again. We'll say, "safety.name= 

119
00:04:14.720 --> 00:04:17.900
Wes". That works just fine. Then 

120
00:04:17.900 --> 00:04:20.190
if I try to update the name to 

121
00:04:20.200 --> 00:04:21.820
Wesley, but maybe I spell it 

122
00:04:21.830 --> 00:04:23.330
with a capital N for whatever 

123
00:04:23.340 --> 00:04:25.330
reason, it's going to yell at me. "

124
00:04:25.520 --> 00:04:26.390
Looks like we already have a 

125
00:04:26.400 --> 00:04:27.720
name property but with a case of 

126
00:04:27.730 --> 00:04:29.200
name." It's not going to go 

127
00:04:29.210 --> 00:04:31.100
through and update it. You can 

128
00:04:31.110 --> 00:04:32.570
really help out other developers 

129
00:04:32.580 --> 00:04:34.170
that are using it. By thinking 

130
00:04:34.180 --> 00:04:35.140
ahead of these things, you can 

131
00:04:35.150 --> 00:04:36.270
cut down on get-hub issues, 

132
00:04:36.420 --> 00:04:38.050
emails, and all that kind of 

133
00:04:37.470 --> 00:04:40.900
stuff if you make your proxies a 

134
00:04:40.910 --> 00:04:42.150
little bit more resilient.

