WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.620 --> 00:00:03.380
Let's take a look at another 

3
00:00:03.480 --> 00:00:05.840
simple use case where we create 

4
00:00:05.850 --> 00:00:07.220
a file that is going to have 

5
00:00:07.230 --> 00:00:08.510
both a named and a default 

6
00:00:08.520 --> 00:00:09.800
export. We're going to create a 

7
00:00:09.810 --> 00:00:12.680
user, where this module will 

8
00:00:12.340 --> 00:00:13.890
allow us to create a new user, 

9
00:00:14.060 --> 00:00:15.050
but then it will also have some 

10
00:00:15.050 --> 00:00:17.280
utility methods to get the URL 

11
00:00:17.290 --> 00:00:18.930
for that user's profile and 

12
00:00:18.940 --> 00:00:20.640
generate a base64 encoded 

13
00:00:20.715 --> 00:00:24.160
Gravatar URL. Let's go and 

14
00:00:24.200 --> 00:00:25.750
make a new file, and we will 

15
00:00:25.760 --> 00:00:28.470
call that user.js. Inside of 

16
00:00:28.480 --> 00:00:30.550
that, we have a function called 

17
00:00:30.580 --> 00:00:34.310
user. That will take in a name, 

18
00:00:35.690 --> 00:00:38.120
an email, and a website for the 

19
00:00:38.170 --> 00:00:40.000
person. Then we're simply going 

20
00:00:39.600 --> 00:00:42.090
to return an object that has 

21
00:00:42.100 --> 00:00:44.350
their name, has their email, 

22
00:00:44.630 --> 00:00:47.050
and has their 

23
00:00:47.060 --> 00:00:47.680
website. 

24
00:00:47.860 --> 00:00:50.820
Wes, Wes, 

25
00:00:50.830 --> 00:00:51.890
Wes, what are you doing? 

26
00:00:52.070 --> 00:00:54.870
Hopefully by now you're yelling 

27
00:00:54.880 --> 00:00:56.420
at me and saying, "Wes, if the 

28
00:00:56.430 --> 00:00:58.410
property name and the variable 

29
00:00:58.420 --> 00:00:59.890
that it's being sent to are the 

30
00:00:59.900 --> 00:01:01.690
same thing, we do not need to do 

31
00:01:01.700 --> 00:01:04.100
that." This is an improvement on 

32
00:01:04.110 --> 00:01:05.380
object literals. We can just put 

33
00:01:05.560 --> 00:01:07.990
them all on a single line and 

34
00:01:08.000 --> 00:01:10.040
return it there. Cool. Now we 

35
00:01:10.050 --> 00:01:11.670
have that function for the user. 

36
00:01:11.720 --> 00:01:13.410
Then let's create a function 

37
00:01:13.530 --> 00:01:16.550
called createURL. That is going 

38
00:01:16.560 --> 00:01:18.840
to take in someone's name, and 

39
00:01:18.850 --> 00:01:20.080
it's going to return to us 

40
00:01:20.420 --> 00:01:24.570
something like site.com/wes-bos, 

41
00:01:25.220 --> 00:01:27.340
assuming my name was Wes Bos. 

42
00:01:28.390 --> 00:01:30.160
That is a function, and we need 

43
00:01:30.370 --> 00:01:32.200
that slugify plugin that we 

44
00:01:32.480 --> 00:01:33.690
installed earlier. Let's 

45
00:01:33.700 --> 00:01:36.140
look at our package.json. We 

46
00:01:36.150 --> 00:01:43.370
installed this slug plugin. Now 

47
00:01:43.380 --> 00:01:44.970
I'm not inside of app here, but 

48
00:01:45.140 --> 00:01:46.990
if a module has a dependency on 

49
00:01:47.000 --> 00:01:48.450
it own, you just import it. 

50
00:01:48.800 --> 00:01:53.400
Import slug from slug. This one 

51
00:01:53.410 --> 00:01:55.860
doesn't need quotes around it. 

52
00:01:55.860 --> 00:01:57.650
Here what we are going to do is 

53
00:01:58.710 --> 00:02:00.500
return. Now we need that 

54
00:02:00.650 --> 00:02:02.590
base URL. Where's that base URL? 

55
00:02:02.900 --> 00:02:05.510
It's in our config. There it is, 

56
00:02:05.660 --> 00:02:07.170
so we can import that as well. 

57
00:02:07.620 --> 00:02:13.170
Import URL from config, don't 

58
00:02:13.170 --> 00:02:14.510
need the js. You see how we're 

59
00:02:14.585 --> 00:02:16.520
just deciding what we need? We 

60
00:02:16.530 --> 00:02:17.880
go into the file that we need 

61
00:02:17.730 --> 00:02:19.330
and just pluck the one item that 

62
00:02:19.340 --> 00:02:20.540
we need. Even though we 

63
00:02:20.550 --> 00:02:22.360
imported it into our main file 

64
00:02:22.590 --> 00:02:25.050
right here, API key and URL, 

65
00:02:25.180 --> 00:02:26.510
doesn't mean that it's available 

66
00:02:26.520 --> 00:02:28.230
in every other single module. If 

67
00:02:28.240 --> 00:02:29.750
you need something twice, you 

68
00:02:29.825 --> 00:02:30.990
need to import it twice. Don't 

69
00:02:31.000 --> 00:02:32.980
worry, Webpack won't duplicate 

70
00:02:32.990 --> 00:02:34.360
the code, it's smart enough to 

71
00:02:34.370 --> 00:02:37.190
just import it once. We have 

72
00:02:37.200 --> 00:02:39.260
this import right here, with our 

73
00:02:40.490 --> 00:02:43.930
return in here. We have our URL, 

74
00:02:43.970 --> 00:02:47.410
which is going to return the URL. 

75
00:02:49.300 --> 00:02:53.780
Then we want to do /users/ and 

76
00:02:53.890 --> 00:02:56.030
someone's actual name. We can 

77
00:02:56.040 --> 00:02:58.600
use the slug function, and pass 

78
00:02:58.760 --> 00:03:00.030
the name that we get passed in. 

79
00:03:00.350 --> 00:03:01.590
You see how we have a function 

80
00:03:01.600 --> 00:03:04.210
here that pulls in a variable 

81
00:03:04.220 --> 00:03:06.090
from another file, and a 

82
00:03:06.770 --> 00:03:08.870
function from an existing 

83
00:03:08.880 --> 00:03:10.450
package? We use that right 

84
00:03:10.460 --> 00:03:12.110
inside of there. Finally, 

85
00:03:12.120 --> 00:03:13.920
let's use a Gravatar, so 

86
00:03:13.995 --> 00:03:15.920
function gravatar. A Gravatar is 

87
00:03:15.995 --> 00:03:19.790
a globally recognized avatar. 

88
00:03:20.970 --> 00:03:22.710
You can get anyone's avatar if 

89
00:03:22.720 --> 00:03:24.470
you know their email. You just 

90
00:03:24.545 --> 00:03:24.770
have to base64 encode it. 

91
00:03:24.770 --> 00:03:31.830
How is this going to work? Well, 

92
00:03:31.880 --> 00:03:33.580
the way that a Gravatar URL 

93
00:03:33.400 --> 00:03:34.470
looks like is something like 

94
00:03:34.520 --> 00:03:39.320
this, photoURL = and it looks 

95
00:03:39.490 --> 00:03:42.180
like that avatar, but on the end 

96
00:03:42.190 --> 00:03:44.150
we have a base64 hash of their 

97
00:03:44.160 --> 00:03:47.940
actual name, so we need a base64 

98
00:03:47.570 --> 00:03:49.120
library. No problem, we'll go 

99
00:03:49.130 --> 00:03:52.020
grab one from npm and put this, 

100
00:03:52.095 --> 00:03:54.020
npm install base64--save. Npm 

101
00:03:54.095 --> 00:04:19.530
install base64--save installs 

102
00:04:19.540 --> 00:04:22.080
that module for us, and then I 

103
00:04:22.090 --> 00:04:23.820
can import it here. Import 

104
00:04:23.895 --> 00:04:29.530
base64 from base64. Now 

105
00:04:29.540 --> 00:04:30.610
let's take a second. Why can I 

106
00:04:30.620 --> 00:04:32.470
just do that? Well, the creator 

107
00:04:33.630 --> 00:04:34.660
of base64 package, sorry it's 

108
00:04:34.730 --> 00:04:38.460
base-64, has created it for us, 

109
00:04:38.790 --> 00:04:40.890
so that they have exported it as 

110
00:04:40.900 --> 00:04:43.660
a default. Then I can go ahead 

111
00:04:43.670 --> 00:04:46.280
and import it as anything I like. 

112
00:04:46.320 --> 00:04:47.870
In this case I'm using base64, 

113
00:04:48.710 --> 00:04:50.980
what we can do here is we'll say 

114
00:04:51.055 --> 00:04:55.950
hash = base64 email. We can make 

115
00:04:56.000 --> 00:04:58.200
this a template string and 

116
00:04:57.980 --> 00:05:01.200
pop in the actual 

117
00:05:01.200 --> 00:05:03.090
hash. Cool, so we have two 

118
00:05:03.100 --> 00:05:05.000
utility functions, as well as 

119
00:05:05.075 --> 00:05:06.770
the ability to create user name. 

120
00:05:07.000 --> 00:05:09.160
Now we've made this module that 

121
00:05:09.170 --> 00:05:11.640
does a bunch of stuff for us. If 

122
00:05:11.650 --> 00:05:13.410
we want to be able to use it in 

123
00:05:13.420 --> 00:05:16.290
other files, we simply stick 

124
00:05:16.300 --> 00:05:18.530
exports in front of them. This 

125
00:05:18.540 --> 00:05:20.470
is the main one, so I want that 

126
00:05:20.480 --> 00:05:21.930
to be default. I'm going to say 

127
00:05:22.410 --> 00:05:25.680
export default 

128
00:05:26.170 --> 00:05:29.250
function user, good. Then these 

129
00:05:29.260 --> 00:05:32.830
ones are just export and export. 

130
00:05:33.050 --> 00:05:35.210
These ones are named exports, 

131
00:05:35.410 --> 00:05:36.880
and this one is the default. 

132
00:05:37.150 --> 00:05:39.320
Now if I go back to app.js we 

133
00:05:38.530 --> 00:05:41.550
can go ahead and start using it. 

134
00:05:41.625 --> 00:05:42.260
I am just going to get rid of 

135
00:05:42.335 --> 00:05:43.410
this console.log, get rid of 

136
00:05:43.485 --> 00:05:45.080
this say hi, get rid of 

137
00:05:44.290 --> 00:05:45.540
everything in here. We've 

138
00:05:45.540 --> 00:05:47.740
got our imports and we are going 

139
00:05:47.750 --> 00:05:51.000
to import. Now how do we do a 

140
00:05:51.010 --> 00:05:53.570
default? We could say import 

141
00:05:53.580 --> 00:05:59.220
user from source/user. Good, but 

142
00:05:59.470 --> 00:06:01.480
what if I want to do named 

143
00:06:01.510 --> 00:06:03.560
exports as well? You could 

144
00:06:03.570 --> 00:06:06.920
simply do this. Comma, then do 

145
00:06:06.930 --> 00:06:08.650
your curly brackets, and we want 

146
00:06:08.725 --> 00:06:10.650
to import createURL and Gravatar 

147
00:06:11.590 --> 00:06:14.590
from those, and we're able to go 

148
00:06:14.600 --> 00:06:16.770
ahead and start to use them just 

149
00:06:16.780 --> 00:06:18.510
as we want. Let's try it out. 

150
00:06:18.770 --> 00:06:20.850
Let's first create a user object. 

151
00:06:20.925 --> 00:06:24.860
Const user = new user, and you 

152
00:06:24.870 --> 00:06:28.660
pass it Wes Bos first thing, and 

153
00:06:28.670 --> 00:06:29.720
the second thing we would need 

154
00:06:29.730 --> 00:06:32.890
to pass would be the email and 

155
00:06:32.900 --> 00:06:34.500
then the website, wesbos@gmail.

156
00:06:36.050 --> 00:06:38.290
com and the website is wesbos.

157
00:06:38.570 --> 00:06:40.530
com. Let's console.log the 

158
00:06:40.540 --> 00:06:41.670
user...Actually, let's not call 

159
00:06:41.745 --> 00:06:44.000
it user. Let's call it Wes, for 

160
00:06:44.075 --> 00:06:44.880
simplicity's sake. Now, you may 

161
00:06:44.890 --> 00:06:46.120
notice that this takes a little 

162
00:06:46.130 --> 00:06:47.710
bit longer this time, and that 

163
00:06:47.720 --> 00:06:50.050
is because this slug library is 

164
00:06:50.125 --> 00:06:53.120
fairly large because it does all 

165
00:06:53.130 --> 00:06:55.010
of the languages. You may want 

166
00:06:55.085 --> 00:06:56.460
to find a slimmer slug library 

167
00:06:56.470 --> 00:06:57.460
if you don't need all of the 

168
00:06:57.470 --> 00:06:59.710
features for it. If I open up 

169
00:06:59.720 --> 00:07:02.380
my index.html now, we should see 

170
00:07:02.390 --> 00:07:04.510
an object which has email, name, 

171
00:07:04.630 --> 00:07:06.460
and website. Good, I'm happy 

172
00:07:06.470 --> 00:07:08.650
with that. Now back here, let's 

173
00:07:08.660 --> 00:07:10.570
try the createURL function. We 

174
00:07:10.645 --> 00:07:12.170
say const profile = createURL, 

175
00:07:17.720 --> 00:07:20.870
and we are going to pass it wes.

176
00:07:21.360 --> 00:07:24.100
name. Make sure you console.log 

177
00:07:24.110 --> 00:07:26.840
profile as well. Refresh, now we 

178
00:07:26.850 --> 00:07:29.780
have the actual URL. That base 

179
00:07:29.790 --> 00:07:32.160
is pulling from our config file, 

180
00:07:32.340 --> 00:07:34.240
and this slug is pulling from 

181
00:07:34.315 --> 00:07:36.210
the slug package that we used. 

182
00:07:36.350 --> 00:07:37.410
Let's try the other one. 

183
00:07:37.485 --> 00:07:39.010
Gravatar const image = gravatar 

184
00:07:39.085 --> 00:07:44.740
wes.email. We actually get an 

185
00:07:44.930 --> 00:07:47.820
error her on line 14 of user.js, 

186
00:07:47.895 --> 00:07:52.190
and it's base64.encode. The 

187
00:07:52.200 --> 00:07:54.380
method is encode, and then we 

188
00:07:54.720 --> 00:07:57.230
have to return the photo URL 

189
00:07:57.240 --> 00:07:58.780
from our actual function. 

190
00:07:59.220 --> 00:08:01.260
Console.log the image, and there 

191
00:08:01.270 --> 00:08:02.880
we see a Gravatar URL. 

192
00:08:02.955 --> 00:08:05.010
Hopefully that shows you how you 

193
00:08:05.020 --> 00:08:09.080
can use modules to make nice and 

194
00:08:09.090 --> 00:08:10.460
tidy code bases. Put your 

195
00:08:10.470 --> 00:08:12.190
functions inside of their own 

196
00:08:12.300 --> 00:08:13.690
files. Then if you ever want to 

197
00:08:13.750 --> 00:08:15.830
use these functions in other 

198
00:08:15.840 --> 00:08:17.330
files, you can put them on npm 

199
00:08:17.405 --> 00:08:18.290
yourself, or you could share 

200
00:08:18.300 --> 00:08:20.530
them amongst your coworkers, and 

201
00:08:20.540 --> 00:08:21.450
they are much more easily 

202
00:08:21.525 --> 00:08:21.850
testable.

