WEBVTT

1
00:00:00.000 --> 00:00:00.000


2
00:00:02.310 --> 00:00:03.900
Temos três jeitos de declarar

3
00:00:03.900 --> 00:00:05.390
variáveis em JavaScript. Nós

4
00:00:05.690 --> 00:00:07.470
temos var, que é o que sempre temos usado.

5
00:00:07.480 --> 00:00:08.840
Agora temos dois jeitos novos, que

6
00:00:08.850 --> 00:00:11.080
são let e const. Esses dois

7
00:00:11.090 --> 00:00:12.840
têm alguns atributos

8
00:00:12.850 --> 00:00:13.970
que vão ser úteis

9
00:00:13.980 --> 00:00:15.750
para nós, mas primeiro

10
00:00:15.760 --> 00:00:16.800
temos que fazer uma revisão muito,

11
00:00:16.810 --> 00:00:18.880
muito rápida da palavra-chave var

12
00:00:18.970 --> 00:00:20.370
para que possamos entender

13
00:00:20.380 --> 00:00:22.220
os benefícios e as

14
00:00:22.230 --> 00:00:24.190
diferenças entre let e

15
00:00:24.265 --> 00:00:24.930
const. A primeira coisa que precisamos

16
00:00:24.940 --> 00:00:26.890
saber sobre variáveis var é

17
00:00:26.900 --> 00:00:28.450
que você pode redefini-las. Você

18
00:00:28.460 --> 00:00:30.560
também pode atualizá-las. Vamos

19
00:00:30.570 --> 00:00:32.570
fazer um console log em width, e vamos

20
00:00:32.610 --> 00:00:34.510
atualizar width para 200, e

21
00:00:34.520 --> 00:00:36.390
então vamos fazer um console log em width

22
00:00:36.490 --> 00:00:39.070
novamente. Quando atualizamos,

23
00:00:39.070 --> 00:00:40.990
você pode ver que temos 100, 200. Nada

24
00:00:41.000 --> 00:00:42.420
demais. Podemos atualizá-los.

25
00:00:42.430 --> 00:00:43.880
O que você também pode fazer é

26
00:00:43.890 --> 00:00:45.200
colocar um var na frente.

27
00:00:45.220 --> 00:00:46.040
Isso não é uma coisa que você

28
00:00:46.040 --> 00:00:47.510
deve fazer, mas todos nós

29
00:00:47.520 --> 00:00:48.940
já tivemos esse problema de falta

30
00:00:48.950 --> 00:00:50.350
de nomes para variáveis e

31
00:00:50.360 --> 00:00:51.600
acidentalmente usamos o mesmo nome

32
00:00:51.610 --> 00:00:53.690
novamente. O que vai acontecer

33
00:00:53.300 --> 00:00:55.350
aqui é que isso não faz

34
00:00:55.470 --> 00:00:57.420
nada. Funciona como

35
00:00:57.430 --> 00:00:58.630
esperado, mas ele reclama de

36
00:00:58.705 --> 00:01:00.830
você por estar criando o mesmo

37
00:01:01.130 --> 00:01:03.160
nome de variável duas vezes no mesmo

38
00:01:03.170 --> 00:01:05.880
escopo. Essa é a primeira coisa sobre

39
00:01:05.955 --> 00:01:06.890
variáveis var: elas podem ser

40
00:01:06.900 --> 00:01:08.420
atualizadas ou redefinidas.

41
00:01:08.750 --> 00:01:09.750
Outra coisa que precisamos saber

42
00:01:09.825 --> 00:01:11.590
sobre variáveis var é como elas

43
00:01:12.430 --> 00:01:13.540
são escopadas. Escopar essencialmente

44
00:01:13.550 --> 00:01:15.140
significa, "Onde essas

45
00:01:15.150 --> 00:01:18.780
variáveis estão disponíveis para mim?"

46
00:01:18.880 --> 00:01:21.060
Variáveis var são escopadas por função,

47
00:01:21.070 --> 00:01:22.650
o que quer dizer que elas estão

48
00:01:22.660 --> 00:01:23.990
disponíveis somente dentro da função

49
00:01:24.000 --> 00:01:25.520
em que elas foram criadas. Se

50
00:01:25.530 --> 00:01:27.130
elas não foram criadas dentro da

51
00:01:26.740 --> 00:01:28.100
função como é o caso

52
00:01:28.110 --> 00:01:29.810
aqui, elas são escopadas

53
00:01:29.885 --> 00:01:30.870
globalmente. Elas estão disponíveis na

54
00:01:30.880 --> 00:01:32.210
window, e é por isso que podemos digitar

55
00:01:32.460 --> 00:01:34.330
width no DevTools aqui. Mas

56
00:01:34.340 --> 00:01:35.840
e se eu criasse uma função

57
00:01:35.850 --> 00:01:37.680
aqui e colocasse minha var width dentro

58
00:01:37.690 --> 00:01:39.210
dela, e fizesse console log em

59
00:01:39.220 --> 00:01:40.900
width, e então eu rodasse?

60
00:01:41.280 --> 00:01:42.990
Vai funcionar? Claro,

61
00:01:42.990 --> 00:01:44.370
vai funcionar porque essa

62
00:01:44.380 --> 00:01:45.600
width está disponível dentro

63
00:01:45.610 --> 00:01:47.490
desta função. E se eu também

64
00:01:47.560 --> 00:01:48.910
tentasse fazer console log em width

65
00:01:49.180 --> 00:01:51.470
depois que eu defini width? Vai

66
00:01:51.480 --> 00:01:54.940
funcionar? Não funciona.

67
00:01:54.950 --> 00:01:56.250
Por que não funciona? Porque

68
00:01:56.260 --> 00:01:58.540
width está escopada apenas para aquela

69
00:01:58.550 --> 00:02:00.150
função. É uma variável local

70
00:02:00.160 --> 00:02:01.680
para esta função. Ela não está

71
00:02:01.690 --> 00:02:03.170
disponível fora de seus limites.

72
00:02:03.180 --> 00:02:04.140
Gosto de imaginar estas chaves

73
00:02:04.150 --> 00:02:05.920
da sua função como

74
00:02:05.930 --> 00:02:07.490
portões, e elas não estão

75
00:02:07.500 --> 00:02:08.990
disponíveis do lado de fora dos portões.

76
00:02:09.000 --> 00:02:10.700
Elas estão na prisão da função,

77
00:02:10.700 --> 00:02:12.350
você pode pensar

78
00:02:12.360 --> 00:02:14.960
desta forma. Isso é importante

79
00:02:14.970 --> 00:02:16.570
saber. O que você pode fazer é

80
00:02:16.580 --> 00:02:18.270
escrever "var width" aqui

81
00:02:18.280 --> 00:02:20.500
em cima, e você poderia atualizar

82
00:02:20.510 --> 00:02:22.380
depois. Agora, nós escopamos

83
00:02:22.455 --> 00:02:23.740
globalmente uma variável e estamos

84
00:02:23.750 --> 00:02:25.700
atualizando. Isso deve funcionar.

85
00:02:26.070 --> 00:02:27.260
Geralmente, não é uma coisa que

86
00:02:27.270 --> 00:02:28.790
você vai querer fazer. Você vai querer

87
00:02:28.865 --> 00:02:30.360
manter suas variáveis dentro da

88
00:02:29.970 --> 00:02:30.900
sua função. Se você precisar

89
00:02:30.910 --> 00:02:31.940
de alguma coisa fora dela, você

90
00:02:31.950 --> 00:02:33.510
vai querer retorná-la e guardá-la

91
00:02:33.520 --> 00:02:35.580
numa variável. Isso é o que

92
00:02:35.590 --> 00:02:37.860
temos que saber sobre

93
00:02:37.870 --> 00:02:39.700
escopo de funções. Vou mostrar

94
00:02:39.120 --> 00:02:41.660
para você um caso de uso onde

95
00:02:41.670 --> 00:02:43.300
o escopo de funções

96
00:02:43.310 --> 00:02:46.210
nos prejudica. Digamos que

97
00:02:46.210 --> 00:02:48.830
temos uma variável 'idade' e temos

98
00:02:48.840 --> 00:02:52.810
uma declaração if. Queremos

99
00:02:52.230 --> 00:02:58.540
criar um número de anos de cachorro. Se

100
00:02:58.600 --> 00:03:01.000
ele é maior que 12, vamos

101
00:03:01.010 --> 00:03:02.070
calcular sua idade de cachorro

102
00:03:02.080 --> 00:03:04.360
e fazer um console log "Você tem

103
00:03:09.380 --> 00:03:12.140
dogYears anos de cachorro". Se ele é

104
00:03:12.150 --> 00:03:13.870
maior que 12, queremos apenas

105
00:03:13.260 --> 00:03:14.250
fazer um console log. Estou usando

106
00:03:14.250 --> 00:03:15.960
crases aqui. Vamos

107
00:03:16.035 --> 00:03:17.170
apreder sobre isso no vídeo

108
00:03:17.180 --> 00:03:19.760
"Template Strings". Vamos

109
00:03:19.790 --> 00:03:21.990
salvar, e funciona.

110
00:03:22.320 --> 00:03:24.530
A única coisa que é meio

111
00:03:24.540 --> 00:03:27.490
esquisita aqui é que essa variável

112
00:03:27.780 --> 00:03:30.090
aqui, dogYears, é apenas

113
00:03:30.100 --> 00:03:31.350
uma variável temporária. Eu

114
00:03:31.360 --> 00:03:33.100
só precisava disso rapidamente

115
00:03:33.110 --> 00:03:34.430
para calcular algo e

116
00:03:34.440 --> 00:03:36.280
colocar num console log

117
00:03:36.290 --> 00:03:37.350
ou colocar numa string

118
00:03:37.360 --> 00:03:40.600
de alguma forma. E se eu for no meu

119
00:03:40.610 --> 00:03:42.020
console e digitar dogYears?

120
00:03:42.020 --> 00:03:44.390
Veja, você pode ver

121
00:03:44.400 --> 00:03:46.020
que dogYears vazou para

122
00:03:46.210 --> 00:03:48.100
fora desse if e

123
00:03:49.430 --> 00:03:51.470
agora é uma variável global. Ela

124
00:03:51.545 --> 00:03:50.630
agora vazou. Apesar de

125
00:03:50.640 --> 00:03:52.210
ser uma variável temporária

126
00:03:52.450 --> 00:03:53.760
que eu precisava apenas dentro

127
00:03:53.770 --> 00:03:56.070
desse if, porque variáveis

128
00:03:56.000 --> 00:03:57.590
var são escopadas por função --

129
00:03:58.260 --> 00:03:59.760
não tem função aqui -- então

130
00:03:59.960 --> 00:04:01.130
não vai escopar

131
00:04:01.140 --> 00:04:03.220
nessa função. Ela foi escopada

132
00:04:03.295 --> 00:04:06.050
ou teve que ser escopada

133
00:04:06.060 --> 00:04:07.740
na window inteira, o que é

134
00:04:07.750 --> 00:04:09.790
meio chato. Isso é

135
00:04:09.870 --> 00:04:11.830
um dos benefícios de usar

136
00:04:12.070 --> 00:04:15.010
let e const. Ao invés de ser

137
00:04:15.085 --> 00:04:17.950
escopada por função, ela é

138
00:04:18.025 --> 00:04:20.030
escopada no bloco. O que é um

139
00:04:20.040 --> 00:04:22.030
bloco? Aqui temos um bom exemplo.

140
00:04:22.090 --> 00:04:23.870
Qualquer hora que você vir uma

141
00:04:24.130 --> 00:04:25.480
chave abrindo e fechando,

142
00:04:25.850 --> 00:04:27.460
isso é uma declaração de bloco.

143
00:04:27.610 --> 00:04:28.790
Funções também são blocos.

144
00:04:29.100 --> 00:04:30.380
Eles ainda vão ser escopadas

145
00:04:30.330 --> 00:04:31.950
a uma função. No entanto, se estiver

146
00:04:31.960 --> 00:04:33.530
dentro dessa função ou se

147
00:04:33.540 --> 00:04:36.380
estiver dentro de outro elemento,

148
00:04:36.455 --> 00:04:39.280
ela será então

149
00:04:39.355 --> 00:04:40.750
escopada dentro daquelas

150
00:04:40.760 --> 00:04:42.560
chaves. Se eu pegar esse

151
00:04:43.010 --> 00:04:44.580
dogYears aqui e mudar para

152
00:04:44.650 --> 00:04:47.550
let, e recarregar, tudo

153
00:04:47.560 --> 00:04:50.190
funciona como queríamos. Mas se

154
00:04:50.200 --> 00:04:51.940
eu digitar dogYears aqui,

155
00:04:52.850 --> 00:04:53.920
ele diz, "dogYears não está

156
00:04:53.930 --> 00:04:55.860
definido." Por quê? Porque eu

157
00:04:56.590 --> 00:04:58.180
a declarei como uma variável let.

158
00:04:58.350 --> 00:04:59.720
Ela foi declarada somente dentro de um

159
00:04:59.730 --> 00:05:01.550
escopo de bloco agora, não um escopo

160
00:05:01.560 --> 00:05:03.450
de função, um escopo de bloco, e essa

161
00:05:03.460 --> 00:05:05.200
variável temporária não

162
00:05:05.240 --> 00:05:07.440
vazou. Similarmente, podemos

163
00:05:07.450 --> 00:05:09.580
também usar uma variável const aqui

164
00:05:10.220 --> 00:05:12.800
e vai funcionar do mesmo jeito.

165
00:05:12.875 --> 00:05:14.110
Se eu digitar dogYears, temos, "

166
00:05:14.380 --> 00:05:15.960
dogYears não está definido." Let

167
00:05:16.035 --> 00:05:17.900
e const, um dos atributos

168
00:05:17.990 --> 00:05:19.660
de ambos é que eles são

169
00:05:19.750 --> 00:05:21.660
escopados por bloco ao invés de serem

170
00:05:21.720 --> 00:05:23.030
escopados por função. No próximo

171
00:05:23.030 --> 00:05:25.050
vídeo, vamos ver mais a

172
00:05:23.580 --> 00:05:24.930
fundo alguns dos outros

173
00:05:24.940 --> 00:05:26.590
atributos de variáveis

174
00:05:26.665 --> 00:05:26.990
let e const.
