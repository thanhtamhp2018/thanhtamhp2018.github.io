WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:03.000 --> 00:00:03.980
Destructuring also works with 

3
00:00:04.070 --> 00:00:06.930
arrays of...first a joke. Why 

4
00:00:06.940 --> 00:00:08.540
did the developer leave his job? 

5
00:00:09.200 --> 00:00:11.500
Because he wanted "arrays."

6
00:00:11.500 --> 00:00:14.760
 Terrible. Now we 

7
00:00:14.770 --> 00:00:16.570
need to talk about destructuring 

8
00:00:16.180 --> 00:00:17.660
with arrays. Sometimes you have 

9
00:00:17.670 --> 00:00:20.240
some data where it's based on 

10
00:00:20.250 --> 00:00:21.920
its index value. You want to get 

11
00:00:21.930 --> 00:00:23.590
the first, the second and the 

12
00:00:22.930 --> 00:00:24.740
third thing out. Where you 

13
00:00:24.340 --> 00:00:26.380
might be able to say 'const name = 

14
00:00:26.455 --> 00:00:31.560
details', so the first one. You 

15
00:00:31.570 --> 00:00:34.240
could say 'const', the D is 'details'

16
00:00:33.840 --> 00:00:36.010
. The second one, you get the 

17
00:00:36.020 --> 00:00:37.000
point what I'm doing here. 

18
00:00:37.490 --> 00:00:38.840
That's no way to live your life. 

19
00:00:39.430 --> 00:00:41.080
What we can do is use 

20
00:00:41.155 --> 00:00:43.480
destructuring, where we can say 'const'

21
00:00:42.020 --> 00:00:44.770
, and instead of using curly 

22
00:00:44.780 --> 00:00:46.080
brackets -- because when you 

23
00:00:46.090 --> 00:00:47.440
pull from an object, you use 

24
00:00:47.450 --> 00:00:49.400
curly brackets to destructure. 

25
00:00:49.360 --> 00:00:51.290
When you pull from an array, you 

26
00:00:51.290 --> 00:00:52.690
use square brackets to 

27
00:00:52.765 --> 00:00:53.490
destructure. Similarly, 

28
00:00:53.565 --> 00:00:55.080
we're going to learn about maps 

29
00:00:55.090 --> 00:00:56.350
and sets. When you pull from a 

30
00:00:56.360 --> 00:00:57.800
map, you'll use curly brackets. 

31
00:00:57.810 --> 00:00:58.950
When you pull from a set, you'll 

32
00:00:58.960 --> 00:01:01.390
use square brackets. We will 

33
00:01:01.400 --> 00:01:02.930
say ' = details'

34
00:01:03.005 --> 00:01:10.280
. That's just going to take the 

35
00:01:10.290 --> 00:01:11.350
first, the second, and the third 

36
00:01:11.410 --> 00:01:13.210
thing, and make us a whole bunch 

37
00:01:13.220 --> 00:01:14.270
of variables. 'Console.log(

38
00:01:14.270 --> 00:01:16.720
name, ID, website)', see what we 

39
00:01:16.730 --> 00:01:20.150
got, "Wes Bos 1 2 3 wesbos.

40
00:01:20.100 --> 00:01:22.570
com" Cool. That is very helpful 

41
00:01:22.580 --> 00:01:24.600
when you have index-based stuff. 

42
00:01:24.610 --> 00:01:25.690
It could also be helpful when 

43
00:01:25.700 --> 00:01:28.150
you have a comma-separated list 

44
00:01:28.330 --> 00:01:30.430
or string. Let's say we're given 

45
00:01:30.440 --> 00:01:31.840
some data in a string that looks 

46
00:01:31.850 --> 00:01:33.140
like this. We have 'Basketball', 

47
00:01:33.215 --> 00:01:34.740
'Sports', '90201' and '23'. 

48
00:01:35.050 --> 00:01:36.600
That's the item name, the item 

49
00:01:36.610 --> 00:01:39.200
category, the item SKU, and the 

50
00:01:39.250 --> 00:01:41.770
item inventory left on hand. You 

51
00:01:41.780 --> 00:01:43.340
say, "Thanks for the data, but 

52
00:01:43.240 --> 00:01:44.520
that's just a string. That's not 

53
00:01:44.530 --> 00:01:46.590
really helping me out." We do 

54
00:01:46.600 --> 00:01:47.990
know that one thing that we can 

55
00:01:48.065 --> 00:01:49.400
do if the data is perfectly 

56
00:01:49.410 --> 00:01:51.170
separated by some sort of 

57
00:01:51.180 --> 00:01:53.330
separator is we could say data.

58
00:01:53.630 --> 00:01:56.480
split it based on some sort of 

59
00:01:56.630 --> 00:01:57.860
splitter, right here. Then 

60
00:01:58.240 --> 00:02:00.300
we've got a good array here. 

61
00:02:00.730 --> 00:02:01.980
Then you know that you can also 

62
00:02:02.055 --> 00:02:04.380
destructure an array. Let's say 'const'

63
00:02:04.455 --> 00:02:06.750
, let's just destructure that 

64
00:02:06.760 --> 00:02:08.270
baby right away. '

65
00:02:08.270 --> 00:02:08.270
 = 

66
00:02:08.345 --> 00:02:18.350
data.split'. Why? This is going 

67
00:02:18.360 --> 00:02:20.180
to return in array right here, 

68
00:02:20.360 --> 00:02:21.660
and then just immediately we're 

69
00:02:21.670 --> 00:02:23.280
going to destructure that array 

70
00:02:23.500 --> 00:02:26.320
into its own four variables that 

71
00:02:26.330 --> 00:02:27.790
we have here. If I console 

72
00:02:27.800 --> 00:02:29.560
log those variable, we should 

73
00:02:29.590 --> 00:02:32.330
see "Basketball Sports 90210 23". 

74
00:02:33.180 --> 00:02:34.710
Good. I'm really happy with that. 

75
00:02:34.980 --> 00:02:36.020
One question, though, is what 

76
00:02:36.030 --> 00:02:38.300
happens if the data is not great, 

77
00:02:38.310 --> 00:02:41.180
and you have some extra stuff on 

78
00:02:41.190 --> 00:02:43.590
here, like 'Wes' and 'Bos' and 'cool'

79
00:02:44.250 --> 00:02:46.250
? Three extra items, what 

80
00:02:46.260 --> 00:02:47.410
happens to them when you 

81
00:02:47.485 --> 00:02:48.920
destructure something that is 

82
00:02:48.930 --> 00:02:51.090
not the same length as the 

83
00:02:51.100 --> 00:02:54.550
actual array? Well, nothing 

84
00:02:54.550 --> 00:02:56.780
happens, because it will just 

85
00:02:56.840 --> 00:02:58.500
throw those extra ones out. 

86
00:02:58.510 --> 00:03:01.420
Watch, if I go ahead and console 

87
00:03:01.430 --> 00:03:03.570
log all of these again, you'll 

88
00:03:03.610 --> 00:03:04.930
see that they still work. Then 

89
00:03:04.940 --> 00:03:07.470
there are not variables to get 

90
00:03:07.480 --> 00:03:08.520
these last ones, because I did 

91
00:03:08.530 --> 00:03:10.680
not destructure them. Sometimes 

92
00:03:10.690 --> 00:03:13.810
you do want to get the rest of 

93
00:03:13.820 --> 00:03:15.550
them. I say "the rest" of them, 

94
00:03:15.560 --> 00:03:16.640
because there's this thing in 

95
00:03:16.715 --> 00:03:17.690
ES6. We're going to learn a 

96
00:03:17.690 --> 00:03:18.930
little bit more about in a 

97
00:03:18.940 --> 00:03:21.910
future video. There is a helpful 

98
00:03:21.920 --> 00:03:23.630
use case in destructuring with 

99
00:03:23.640 --> 00:03:25.760
using the rest. Let's say I have 

100
00:03:25.770 --> 00:03:27.590
a team, and I want to know who's 

101
00:03:27.590 --> 00:03:29.390
the captain, who's he assisting 

102
00:03:29.400 --> 00:03:31.620
captain, and who is the rest of 

103
00:03:31.630 --> 00:03:33.790
the actual team? I'm going to 

104
00:03:33.000 --> 00:03:34.900
make myself a quick array here. 

105
00:03:37.660 --> 00:03:39.880
I've got a list of names here. 'Wes'

106
00:03:39.955 --> 00:03:41.880
 is the 'captain', 'Harry' is 

107
00:03:41.955 --> 00:03:41.870
the 'assistant captain', and 

108
00:03:41.880 --> 00:03:43.700
then the rest of the team is 

109
00:03:43.710 --> 00:03:45.460
just going to be part of the 

110
00:03:45.470 --> 00:03:47.560
team. How would you destructure 

111
00:03:47.520 --> 00:03:49.370
that into Captain, Harry and 

112
00:03:49.380 --> 00:03:51.330
then the rest? We say 'const 

113
00:03:51.330 --> 00:03:56.150
', and 

114
00:03:56.160 --> 00:03:57.900
then we do... Ideally you 

115
00:03:57.975 --> 00:03:59.500
want to say team. Let's just do 

116
00:03:59.500 --> 00:04:01.370
that ' = team', or not team. I 

117
00:04:01.445 --> 00:04:02.970
already used that variable. 

118
00:04:03.045 --> 00:04:04.570
We'll call them ' = 

119
00:04:04.645 --> 00:04:06.340
team. Let's see what that gives 

120
00:04:06.350 --> 00:04:10.620
us. "Captain is Wes." Assistant 

121
00:04:11.750 --> 00:04:14.080
is not defined because I don't 

122
00:04:14.155 --> 00:04:16.000
know how to spell assistant...is 

123
00:04:16.080 --> 00:04:17.620
Harry. Then what are 'players'? "

124
00:04:17.695 --> 00:04:21.240
Sarah". 'Sara' is not the only 'player'

125
00:04:21.315 --> 00:04:23.240
, there's also 'Keegan' and 'Riker'

126
00:04:23.930 --> 00:04:25.290
. How would we get them on? 

127
00:04:25.650 --> 00:04:27.160
We use what's called the 'rest 

128
00:04:27.235 --> 00:04:29.720
operator', and it does exactly 

129
00:04:29.730 --> 00:04:31.050
what it says. It just gives you 

130
00:04:31.060 --> 00:04:34.040
the rest of them. Let's take a 

131
00:04:34.050 --> 00:04:35.810
look now. Where's 'players'? 'Players'

132
00:04:35.970 --> 00:04:38.300
 is an array of whatever's left. 

133
00:04:38.330 --> 00:04:39.480
Sometimes you want to grab the 

134
00:04:39.490 --> 00:04:40.990
first, the second, and the third, 

135
00:04:41.065 --> 00:04:42.360
and then you just want to bundle 

136
00:04:42.370 --> 00:04:44.260
whatever else is on the end of 

137
00:04:44.270 --> 00:04:46.670
that array into the rest of the 

138
00:04:46.680 --> 00:04:48.450
array. That is where you can use 

139
00:04:48.460 --> 00:04:49.790
the 'rest operator'. We're 

140
00:04:49.865 --> 00:04:50.820
going to talk much more about 

141
00:04:50.830 --> 00:04:53.220
this. You probably may also have 

142
00:04:53.360 --> 00:04:55.010
heard of this 'spread operator' 

143
00:04:54.080 --> 00:04:55.460
which looks exactly the same. 

144
00:04:55.650 --> 00:04:56.820
We'll dive into that in future 

145
00:04:56.830 --> 00:04:57.280
videos.

