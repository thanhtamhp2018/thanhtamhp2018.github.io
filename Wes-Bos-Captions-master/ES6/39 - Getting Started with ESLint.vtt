WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.540 --> 00:00:04.310
ESLint is an indispensable code 

3
00:00:04.310 --> 00:00:05.730
quality tool when you're writing 

4
00:00:05.650 --> 00:00:06.940
any type of JavaScript, 

5
00:00:06.950 --> 00:00:09.390
especially ES6. You may have 

6
00:00:09.480 --> 00:00:10.800
used JSHint or JSLint in the 

7
00:00:10.810 --> 00:00:12.240
past. However, it seems to be 

8
00:00:12.315 --> 00:00:13.220
that most of the community has 

9
00:00:13.230 --> 00:00:14.570
moved over to ESLint, 

10
00:00:14.920 --> 00:00:15.990
specifically because they have 

11
00:00:16.000 --> 00:00:17.930
support for all of the new ES6 

12
00:00:17.880 --> 00:00:19.720
features. Now what is ESLint? 

13
00:00:19.795 --> 00:00:21.690
ESLint essentially, it hurts 

14
00:00:21.700 --> 00:00:22.780
your feelings. It looks at your 

15
00:00:22.790 --> 00:00:24.900
code and tells you what exactly 

16
00:00:24.910 --> 00:00:26.600
is wrong with it. At first 

17
00:00:26.610 --> 00:00:27.300
it seems a little bit 

18
00:00:27.500 --> 00:00:28.390
overwhelming because it tells 

19
00:00:28.400 --> 00:00:29.980
you everything is wrong with 

20
00:00:29.990 --> 00:00:31.700
your code, but it's all a matter 

21
00:00:31.710 --> 00:00:33.580
of, A, getting it configured 

22
00:00:33.590 --> 00:00:35.030
properly for your coding style, 

23
00:00:35.040 --> 00:00:36.520
and B, actually understanding 

24
00:00:36.700 --> 00:00:38.060
why are these errors happening. 

25
00:00:38.610 --> 00:00:39.570
In the long run, it's going to 

26
00:00:39.580 --> 00:00:41.680
make you a much better developer. 

27
00:00:41.755 --> 00:00:43.380
Let's take a look right here. 

28
00:00:43.500 --> 00:00:44.910
I've just got some of my code 

29
00:00:44.920 --> 00:00:47.060
right here and I popped it into 

30
00:00:47.070 --> 00:00:48.380
the ESLint. It just starts 

31
00:00:48.430 --> 00:00:49.480
yelling at you for all the 

32
00:00:49.490 --> 00:00:50.640
things that you have done wrong, 

33
00:00:50.650 --> 00:00:52.660
like let's see, on the first one, 

34
00:00:52.670 --> 00:00:54.650
space after keyword was removed. 

35
00:00:55.430 --> 00:00:57.320
Here we go. Extra space after 

36
00:00:57.330 --> 00:00:59.430
the keyword conditions was using, 

37
00:00:59.440 --> 00:01:00.520
right here, it was a little 

38
00:01:00.520 --> 00:01:02.180
space. It will do little 

39
00:01:02.190 --> 00:01:04.760
things like that, as well as 

40
00:01:04.770 --> 00:01:06.910
catch things for you where maybe 

41
00:01:06.985 --> 00:01:08.330
you used a variable name twice, 

42
00:01:08.340 --> 00:01:09.880
or maybe you have an unused 

43
00:01:10.000 --> 00:01:11.730
variable name, or maybe you use 

44
00:01:11.730 --> 00:01:14.000
the wrong var, let, or const. 

45
00:01:14.300 --> 00:01:15.440
All kinds of different stuff 

46
00:01:15.480 --> 00:01:17.540
where this is going to come back 

47
00:01:17.550 --> 00:01:18.900
and bite you, and ESLint is 

48
00:01:18.900 --> 00:01:20.450
going to catch them before they 

49
00:01:20.460 --> 00:01:22.770
actually cause an issue. I'm 

50
00:01:22.820 --> 00:01:24.080
going to go through setting it 

51
00:01:24.090 --> 00:01:25.690
up, getting it installed, and 

52
00:01:25.765 --> 00:01:27.180
then I'm going to show you how 

53
00:01:27.240 --> 00:01:28.990
do you configure it and what is 

54
00:01:29.000 --> 00:01:30.200
your process for actually 

55
00:01:30.210 --> 00:01:31.830
understanding how it works. 

56
00:01:31.970 --> 00:01:33.260
In my experience, the first time 

57
00:01:33.270 --> 00:01:35.600
someone uses it takes maybe an 

58
00:01:35.610 --> 00:01:37.440
hour or two to get it really 

59
00:01:37.450 --> 00:01:38.960
where they like it, but you're 

60
00:01:38.970 --> 00:01:40.170
going to be writing better code 

61
00:01:40.245 --> 00:01:40.860
and you're going to earn that 

62
00:01:40.870 --> 00:01:42.780
time back after no time. 

63
00:01:42.855 --> 00:01:44.110
There's a few things we need to 

64
00:01:44.170 --> 00:01:45.730
in order to get started. First 

65
00:01:45.805 --> 00:01:47.350
of all, you need nodejs and npm 

66
00:01:47.425 --> 00:01:49.270
installed. Chances are, most of 

67
00:01:48.870 --> 00:01:50.240
you already have this installed. 

68
00:01:50.250 --> 00:01:51.940
If you don't know, head on over 

69
00:01:51.950 --> 00:01:54.580
to your terminal and type node-v, 

70
00:01:54.655 --> 00:01:55.890
and it'll tell you what version 

71
00:01:55.900 --> 00:01:57.270
of node you have. Make sure 

72
00:01:57.345 --> 00:01:57.940
you have at least version four 

73
00:01:57.950 --> 00:02:00.200
or up, and npm-v make sure you 

74
00:02:00.200 --> 00:02:02.260
have at least version three or 

75
00:02:02.300 --> 00:02:03.550
up, and that means you're in 

76
00:02:03.560 --> 00:02:04.800
good shape. If you have an 

77
00:02:04.810 --> 00:02:06.470
old version or you get an error, 

78
00:02:06.480 --> 00:02:09.110
like node is not a command, go 

79
00:02:09.510 --> 00:02:10.940
to nodejs.org and download the 

80
00:02:10.950 --> 00:02:12.270
latest version. It will just 

81
00:02:12.280 --> 00:02:13.350
give you the thing or you click 

82
00:02:13.360 --> 00:02:14.590
next, next, next, and get that 

83
00:02:14.720 --> 00:02:16.000
installed. Once you have 

84
00:02:16.010 --> 00:02:17.040
that installed, we need to 

85
00:02:17.620 --> 00:02:19.100
install ESLint. The way that 

86
00:02:19.175 --> 00:02:21.130
ESLint is going to work is we're 

87
00:02:21.190 --> 00:02:22.050
going to type ESLint, and we're 

88
00:02:22.050 --> 00:02:24.150
going to lint a file called 

89
00:02:24.225 --> 00:02:26.690
badcode.js. When you run that 

90
00:02:26.700 --> 00:02:28.270
it's going to give us either an 

91
00:02:28.280 --> 00:02:30.420
error or actually what problems 

92
00:02:30.480 --> 00:02:33.730
are with our code. To install 

93
00:02:33.805 --> 00:02:35.730
that, you type npminstall-g. 

94
00:02:35.805 --> 00:02:37.300
What -g is going to do is 

95
00:02:37.310 --> 00:02:38.850
install globally on your machine, 

96
00:02:39.050 --> 00:02:40.470
so I have that ESLint command. 

97
00:02:40.545 --> 00:02:42.590
Then you type ESLint and hit 

98
00:02:42.660 --> 00:02:44.010
enter. I'm not going to do that, 

99
00:02:44.020 --> 00:02:45.560
because I already have it. A 

100
00:02:45.570 --> 00:02:47.940
lot of people on OSX, on a Mac, 

101
00:02:47.950 --> 00:02:48.930
they're going to get a problem 

102
00:02:48.940 --> 00:02:51.490
with permissions. You type sudo 

103
00:02:51.565 --> 00:02:53.100
npm install, or figure out 

104
00:02:53.110 --> 00:02:54.900
actually how to get npm install 

105
00:02:55.020 --> 00:02:57.100
working just properly. If you 

106
00:02:57.110 --> 00:02:58.510
have that properly installed, 

107
00:02:58.520 --> 00:03:00.700
you should be able to type 

108
00:03:00.775 --> 00:03:00.600
ESLint--version and it should 

109
00:03:02.250 --> 00:03:03.770
tell you that you have at least 

110
00:03:03.780 --> 00:03:06.060
version two or up, but do 

111
00:03:06.060 --> 00:03:06.930
yourself a favor and jut 

112
00:03:06.940 --> 00:03:08.990
download the latest version of 

113
00:03:09.065 --> 00:03:12.030
ESLint. Now, we're going to 

114
00:03:12.040 --> 00:03:13.620
be working from the command line. 

115
00:03:13.695 --> 00:03:14.390
I'm going to show you how to 

116
00:03:14.400 --> 00:03:16.180
integrate it into your text 

117
00:03:16.190 --> 00:03:17.960
editor in just a bit, but let's 

118
00:03:17.970 --> 00:03:19.740
get it up and running. How do 

119
00:03:19.750 --> 00:03:21.740
you actually get it to work? 

120
00:03:21.815 --> 00:03:21.730
You're not going to paste it 

121
00:03:21.740 --> 00:03:22.890
into this little box every 

122
00:03:22.900 --> 00:03:23.890
single time you want to check 

123
00:03:23.900 --> 00:03:25.370
your code quality. Ideally 

124
00:03:25.380 --> 00:03:26.420
what's going to happen is we're 

125
00:03:26.495 --> 00:03:28.420
going to have something that 

126
00:03:27.080 --> 00:03:28.190
runs on our command line, 

127
00:03:28.420 --> 00:03:29.270
something that runs in our 

128
00:03:29.280 --> 00:03:30.800
editor, or something that runs 

129
00:03:30.810 --> 00:03:32.760
on a Git hook before you commit 

130
00:03:32.770 --> 00:03:34.710
your actual code. Let's start 

131
00:03:34.720 --> 00:03:36.420
via the command line. You just 

132
00:03:36.495 --> 00:03:38.420
type ESLint and type badcode. 

133
00:03:39.000 --> 00:03:40.300
That's a file that I've included 

134
00:03:40.310 --> 00:03:42.210
in this folder here. What that's 

135
00:03:42.210 --> 00:03:43.710
going to do is it's going to 

136
00:03:43.310 --> 00:03:45.460
scan our file and tell us what 

137
00:03:45.470 --> 00:03:48.140
is actually wrong with it. First 

138
00:03:48.150 --> 00:03:49.460
of all, it seems like there's a 

139
00:03:49.470 --> 00:03:51.780
problem parsing this actual, and 

140
00:03:51.390 --> 00:03:52.850
this is a pretty common thing. 

141
00:03:53.030 --> 00:03:54.860
It's telling me it's on line 1 

142
00:03:54.935 --> 00:03:57.920
of column 38. If you look here 

143
00:03:57.930 --> 00:03:59.660
at line one, column 38, that's 

144
00:03:59.670 --> 00:04:01.300
actually where the error is. By 

145
00:04:01.375 --> 00:04:03.850
default ESLint doesn't know 

146
00:04:03.860 --> 00:04:05.450
about arrow functions, and this 

147
00:04:05.460 --> 00:04:08.340
is where the settings for ESLint 

148
00:04:07.990 --> 00:04:09.860
actually start to come in handy. 

149
00:04:10.130 --> 00:04:12.750
Now the ESLint settings, you can 

150
00:04:12.760 --> 00:04:13.980
do them globally on your 

151
00:04:14.190 --> 00:04:16.150
computer and I'll show that in a 

152
00:04:15.380 --> 00:04:17.050
second. Or you can do it project 

153
00:04:17.060 --> 00:04:18.630
by project. A lot of people 

154
00:04:18.640 --> 00:04:19.770
prefer to do it project by 

155
00:04:19.780 --> 00:04:21.020
project because there's 

156
00:04:21.030 --> 00:04:22.150
different coding styles 

157
00:04:22.160 --> 00:04:23.570
depending on which project or 

158
00:04:23.580 --> 00:04:25.100
team you are working with. 

159
00:04:25.800 --> 00:04:27.530
We are going to go ahead and 

160
00:04:27.540 --> 00:04:30.450
create what's called an eslintrc 

161
00:04:30.060 --> 00:04:33.000
file in the folder right here, 

162
00:04:33.075 --> 00:04:34.540
and that's going to hold all of 

163
00:04:34.550 --> 00:04:37.360
our actual settings. I'm 

164
00:04:37.440 --> 00:04:39.180
going to say touch.eslintrc. 

165
00:04:39.255 --> 00:04:40.820
That will have created a new 

166
00:04:40.830 --> 00:04:43.490
file called .eslintrc. Sometimes 

167
00:04:43.500 --> 00:04:45.180
some computers hide files that 

168
00:04:45.190 --> 00:04:46.670
start with dot, so you might not 

169
00:04:46.680 --> 00:04:47.720
immediately see it in your 

170
00:04:47.850 --> 00:04:49.300
Finder. However, if you go to 

171
00:04:49.310 --> 00:04:51.050
your editor and open that folder 

172
00:04:51.240 --> 00:04:53.940
you should see a .eslintrc file. 

173
00:04:54.190 --> 00:04:55.410
Open that up, now it's going to 

174
00:04:55.410 --> 00:04:57.210
be empty. Inside of this 

175
00:04:57.285 --> 00:04:58.940
eslintrc file we are going to 

176
00:04:58.950 --> 00:05:01.090
write json, which is full of all 

177
00:05:01.100 --> 00:05:03.070
of our settings. To write json, 

178
00:05:03.145 --> 00:05:06.900
you open up an object and we now 

179
00:05:06.910 --> 00:05:09.460
need to specify a whole bunch of 

180
00:05:09.470 --> 00:05:11.030
options that we need. What 

181
00:05:11.040 --> 00:05:12.940
are the possible options? Well, 

182
00:05:13.015 --> 00:05:15.000
ESLint is full of options, and 

183
00:05:15.010 --> 00:05:15.810
it can be a little bit 

184
00:05:15.820 --> 00:05:17.440
overwhelming. Look at right 

185
00:05:17.440 --> 00:05:18.380
here. First of all we have an 

186
00:05:18.390 --> 00:05:20.450
environments. Where are you 

187
00:05:20.460 --> 00:05:21.980
actually writing your JavaScript? 

188
00:05:21.980 --> 00:05:23.570
Are you writing it for Node? Are 

189
00:05:23.570 --> 00:05:24.680
you writing it for your browser? 

190
00:05:24.755 --> 00:05:25.720
Are you writing amd, Mocha, 

191
00:05:25.795 --> 00:05:27.320
Jasmine, PhantomJS, QUnit, all 

192
00:05:26.500 --> 00:05:28.750
the way? You see that we are 

193
00:05:29.250 --> 00:05:31.440
writing ES6 for the browser. We 

194
00:05:31.440 --> 00:05:33.130
might also want to write it for 

195
00:05:33.130 --> 00:05:35.940
Node. There's also all these 

196
00:05:35.950 --> 00:05:37.790
different rules. This is all the 

197
00:05:37.800 --> 00:05:39.420
possible rules that you can have. 

198
00:05:39.495 --> 00:05:41.010
We'll look at a shortcut way, 

199
00:05:41.020 --> 00:05:42.270
because there's no way you have 

200
00:05:42.280 --> 00:05:44.490
time to make a decision about 

201
00:05:44.500 --> 00:05:46.030
every single one of these rules. 

202
00:05:46.750 --> 00:05:48.500
First of all, what we want to do 

203
00:05:48.575 --> 00:05:49.980
is say environment. We're 

204
00:05:50.055 --> 00:05:51.670
writing json here, you must use 

205
00:05:51.710 --> 00:05:55.090
double quotes. Nth, and here we 

206
00:05:55.100 --> 00:05:56.380
set all the environments that we 

207
00:05:56.470 --> 00:05:58.030
would like to write our code in. 

208
00:05:58.105 --> 00:05:59.770
We're going to say ES6 is an 

209
00:05:59.770 --> 00:06:00.590
environment we would like to 

210
00:06:00.600 --> 00:06:02.170
write our code in. That is true. 

211
00:06:02.530 --> 00:06:03.610
Also you may want to put the 

212
00:06:03.620 --> 00:06:05.120
browser, since we are writing in 

213
00:06:05.130 --> 00:06:06.610
the browser. If you are writing 

214
00:06:06.610 --> 00:06:08.620
in Node then that would also be 

215
00:06:08.630 --> 00:06:10.250
handy to set to true. And 

216
00:06:10.260 --> 00:06:11.190
finally, if you're ever writing 

217
00:06:11.200 --> 00:06:12.610
some jQuery it's helpful to put 

218
00:06:12.685 --> 00:06:14.210
jQuery in there because 

219
00:06:14.285 --> 00:06:15.100
otherwise it's going to complain 

220
00:06:15.110 --> 00:06:16.540
about certain things like the 

221
00:06:16.550 --> 00:06:18.070
dollar sign not being defined 

222
00:06:18.080 --> 00:06:20.190
when it clearly is. I'm going 

223
00:06:20.265 --> 00:06:21.570
to keep it just at ES6 and 

224
00:06:21.550 --> 00:06:23.090
browser. However, you can always 

225
00:06:23.100 --> 00:06:26.140
go to the ESLint, go to user 

226
00:06:26.150 --> 00:06:28.200
guide, and go on rules, and 

227
00:06:28.200 --> 00:06:29.450
you'll be able to see all the 

228
00:06:29.460 --> 00:06:31.580
possible rules, as well as if 

229
00:06:31.670 --> 00:06:34.160
you go to configuring ESLint. 

230
00:06:33.760 --> 00:06:36.370
You're going to see a list of 

231
00:06:36.445 --> 00:06:38.250
all of the possible environments. 

232
00:06:40.270 --> 00:06:41.590
Take a look here, specifying 

233
00:06:41.600 --> 00:06:43.400
environments, browser, Node, 

234
00:06:43.475 --> 00:06:45.710
CommonJS, ES6, worker, AMD. The 

235
00:06:45.720 --> 00:06:46.910
ones that we all looked about. 

236
00:06:47.130 --> 00:06:48.820
You can take a look at those. 

237
00:06:49.130 --> 00:06:50.550
Now, I've set the environment 

238
00:06:50.625 --> 00:06:52.790
ES6 to be true, and now we 

239
00:06:52.190 --> 00:06:55.070
should be able to run ESLint 

240
00:06:55.145 --> 00:06:55.470
badcode. It doesn't tell us 

241
00:06:55.480 --> 00:06:57.290
anything. Why is that? Because 

242
00:06:57.300 --> 00:06:58.920
by default ESLint doesn't have 

243
00:06:58.930 --> 00:07:00.380
any rules enabled. You have to 

244
00:07:00.390 --> 00:07:02.200
turn on all the rules. 

245
00:07:02.860 --> 00:07:04.770
Rather than you having to go to 

246
00:07:05.160 --> 00:07:08.140
user guide, rules and just wade 

247
00:07:08.150 --> 00:07:09.350
through all of these possible 

248
00:07:09.360 --> 00:07:11.020
rules, what happens is that 

249
00:07:11.030 --> 00:07:12.850
there are handy presets out 

250
00:07:12.860 --> 00:07:14.450
there for other people that have 

251
00:07:14.450 --> 00:07:16.570
put together. There's one is 

252
00:07:16.645 --> 00:07:19.880
the ESLint recommended. The way 

253
00:07:19.890 --> 00:07:21.310
that you pick up someone else's 

254
00:07:21.320 --> 00:07:23.590
preset is you say extends and 

255
00:07:23.665 --> 00:07:28.680
you say ESLint recommended. Give 

256
00:07:28.690 --> 00:07:30.100
that a save. Now if we go 

257
00:07:30.110 --> 00:07:31.700
back to our terminal and rerun 

258
00:07:31.710 --> 00:07:34.150
that, there we go. Now it's 

259
00:07:34.160 --> 00:07:36.520
going to tell us, reject is 

260
00:07:36.530 --> 00:07:37.920
define but never used, 

261
00:07:38.130 --> 00:07:39.760
unexpected console, and 

262
00:07:39.870 --> 00:07:41.380
unexpected console. If we go 

263
00:07:41.440 --> 00:07:43.070
back to our badcode here, you'll 

264
00:07:43.460 --> 00:07:45.640
see on line seven we pass the 

265
00:07:45.650 --> 00:07:46.950
reject, but we actually never 

266
00:07:46.960 --> 00:07:48.330
use it because we only use 

267
00:07:48.340 --> 00:07:50.380
resolve. I know, "Well, what's 

268
00:07:50.390 --> 00:07:52.400
the point in passing that? It 

269
00:07:52.000 --> 00:07:53.880
wasn't necessary for me," so I'm 

270
00:07:53.955 --> 00:07:54.980
going to remove it, save it, 

271
00:07:55.280 --> 00:07:57.300
rerun ESLint. Now we only 

272
00:07:57.310 --> 00:07:59.060
have two errors. Now, I've got 

273
00:07:59.120 --> 00:08:00.880
the same error happening on line 

274
00:08:00.955 --> 00:08:04.000
17 and line 21. Right here I'm 

275
00:08:04.010 --> 00:08:08.040
using console.log and on line 29, 

276
00:08:07.980 --> 00:08:09.750
I'm also using console.log. 

277
00:08:10.780 --> 00:08:12.010
It's telling me I shouldn't be 

278
00:08:12.020 --> 00:08:13.600
using console but I'm saying, "

279
00:08:14.440 --> 00:08:15.670
It's fine that I'm using console, 

280
00:08:15.745 --> 00:08:16.570
I know what I'm doing. I'll make 

281
00:08:16.580 --> 00:08:18.260
sure that it take them out, or 

282
00:08:18.270 --> 00:08:19.450
maybe I'll have another ESLint 

283
00:08:19.980 --> 00:08:21.730
that that role will be set on 

284
00:08:21.740 --> 00:08:23.010
development and not in 

285
00:08:23.020 --> 00:08:24.670
production." But if I want 

286
00:08:24.745 --> 00:08:26.140
to turn that off, what I do is I 

287
00:08:26.215 --> 00:08:28.940
go back to my eslintrc file. I 

288
00:08:28.130 --> 00:08:32.580
make a rules here. Then we go 

289
00:08:32.660 --> 00:08:34.490
ahead and set every single rule 

290
00:08:34.500 --> 00:08:35.580
how we want it. How do you 

291
00:08:35.590 --> 00:08:36.790
actually work with these rules? 

292
00:08:36.800 --> 00:08:39.340
The rule is this one, no console. 

293
00:08:39.790 --> 00:08:41.090
What I usually do is I'll go 

294
00:08:41.100 --> 00:08:42.680
here and say, there we go, no 

295
00:08:42.690 --> 00:08:44.860
console. Click through to it, 

296
00:08:45.110 --> 00:08:47.490
and spend some time reading why 

297
00:08:47.500 --> 00:08:48.690
this rule. Don't just turn 

298
00:08:48.700 --> 00:08:50.430
it off immediately because it's 

299
00:08:50.540 --> 00:08:51.540
annoying and you think you're 

300
00:08:51.550 --> 00:08:53.190
right. Maybe just spend some 

301
00:08:53.200 --> 00:08:54.810
time and say, "Maybe I shouldn't 

302
00:08:54.820 --> 00:08:56.510
be using this rule, or maybe I 

303
00:08:56.520 --> 00:08:57.740
shouldn't be writing my code in 

304
00:08:57.750 --> 00:08:59.640
this way. Why is this possibly 

305
00:08:59.650 --> 00:09:02.280
bad?" Read through why they 

306
00:09:02.290 --> 00:09:03.700
think that maybe this rule 

307
00:09:03.710 --> 00:09:06.440
should be turned on. It looks at 

308
00:09:06.450 --> 00:09:08.730
some examples as to what you 

309
00:09:08.740 --> 00:09:10.310
shouldn't be using, and then 

310
00:09:10.410 --> 00:09:13.440
finally there is when not to use 

311
00:09:13.450 --> 00:09:15.020
it. How do you turn it off if 

312
00:09:15.030 --> 00:09:16.120
you don't like it? There's a 

313
00:09:16.130 --> 00:09:17.710
couple ways you can turn it off. 

314
00:09:18.130 --> 00:09:19.450
At the very high level there's 

315
00:09:19.460 --> 00:09:21.840
three stages of rules. They can 

316
00:09:21.850 --> 00:09:24.070
be off, they can be warning, or 

317
00:09:24.080 --> 00:09:25.820
they can be error. Sometimes I 

318
00:09:25.830 --> 00:09:27.170
like to turn things on just to 

319
00:09:27.180 --> 00:09:28.840
warning, so I know that that 

320
00:09:28.870 --> 00:09:30.060
possibly shouldn't be there. 

321
00:09:30.350 --> 00:09:32.580
However, an error will go red. 

322
00:09:32.720 --> 00:09:35.240
What we do is you take your rule 

323
00:09:35.250 --> 00:09:37.630
here, no console, and we set it 

324
00:09:37.630 --> 00:09:42.520
to either off, warn, or error. 

325
00:09:42.670 --> 00:09:45.690
Or what I like to do is zero is 

326
00:09:45.700 --> 00:09:48.790
off, one is warn, and two is the 

327
00:09:48.800 --> 00:09:50.810
actual error. There's also the 

328
00:09:50.420 --> 00:09:51.990
ability to pass options here. 

329
00:09:52.065 --> 00:09:52.940
We'll look at that in just a 

330
00:09:52.950 --> 00:09:54.430
second, but that's very basic. 

331
00:09:54.430 --> 00:09:56.490
Let's say I want to turn it off 

332
00:09:56.500 --> 00:09:58.130
entirely. I'm going to say rules, 

333
00:09:58.420 --> 00:09:59.930
no console. What's that's doing 

334
00:09:59.940 --> 00:10:01.230
is it's taking all the rules 

335
00:10:01.240 --> 00:10:03.510
from the ESLint recommended, and 

336
00:10:03.310 --> 00:10:04.630
then we're taking the no console 

337
00:10:04.705 --> 00:10:06.000
and just applying our own. It's 

338
00:10:06.075 --> 00:10:08.460
like CSS, where you have a base 

339
00:10:08.520 --> 00:10:09.620
framework here and then you 

340
00:10:09.630 --> 00:10:11.350
overwrite your own specific ones. 

341
00:10:12.010 --> 00:10:13.540
Now if we go back and rerun 

342
00:10:13.615 --> 00:10:16.890
ESLint you'll see that we get no 

343
00:10:16.900 --> 00:10:18.490
actual errors here, because 

344
00:10:18.530 --> 00:10:20.830
according to recommended and our 

345
00:10:20.840 --> 00:10:23.330
one rule here, we have totally 

346
00:10:23.340 --> 00:10:24.580
made things up. However, if 

347
00:10:24.680 --> 00:10:25.780
I look at this code right here, 

348
00:10:25.790 --> 00:10:26.820
you'll know that there are a 

349
00:10:26.830 --> 00:10:27.650
whole bunch of things that are 

350
00:10:27.660 --> 00:10:28.950
bugging me here. First of all, 

351
00:10:28.960 --> 00:10:30.710
what is this space here? Second 

352
00:10:30.720 --> 00:10:32.030
of all, I have the spacing 

353
00:10:32.040 --> 00:10:33.880
that's inconsistent with that, I 

354
00:10:33.890 --> 00:10:35.220
have no space here where there 

355
00:10:35.230 --> 00:10:36.620
should be one there. It 

356
00:10:36.630 --> 00:10:37.670
should be catching more 

357
00:10:37.745 --> 00:10:40.280
stylistic errors that I actually 

358
00:10:40.280 --> 00:10:41.710
have, as well as things like why 

359
00:10:41.720 --> 00:10:44.220
am I using var, let, and const 

360
00:10:44.100 --> 00:10:45.700
all over the place, when I 

361
00:10:45.710 --> 00:10:47.170
shouldn't be using var. Let 

362
00:10:47.245 --> 00:10:49.110
tweets here is not being 

363
00:10:49.120 --> 00:10:50.280
reassigned, so it shouldn't be a 

364
00:10:50.355 --> 00:10:52.680
let, it shouldn't be a const. 

365
00:10:52.755 --> 00:10:52.160
There's all kinds of stuff, so 

366
00:10:52.170 --> 00:10:54.010
in the next video what I'm going 

367
00:10:54.085 --> 00:10:55.060
to do is look at the Airbnb 

368
00:10:54.900 --> 00:10:56.710
default, which is a little bit 

369
00:10:56.720 --> 00:10:58.670
more strict but will allow you 

370
00:10:58.680 --> 00:10:59.650
to write much better code.

