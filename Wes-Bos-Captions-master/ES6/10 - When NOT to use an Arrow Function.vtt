WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.580 --> 00:00:04.400
Before you start going bananas 

3
00:00:04.410 --> 00:00:06.130
on using arrow functions, let's 

4
00:00:06.140 --> 00:00:07.590
go through a couple examples of 

5
00:00:07.600 --> 00:00:09.600
when you probably don't want an 

6
00:00:09.610 --> 00:00:11.290
arrow function. All of these are 

7
00:00:11.300 --> 00:00:13.470
just going to boil down to not 

8
00:00:13.480 --> 00:00:15.060
having the keyword "this," but 

9
00:00:15.060 --> 00:00:16.420
they are just different use 

10
00:00:16.430 --> 00:00:18.130
cases that you'd run into. First 

11
00:00:18.130 --> 00:00:19.230
of all, I've got this button. 

12
00:00:19.240 --> 00:00:20.700
It's a big a button that says, "

13
00:00:20.710 --> 00:00:23.050
Push me." When someone pushes 

14
00:00:23.060 --> 00:00:24.960
or clicks that button, I want to 

15
00:00:24.970 --> 00:00:27.070
toggle the class of "on," which 

16
00:00:27.080 --> 00:00:28.740
should turn it yellow, "on and 

17
00:00:28.750 --> 00:00:31.080
off," "on and off." I said I've 

18
00:00:31.090 --> 00:00:32.480
grabbed the button with 

19
00:00:32.480 --> 00:00:33.100
 selector here, 

20
00:00:33.630 --> 00:00:36.350
and then I listen for a click on 

21
00:00:36.360 --> 00:00:37.850
that button. When someone clicks 

22
00:00:37.860 --> 00:00:39.010
that button, I'm going to run 

23
00:00:39.020 --> 00:00:42.180
this following function. It 

24
00:00:42.180 --> 00:00:43.500
gives us this error, "TypeError, 

25
00:00:44.300 --> 00:00:45.970
cannot read property 'toggle' of 

26
00:00:45.970 --> 00:00:48.260
undefined." What does that mean? 

27
00:00:48.310 --> 00:00:50.160
Well, let's just "console.log" 

28
00:00:50.320 --> 00:00:52.500
this. What is this going to be? 

29
00:00:52.575 --> 00:00:53.570
I'm going pause here. Hopefully, 

30
00:00:53.580 --> 00:00:54.550
you're yelling at the screen 

31
00:00:54.625 --> 00:00:57.850
right now. It's a window, right? 

32
00:00:57.850 --> 00:00:59.440
Remember, we talked about if you 

33
00:00:59.450 --> 00:01:00.930
use an arrow function, the 

34
00:01:00.940 --> 00:01:03.340
keyword "this" is not bound to 

35
00:01:03.350 --> 00:01:05.270
that actual function. We don't 

36
00:01:05.280 --> 00:01:06.430
actually know what got clicked, 

37
00:01:06.440 --> 00:01:07.590
because we use an arrow function 

38
00:01:07.950 --> 00:01:09.730
there. We don't want to use a 

39
00:01:09.740 --> 00:01:10.930
function there. Take that arrow 

40
00:01:11.010 --> 00:01:12.990
out. We're to choose a regular 

41
00:01:13.000 --> 00:01:15.820
old function which will allow "

42
00:01:15.830 --> 00:01:18.590
this" to be equal to the actual 

43
00:01:18.630 --> 00:01:20.550
button. Console.log "this" is 

44
00:01:20.560 --> 00:01:22.260
now equal to the button, and our 

45
00:01:22.270 --> 00:01:24.420
beautiful clicker is actually 

46
00:01:24.430 --> 00:01:26.150
working. Now, let's take a look 

47
00:01:26.160 --> 00:01:27.880
at this next one, when you need 

48
00:01:27.890 --> 00:01:30.370
a method to bind to an object. 

49
00:01:30.580 --> 00:01:32.740
Here we've got a "person." We've 

50
00:01:32.750 --> 00:01:33.880
got this method here, it's 

51
00:01:33.890 --> 00:01:36.050
called "score" and whenever we 

52
00:01:36.060 --> 00:01:37.990
call "person.score," it's going 

53
00:01:38.065 --> 00:01:39.890
to just increment the number 

54
00:01:40.460 --> 00:01:42.810
inside of it, so we've got 23. 

55
00:01:42.885 --> 00:01:45.210
Let's see what we've got here. 

56
00:01:43.220 --> 00:01:45.130
If we just say "person," what 

57
00:01:45.205 --> 00:01:47.930
have we got? We've got points is 

58
00:01:48.005 --> 00:01:48.150
equal to 23. If we say "person.

59
00:01:48.150 --> 00:01:52.240
score," run it once, two. Let's 

60
00:01:52.250 --> 00:01:54.950
run it three times. We should be 

61
00:01:54.950 --> 00:01:57.200
at 26 now. If I say "person," 

62
00:01:58.460 --> 00:01:59.470
it's still at 23. Why? We'll 

63
00:02:00.160 --> 00:02:01.740
just do the same thing. What is 

64
00:02:01.750 --> 00:02:03.860
this going to be equal to inside 

65
00:02:03.870 --> 00:02:05.110
of a function that has been an 

66
00:02:05.120 --> 00:02:07.080
arrow function? Go to window. 

67
00:02:07.440 --> 00:02:10.100
Exactly, right? We do not want 

68
00:02:10.610 --> 00:02:12.180
to use "this" here. You want to 

69
00:02:12.190 --> 00:02:14.970
use a regular function, which 

70
00:02:15.020 --> 00:02:17.130
will give us the actual "person." 

71
00:02:17.640 --> 00:02:19.030
There we go. That will actually 

72
00:02:20.940 --> 00:02:23.670
work, 24. You might be screaming 

73
00:02:23.680 --> 00:02:25.100
at me right now saying, "Even 

74
00:02:25.110 --> 00:02:26.510
better." We haven't talked about 

75
00:02:26.290 --> 00:02:26.980
this yet, but there is a 

76
00:02:26.990 --> 00:02:28.750
function or an object 

77
00:02:28.760 --> 00:02:30.060
improvement here, where when you 

78
00:02:30.070 --> 00:02:32.880
have a method on an object, you 

79
00:02:33.530 --> 00:02:35.070
can simply just type that. Now, 

80
00:02:35.080 --> 00:02:36.290
we're going to go into a little 

81
00:02:36.300 --> 00:02:37.500
bit more, but let's just look 

82
00:02:37.510 --> 00:02:38.740
ahead. We could have also used 

83
00:02:38.750 --> 00:02:41.040
that. That is equivalent to just 

84
00:02:41.050 --> 00:02:42.810
a regular type "dot function," 

85
00:02:42.870 --> 00:02:45.510
not an arrow function. Next up, 

86
00:02:45.520 --> 00:02:47.390
we have this, when you need to 

87
00:02:47.400 --> 00:02:49.790
add a prototype method. Here, 

88
00:02:49.800 --> 00:02:51.420
I've got a class. We haven't 

89
00:02:51.430 --> 00:02:53.500
learned about classes, but just 

90
00:02:53.500 --> 00:02:54.800
know that this is a way for us 

91
00:02:54.810 --> 00:02:56.280
to make new cars. I have this 

92
00:02:56.380 --> 00:02:58.470
class constructor where, when 

93
00:02:58.480 --> 00:03:00.460
you call "new Car," we pass it 

94
00:03:00.470 --> 00:03:02.610
the type of Car, as well as the 

95
00:03:02.620 --> 00:03:05.120
color of the Car. I can say the 

96
00:03:05.130 --> 00:03:08.430
beemer is a BMW that is blue. The 

97
00:03:08.505 --> 00:03:10.150
subie is a Subaru that is white. 

98
00:03:10.620 --> 00:03:13.180
Let's go ahead and look at them. 

99
00:03:13.320 --> 00:03:15.570
I'll say subie, there we go, is 

100
00:03:15.645 --> 00:03:20.260
a Subaru that's white. A beemer is 

101
00:03:20.270 --> 00:03:22.270
a BMW that's blue. Now, after 

102
00:03:22.280 --> 00:03:23.490
the fact, I added on this 

103
00:03:23.500 --> 00:03:25.290
prototype method, and what that 

104
00:03:24.900 --> 00:03:26.710
allows us to do is that, even 

105
00:03:26.770 --> 00:03:28.640
after these things have been 

106
00:03:28.650 --> 00:03:30.590
created, we can add methods onto 

107
00:03:30.600 --> 00:03:32.500
all of them. I say car.prototype.

108
00:03:32.590 --> 00:03:34.300
summarize, which will allow me 

109
00:03:34.310 --> 00:03:35.600
to do things like subie.

110
00:03:36.450 --> 00:03:38.220
summarize. You see that it's 

111
00:03:38.230 --> 00:03:39.120
auto-completing it there, 

112
00:03:39.130 --> 00:03:40.330
because it's available to me. 

113
00:03:40.340 --> 00:03:42.500
Even though I added it after we 

114
00:03:42.510 --> 00:03:44.200
created the Car, because I added 

115
00:03:44.275 --> 00:03:45.540
it to the prototype, it's 

116
00:03:45.550 --> 00:03:48.110
available in every object that 

117
00:03:48.120 --> 00:03:49.400
has been created from there. 

118
00:03:50.630 --> 00:03:52.560
What this prototype does is it 

119
00:03:52.570 --> 00:03:54.480
returns "this.make" which is the 

120
00:03:54.490 --> 00:03:56.260
make that we passed in, and "

121
00:03:55.860 --> 00:03:57.730
this.color," in a sentence. But 

122
00:03:57.940 --> 00:03:59.490
when you call it, "this.car" is 

123
00:03:59.560 --> 00:04:00.890
undefined and the color 

124
00:04:00.900 --> 00:04:03.220
undefined. Why is that? It's 

125
00:04:03.295 --> 00:04:04.510
because we try to be cool. We 

126
00:04:04.520 --> 00:04:05.830
try to be a bit of a hot shot 

127
00:04:05.840 --> 00:04:07.480
here by using an arrow function. 

128
00:04:07.770 --> 00:04:09.140
Again, why don't we use an arrow 

129
00:04:09.150 --> 00:04:10.160
function here? Because we 

130
00:04:10.170 --> 00:04:11.920
explicitly need the keyword "

131
00:04:11.980 --> 00:04:14.040
this," so a regular function 

132
00:04:14.450 --> 00:04:17.360
would do. Give that a 

133
00:04:17.370 --> 00:04:18.850
save. Now, if we call subie.

134
00:04:18.925 --> 00:04:22.240
summarize, it says it's a white. 

135
00:04:22.360 --> 00:04:25.060
We call beemer.summarize, we get 

136
00:04:25.070 --> 00:04:27.880
BMW in blue. Again, using a 

137
00:04:27.550 --> 00:04:29.390
regular function for that. Then, 

138
00:04:29.400 --> 00:04:31.240
finally, this is a little bit 

139
00:04:31.250 --> 00:04:32.180
different. It doesn't have to do 

140
00:04:32.190 --> 00:04:34.110
with the keyword "this," but we 

141
00:04:34.120 --> 00:04:35.750
don't have access to the 

142
00:04:35.830 --> 00:04:38.040
Arguments object when you use an 

143
00:04:38.050 --> 00:04:40.240
arrow function. This is helpful 

144
00:04:40.250 --> 00:04:41.880
for when you want to run a 

145
00:04:41.890 --> 00:04:43.970
function like, right here, this 

146
00:04:43.980 --> 00:04:45.090
function is going to take 

147
00:04:45.100 --> 00:04:46.430
unlimited arguments. It might 

148
00:04:46.440 --> 00:04:47.900
take one, it might take 100. 

149
00:04:48.390 --> 00:04:49.630
It's going to just say like, "

150
00:04:50.000 --> 00:04:52.150
This child was born first." 

151
00:04:52.590 --> 00:04:53.840
Here's an example, older 

152
00:04:53.915 --> 00:04:55.520
children, I'm passing in, "Jill" 

153
00:04:55.570 --> 00:04:57.630
as a first argument, "Wes" as a 

154
00:04:57.705 --> 00:04:58.670
second argument, and "Jenna" as a 

155
00:04:58.730 --> 00:05:00.410
third argument. When I run it, 

156
00:05:00.485 --> 00:05:01.610
it says, "ReferenceError, 

157
00:05:03.450 --> 00:05:04.980
arguments is not defined." 

158
00:05:05.930 --> 00:05:07.980
Arguments is a keyword that we 

159
00:05:07.980 --> 00:05:09.320
have in JavaScript that's going 

160
00:05:08.960 --> 00:05:11.680
to give us an array or array-ish 

161
00:05:11.910 --> 00:05:13.570
value of everything that was 

162
00:05:13.580 --> 00:05:16.460
passed in. One, two, three items, 

163
00:05:16.470 --> 00:05:17.970
and you do not get the Arguments 

164
00:05:17.980 --> 00:05:19.280
object if you use an arrow 

165
00:05:19.290 --> 00:05:21.440
function when you use a regular 

166
00:05:21.450 --> 00:05:24.770
function, which is going to give 

167
00:05:24.845 --> 00:05:27.120
us the actual content that we 

168
00:05:27.130 --> 00:05:28.880
need. Again, go through all 

169
00:05:28.890 --> 00:05:30.010
those really quickly. Make sure 

170
00:05:30.085 --> 00:05:31.390
that you aren't just using arrow 

171
00:05:31.400 --> 00:05:33.810
functions willy-nilly. In 

172
00:05:33.820 --> 00:05:35.470
general, if you do not need the 

173
00:05:35.700 --> 00:05:37.190
Arguments object or you do not 

174
00:05:37.200 --> 00:05:39.600
need "this," or you know that 

175
00:05:39.610 --> 00:05:40.540
you will not need it in the 

176
00:05:40.640 --> 00:05:41.920
future, then you can feel free 

177
00:05:41.930 --> 00:05:43.140
to go ahead and use an arrow 

178
00:05:43.150 --> 00:05:44.840
function on everything else.

