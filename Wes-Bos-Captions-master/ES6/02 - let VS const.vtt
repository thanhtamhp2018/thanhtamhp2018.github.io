WEBVTT

1
00:00:02.370 --> 00:00:02.760
 Instructor: We know 

2
00:00:03.120 --> 00:00:04.890
that var is function scope. We 

3
00:00:04.900 --> 00:00:06.450
know that let and const are 

4
00:00:06.460 --> 00:00:07.770
block scope, which is any time 

5
00:00:07.780 --> 00:00:08.940
you've got a set of curly 

6
00:00:08.950 --> 00:00:10.310
brackets. Now, we need to know 

7
00:00:10.320 --> 00:00:12.200
that inside of the scope where 

8
00:00:12.290 --> 00:00:13.470
the variable's declared, you can 

9
00:00:13.480 --> 00:00:15.350
only ever do that once. If I 

10
00:00:15.350 --> 00:00:17.060
try to go let points = 60 here, 

11
00:00:18.400 --> 00:00:19.710
it's not going to let me. It's 

12
00:00:19.785 --> 00:00:20.670
going to say points has already 

13
00:00:20.680 --> 00:00:22.410
been declared. Whereas with var 

14
00:00:22.270 --> 00:00:24.050
variables, it will just go ahead 

15
00:00:24.600 --> 00:00:26.740
and work for you without warning 

16
00:00:26.750 --> 00:00:28.180
you. That can cause a lot of 

17
00:00:28.260 --> 00:00:29.890
bugs in your actual applications, 

18
00:00:29.930 --> 00:00:31.280
because you might accidentally 

19
00:00:31.290 --> 00:00:32.940
use the same variable twice. 

20
00:00:33.015 --> 00:00:34.600
You can, of course, update a let 

21
00:00:34.610 --> 00:00:35.930
variable. We'll take a look more 

22
00:00:35.940 --> 00:00:37.660
at let versus const in the 

23
00:00:37.670 --> 00:00:39.290
future, but you cannot redeclare 

24
00:00:39.365 --> 00:00:40.860
it twice in the same scope. 

25
00:00:41.100 --> 00:00:42.720
Now, what if I had this? If 

26
00:00:42.795 --> 00:00:46.610
points > 40, we'll say let 

27
00:00:46.760 --> 00:00:49.930
winner = true. Give that a save, 

28
00:00:49.940 --> 00:00:51.990
refresh, no errors, it's allowed. 

29
00:00:52.030 --> 00:00:53.280
But if I type in winner, what am 

30
00:00:53.290 --> 00:00:54.670
I going to get? You tell me. 

31
00:00:55.060 --> 00:00:58.340
We get...Oh, but this runs. Does 

32
00:00:58.350 --> 00:01:00.090
this run? Console.log, it ran. 

33
00:01:00.165 --> 00:01:02.230
Let's see, did it actually run? 

34
00:01:02.290 --> 00:01:07.210
It ran. Why is winner still 

35
00:01:07.220 --> 00:01:08.890
false, if we set winner to be 

36
00:01:09.040 --> 00:01:10.840
true? The important thing 

37
00:01:10.850 --> 00:01:13.260
here is that these two variables 

38
00:01:13.690 --> 00:01:14.960
are two separate variables. They 

39
00:01:15.035 --> 00:01:16.580
have the same name, but they are 

40
00:01:16.670 --> 00:01:18.360
both scoped differently. This 

41
00:01:18.370 --> 00:01:20.090
winner here, that is scoped to 

42
00:01:20.100 --> 00:01:22.030
the window. This winner here, 

43
00:01:22.280 --> 00:01:24.400
because it was declared inside 

44
00:01:24.410 --> 00:01:26.000
of a block -- look this is a 

45
00:01:26.010 --> 00:01:27.630
block statement right here -- it 

46
00:01:27.630 --> 00:01:29.910
is scoped to that actual block. 

47
00:01:29.985 --> 00:01:32.200
If I change this let winner, and 

48
00:01:32.275 --> 00:01:33.770
I changed these both to be var, 

49
00:01:33.845 --> 00:01:37.010
and I type winner, winner is now 

50
00:01:37.020 --> 00:01:38.360
true. Why? Because it's not 

51
00:01:38.430 --> 00:01:39.700
inside of a function, it's not 

52
00:01:39.775 --> 00:01:41.220
scoped to it, whereas a let 

53
00:01:41.230 --> 00:01:44.080
variable totally is. That's one 

54
00:01:44.090 --> 00:01:45.070
thing to know about it. The 

55
00:01:45.080 --> 00:01:45.930
other thing we need to know 

56
00:01:46.005 --> 00:01:47.230
about it is that the difference 

57
00:01:47.240 --> 00:01:49.540
between let and const is that 

58
00:01:49.615 --> 00:01:51.140
const variables cannot be 

59
00:01:51.150 --> 00:01:53.450
updated. Let variables are made 

60
00:01:53.460 --> 00:01:55.630
to be updated. I may say points = 

61
00:01:55.705 --> 00:01:59.010
60, and that will work just fine. 

62
00:02:00.070 --> 00:02:01.770
We see 60. However, I've got 

63
00:02:01.780 --> 00:02:03.130
this key, maybe something that 

64
00:02:03.140 --> 00:02:05.090
you do not want to ever change; 

65
00:02:05.165 --> 00:02:07.540
const stands for constant. If I 

66
00:02:07.550 --> 00:02:10.250
try to update it -- key = a, b, 

67
00:02:10.260 --> 00:02:13.440
c, 1, 2, 3, 4 -- it's going to 

68
00:02:12.360 --> 00:02:14.860
yell at us because "assignment 

69
00:02:14.870 --> 00:02:16.250
to a constant variable." You 

70
00:02:16.260 --> 00:02:18.850
cannot update a const variable, 

71
00:02:19.060 --> 00:02:20.800
whereas let you can update. 

72
00:02:21.000 --> 00:02:21.840
We're going to go more into 

73
00:02:21.930 --> 00:02:23.100
examples of these and you're 

74
00:02:23.175 --> 00:02:24.110
going to understand where I use 

75
00:02:24.120 --> 00:02:25.920
which one as we go through, but 

76
00:02:25.930 --> 00:02:26.930
that's really all we need to 

77
00:02:26.980 --> 00:02:28.810
know about it for now. One 

78
00:02:28.820 --> 00:02:30.070
other quick thing is that 

79
00:02:30.490 --> 00:02:31.890
sometimes people think that 

80
00:02:31.965 --> 00:02:32.980
const means it's immutable, 

81
00:02:33.270 --> 00:02:34.280
which means that if I have an 

82
00:02:34.350 --> 00:02:36.060
object like const person =...

83
00:02:37.990 --> 00:02:40.740
I'll say name is set to Wes and 

84
00:02:41.010 --> 00:02:44.810
age is set to 28, I've got this 

85
00:02:44.820 --> 00:02:47.230
person variable. But if I try to 

86
00:02:47.270 --> 00:02:48.820
update that to something else -- 

87
00:02:49.460 --> 00:02:51.320
name is Wesley -- it doesn't 

88
00:02:51.330 --> 00:02:53.110
allow me to do that. However, 

89
00:02:53.120 --> 00:02:55.720
the properties of a const 

90
00:02:55.500 --> 00:02:57.580
variable can change. That's 

91
00:02:57.590 --> 00:02:59.310
because the entire object is not 

92
00:02:59.320 --> 00:03:00.920
immutable. It just cannot be 

93
00:03:01.040 --> 00:03:02.830
reassigned. The way I like 

94
00:03:02.840 --> 00:03:05.100
to think about it with an object 

95
00:03:05.110 --> 00:03:07.310
is that the person is me. I'm 

96
00:03:07.320 --> 00:03:08.840
not going to ever change, my 

97
00:03:08.850 --> 00:03:11.230
entire life, but attributes 

98
00:03:11.240 --> 00:03:12.540
about me are going to change. 

99
00:03:12.550 --> 00:03:14.290
Maybe my age, my hair color, 

100
00:03:14.300 --> 00:03:15.990
where I live. Things about me 

101
00:03:16.000 --> 00:03:17.270
are going to change. That's fine, 

102
00:03:17.280 --> 00:03:19.130
as long as the object that is 

103
00:03:19.170 --> 00:03:21.400
assigned to Wes is always the 

104
00:03:21.410 --> 00:03:22.770
exact same object. I can go 

105
00:03:22.780 --> 00:03:25.410
ahead and say person.age = 29 

106
00:03:25.485 --> 00:03:29.300
and then we have person. That 

107
00:03:29.310 --> 00:03:31.670
works just fine, but I cannot 

108
00:03:31.680 --> 00:03:33.390
ever wipe out the entire 

109
00:03:33.400 --> 00:03:35.310
variable. If you do need to 

110
00:03:35.690 --> 00:03:37.430
freeze everything, we have this 

111
00:03:37.440 --> 00:03:39.670
thing called object.freeze. It's 

112
00:03:39.680 --> 00:03:41.220
actually not part of ES6, but 

113
00:03:41.230 --> 00:03:42.680
you can take a look at it on MDN 

114
00:03:42.680 --> 00:03:44.800
and you can pass it person. Say 

115
00:03:44.875 --> 00:03:47.780
const Wes = object.freeze. 

116
00:03:48.930 --> 00:03:50.480
Now, I've got a Wes variable. If 

117
00:03:50.490 --> 00:03:54.700
I try to say Wes.age = 30 and I 

118
00:03:54.710 --> 00:03:58.290
type Wes.age, it still says 28. 

119
00:03:58.365 --> 00:04:00.390
I just can't actually change 

120
00:04:00.400 --> 00:04:02.940
anything on that actual variable.

