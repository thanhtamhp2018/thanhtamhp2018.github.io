WEBVTT

1
00:00:02.370 --> 00:00:02.420
 Instructor: There are 

2
00:00:02.420 --> 00:00:04.100
two other array methods, some 

3
00:00:04.100 --> 00:00:06.050
and every. These actually aren't 

4
00:00:06.060 --> 00:00:08.500
part of ES6, but I feel like 

5
00:00:08.230 --> 00:00:09.590
they don't get enough love and 

6
00:00:09.600 --> 00:00:10.960
really not enough people know 

7
00:00:10.970 --> 00:00:12.020
about them, so I'm going to show 

8
00:00:12.030 --> 00:00:13.970
you how to actually use them. 

9
00:00:14.460 --> 00:00:16.010
Some and every will check the 

10
00:00:16.020 --> 00:00:18.260
data in an array to check if 

11
00:00:18.440 --> 00:00:20.320
some of the items meet what 

12
00:00:20.330 --> 00:00:22.150
you're looking for or all of the 

13
00:00:22.160 --> 00:00:23.550
items meet what you're looking 

14
00:00:23.620 --> 00:00:25.550
for. I've got two examples 

15
00:00:25.625 --> 00:00:26.660
right here. These are a whole 

16
00:00:26.670 --> 00:00:28.590
bunch of ages. Is there at least 

17
00:00:28.600 --> 00:00:30.510
one adult in the group? In 

18
00:00:30.520 --> 00:00:32.100
Canada, you're 18 and you are 

19
00:00:32.110 --> 00:00:35.080
considered an adult, so what we 

20
00:00:35.155 --> 00:00:35.590
going to do is to say "const 

21
00:00:35.665 --> 00:00:43.640
adultPresent = ages.some." 

22
00:00:43.680 --> 00:00:45.730
Why some? Because we want to 

23
00:00:44.830 --> 00:00:46.820
find at least one person in the 

24
00:00:46.830 --> 00:00:48.830
group that is greater or equal 

25
00:00:48.860 --> 00:00:51.970
to 18. Some, it's going to take 

26
00:00:52.045 --> 00:00:55.580
a callback, which is age, and we 

27
00:00:55.655 --> 00:00:57.260
want to say age is greater than 

28
00:00:57.970 --> 00:01:00.080
or equal to 18. What it's 

29
00:01:00.170 --> 00:01:02.570
going to do is check every 

30
00:01:02.580 --> 00:01:04.460
single one, and as soon as it 

31
00:01:04.470 --> 00:01:07.530
hits one of the items that is 

32
00:01:07.540 --> 00:01:09.560
true, then it's going to return 

33
00:01:09.570 --> 00:01:10.950
true in adultPresent. I'm going 

34
00:01:11.010 --> 00:01:12.480
to say console.log(adultPresent) 

35
00:01:12.555 --> 00:01:15.950
and we get true. Why? Because it 

36
00:01:15.960 --> 00:01:17.650
hits that first one, and says 

37
00:01:17.800 --> 00:01:19.600
that we have it. If I have 

38
00:01:19.675 --> 00:01:24.250
const younguns equals one, two, 

39
00:01:25.750 --> 00:01:28.810
two, five, and we check if there 

40
00:01:28.820 --> 00:01:31.100
are any adults in the younguns, 

41
00:01:30.840 --> 00:01:33.000
we obviously will get false. 

42
00:01:33.075 --> 00:01:37.270
Next we want to know is 

43
00:01:37.410 --> 00:01:39.860
everybody old enough to drink in 

44
00:01:39.870 --> 00:01:42.650
this group? In Canada, at least, 

45
00:01:43.160 --> 00:01:45.360
it's 19 to drink. We want to 

46
00:01:47.540 --> 00:01:49.140
check if every single person in 

47
00:01:49.150 --> 00:01:51.080
the array meets what we're 

48
00:01:51.090 --> 00:01:52.450
looking for. What we're going 

49
00:01:52.450 --> 00:01:54.220
to do is say "const allOldEnough = 

50
00:01:54.295 --> 00:01:56.220
ages.every age >= 19." If 

51
00:01:56.295 --> 00:02:04.740
everybody is greater than or 

52
00:02:04.740 --> 00:02:10.380
equal to 19, it will return true, 

53
00:02:10.580 --> 00:02:12.500
otherwise we get false. Which is 

54
00:02:12.510 --> 00:02:15.130
false. Those are very simple, 

55
00:02:15.310 --> 00:02:17.010
but can be very, very handy.

