WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.430 --> 00:00:04.290
ES6 has brought classes to the 

3
00:00:03.530 --> 00:00:05.540
language. Now, this is not a new 

4
00:00:05.550 --> 00:00:07.430
way to do object-oriented 

5
00:00:07.440 --> 00:00:09.680
inheritance. It's the exact same 

6
00:00:09.755 --> 00:00:10.700
prototypal inheritance that 

7
00:00:10.710 --> 00:00:12.520
we've always had in the browser. 

8
00:00:12.690 --> 00:00:14.000
It's just a new way to actually 

9
00:00:14.010 --> 00:00:15.580
write them. What I wanted to 

10
00:00:15.610 --> 00:00:16.860
do in this video is do a quick 

11
00:00:16.870 --> 00:00:18.940
review of how prototypal 

12
00:00:18.550 --> 00:00:19.700
inheritance actually works 

13
00:00:19.775 --> 00:00:20.700
because I understand not 

14
00:00:20.710 --> 00:00:22.520
everyone has a good grasp on 

15
00:00:22.530 --> 00:00:23.560
that. If you are totally 

16
00:00:23.570 --> 00:00:24.950
comfortable with prototypal 

17
00:00:25.160 --> 00:00:26.940
inheritance, skip this video and 

18
00:00:26.950 --> 00:00:28.700
I'll see you in the next one. If 

19
00:00:28.710 --> 00:00:31.310
not, stick around. What I 

20
00:00:31.310 --> 00:00:33.130
want to do here is let's make a 

21
00:00:33.330 --> 00:00:35.670
dog function that will create 

22
00:00:35.940 --> 00:00:38.270
puppies or create many dogs. I'm 

23
00:00:38.345 --> 00:00:40.530
going to say function Dog, and I 

24
00:00:40.540 --> 00:00:42.270
put a capital D on that because 

25
00:00:42.280 --> 00:00:43.080
this is what's called a 

26
00:00:43.090 --> 00:00:44.720
constructor function. That's 

27
00:00:44.730 --> 00:00:46.360
going to take the dog's name and 

28
00:00:46.480 --> 00:00:49.380
the breed of the dog. From that, 

29
00:00:49.390 --> 00:00:51.340
we say this.name() is equal to 

30
00:00:51.350 --> 00:00:53.090
whatever the person passes in 

31
00:00:53.360 --> 00:00:55.830
and this.breed() is whatever the 

32
00:00:55.840 --> 00:00:58.150
breed they pass in. I should 

33
00:00:58.160 --> 00:01:00.590
be able to say const snickers = 

34
00:01:00.760 --> 00:01:03.880
new Dog(). We're going to use 

35
00:01:03.890 --> 00:01:06.240
this dog here to create a puppy, 

36
00:01:06.290 --> 00:01:07.860
which is "Snickers." I'm going 

37
00:01:07.935 --> 00:01:09.140
to say the dog's name is 

38
00:01:09.150 --> 00:01:10.580
Snickers, and the breed is a 

39
00:01:10.590 --> 00:01:13.850
King Charles. Give that a save, 

40
00:01:13.860 --> 00:01:15.820
refresh. We have Snickers here, 

41
00:01:16.030 --> 00:01:18.900
which is a dog -- you can tell -- 

42
00:01:19.180 --> 00:01:21.330
and the properties on it, breed 

43
00:01:21.340 --> 00:01:23.550
and name of Snickers. Now, 

44
00:01:23.560 --> 00:01:25.100
what is prototypal inheritance? 

45
00:01:25.175 --> 00:01:27.890
Prototypal inheritance is when 

46
00:01:27.900 --> 00:01:30.930
you put a method on the 

47
00:01:30.940 --> 00:01:32.950
original constructor, here, it 

48
00:01:32.960 --> 00:01:35.530
will be inherited by the rest of 

49
00:01:35.540 --> 00:01:37.120
them. Let's just talk about 

50
00:01:37.130 --> 00:01:39.050
what is existing. If I create a 

51
00:01:39.060 --> 00:01:43.560
new array, const names = Wes and 

52
00:01:43.750 --> 00:01:47.560
Kate. I just created a brand new 

53
00:01:47.570 --> 00:01:51.980
array, but now names.join() is a 

54
00:01:51.990 --> 00:01:55.840
method; name.pop() is a method. 

55
00:01:55.850 --> 00:01:58.310
We have all these methods on top 

56
00:01:58.320 --> 00:02:00.000
of names. Where did they come 

57
00:02:00.010 --> 00:02:02.470
from? Well, we have the MAMA 

58
00:02:02.610 --> 00:02:04.850
array, which is capital A, Array. 

59
00:02:05.420 --> 00:02:07.100
If you were to look inside of a 

60
00:02:07.310 --> 00:02:08.940
capital A, Array, you'll know 

61
00:02:08.940 --> 00:02:11.920
that that Array has many, many 

62
00:02:11.930 --> 00:02:13.930
prototype methods. What that 

63
00:02:13.940 --> 00:02:16.050
means is that when you create an 

64
00:02:16.060 --> 00:02:18.480
array or when you create a dog 

65
00:02:18.640 --> 00:02:20.930
from the MAMA array or from the 

66
00:02:21.000 --> 00:02:23.790
MAMA dog, every single instance 

67
00:02:23.950 --> 00:02:27.320
of that inherits those methods. 

68
00:02:27.395 --> 00:02:28.920
We're going to take a look at 

69
00:02:29.020 --> 00:02:30.540
how they don't just take their 

70
00:02:30.550 --> 00:02:31.750
own, they actually share the 

71
00:02:31.760 --> 00:02:34.330
same one. Let's add a prototype 

72
00:02:34.340 --> 00:02:35.980
method here. We'll say dog.

73
00:02:36.060 --> 00:02:39.050
prototype.bark() =, and that is 

74
00:02:39.060 --> 00:02:41.260
a function itself, and we'll 

75
00:02:41.270 --> 00:02:44.980
just say console.log("Bark, bark. 

76
00:02:45.770 --> 00:02:48.360
My name is..."), and we'll put 

77
00:02:48.430 --> 00:02:50.410
this .name inside of there. 

78
00:02:50.420 --> 00:02:51.470
Why? Because we want to 

79
00:02:51.480 --> 00:02:52.830
reference the name of the actual 

80
00:02:52.840 --> 00:02:55.270
dog. I should be able to say 

81
00:02:55.345 --> 00:02:57.000
snickers.bark(). It says, "Bark, 

82
00:02:57.010 --> 00:02:58.480
bark. My name is Snickers." 

83
00:02:58.630 --> 00:03:00.310
Makes sense. If I were to 

84
00:03:00.320 --> 00:03:02.120
make a second dog here, and 

85
00:03:02.130 --> 00:03:04.220
we'll call that dog "Sunny." I 

86
00:03:04.230 --> 00:03:06.270
can say snickers.bark() and 

87
00:03:06.420 --> 00:03:08.760
sunny.bark(). "Bark, bark. My 

88
00:03:08.770 --> 00:03:10.570
name is Sunny." You see how this 

89
00:03:10.580 --> 00:03:12.460
one method that it declared on 

90
00:03:12.570 --> 00:03:15.240
the MAMA, the prototype here, is 

91
00:03:15.250 --> 00:03:18.050
now inherited by every instance 

92
00:03:18.160 --> 00:03:20.520
of dog. What's really cool 

93
00:03:20.530 --> 00:03:21.750
about that is I could then 

94
00:03:21.760 --> 00:03:23.700
change it after the fact. Watch 

95
00:03:23.700 --> 00:03:26.690
this. I can overwrite it. I 

96
00:03:26.950 --> 00:03:28.300
could say something like console.

97
00:03:28.550 --> 00:03:31.550
log("Bark, bark"), and 

98
00:03:31.560 --> 00:03:35.000
maybe add some emojis in there, 

99
00:03:35.010 --> 00:03:38.920
Canadian dogs. And, "My name is..." 

100
00:03:39.050 --> 00:03:43.540
whatever and, "I'm a..." this 

101
00:03:43.550 --> 00:03:46.940
dog breed. Now, when I run 

102
00:03:46.950 --> 00:03:49.800
snickers.bark()...Even after 

103
00:03:49.840 --> 00:03:51.580
I've created Snickers and Sunny, 

104
00:03:52.110 --> 00:03:54.000
should it still do this? 

105
00:03:55.460 --> 00:03:57.740
Absolutely. What if I added a 

106
00:03:57.750 --> 00:04:00.390
second method onto it after the 

107
00:04:00.480 --> 00:04:03.350
fact? Dog.prototype.cuddle() = 

108
00:04:06.130 --> 00:04:09.500
function console.log("I love you 

109
00:04:09.570 --> 00:04:13.160
owner."). Even though, after 

110
00:04:13.170 --> 00:04:14.630
they were created, because I 

111
00:04:14.640 --> 00:04:17.130
modified the dog, I should be 

112
00:04:17.205 --> 00:04:17.850
able to say snickers.cuddle(). 

113
00:04:19.130 --> 00:04:20.860
The way you can tell is if you 

114
00:04:20.870 --> 00:04:23.080
just type Snickers, you open it 

115
00:04:23.090 --> 00:04:26.030
up and you don't see bark or 

116
00:04:26.320 --> 00:04:28.210
name here. That's because these 

117
00:04:28.220 --> 00:04:29.800
things are specific to the 

118
00:04:29.810 --> 00:04:31.460
instance. The name and the breed 

119
00:04:31.535 --> 00:04:32.840
are associated with Snickers or 

120
00:04:32.850 --> 00:04:35.630
Sunny. But bark and cuddle, 

121
00:04:36.090 --> 00:04:37.780
those are on the prototype, 

122
00:04:37.790 --> 00:04:38.700
which means that they're not 

123
00:04:38.710 --> 00:04:40.270
part of the actual object, 

124
00:04:40.360 --> 00:04:41.730
snickers, itself. But if you 

125
00:04:41.740 --> 00:04:43.510
open that sucker up, you'll see 

126
00:04:43.670 --> 00:04:46.420
bark and cuddle are right inside 

127
00:04:46.430 --> 00:04:48.190
of there. They are inherited 

128
00:04:48.290 --> 00:04:51.000
from the parent. So dog 

129
00:04:51.000 --> 00:04:53.480
 Sunny, you see 

130
00:04:53.490 --> 00:04:55.660
that Sunny also has access to 

131
00:04:55.670 --> 00:04:57.360
both of those. With that in 

132
00:04:57.370 --> 00:04:58.800
mind, let's learn about how we 

133
00:04:58.810 --> 00:05:00.910
can also do this sort of thing 

134
00:05:00.950 --> 00:05:02.370
when we write classes.

