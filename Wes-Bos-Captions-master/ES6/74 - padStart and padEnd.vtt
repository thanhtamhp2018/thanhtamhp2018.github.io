WEBVTT

1
00:00:00.000 --> 00:00:02.325 line:15% 
(cheerful jingle)

2
00:00:02.325 --> 00:00:03.644
<v Instructor>We have two new string methods</v>

3
00:00:03.644 --> 00:00:06.661
available to us, padStart and padEnd.

4
00:00:06.661 --> 00:00:07.506
They don't do a whole lot,

5
00:00:07.506 --> 00:00:09.002
but pad the start of a string

6
00:00:09.002 --> 00:00:09.968
or pad the end of a string,

7
00:00:09.968 --> 00:00:10.989
if it's not long enough.

8
00:00:10.989 --> 00:00:12.757
So, if I take something like wes

9
00:00:12.757 --> 00:00:14.257
and I do padStart,

10
00:00:15.421 --> 00:00:18.049
I want to pad the start maybe six.

11
00:00:18.049 --> 00:00:19.062
What it's going to do is

12
00:00:19.062 --> 00:00:21.114
because wes is three characters long,

13
00:00:21.114 --> 00:00:24.018
it's going to take the six

14
00:00:24.018 --> 00:00:26.742
and put in three spaces in front of it.

15
00:00:26.742 --> 00:00:28.492
Same with the padEnd,

16
00:00:29.512 --> 00:00:31.060
it will put three at the end of it.

17
00:00:31.060 --> 00:00:32.217
It takes a second argument,

18
00:00:32.217 --> 00:00:34.418
you can tell it what to pad it with.

19
00:00:34.418 --> 00:00:36.086
So, I could pad it with Xs,

20
00:00:36.086 --> 00:00:38.503
or let's do some poop emojis.

21
00:00:40.527 --> 00:00:41.763
And whoa!

22
00:00:41.763 --> 00:00:42.976
That's actually kind of neat!

23
00:00:42.976 --> 00:00:44.197
What happened there?

24
00:00:44.197 --> 00:00:48.494
Well, the poop emoji is technically not one character.

25
00:00:48.494 --> 00:00:51.051
It actually takes up two characters.

26
00:00:51.051 --> 00:00:53.078
So, what happened there is we got one, two

27
00:00:53.078 --> 00:00:54.827
to get one full poop,

28
00:00:54.827 --> 00:00:56.659
and then we got a half a poop,

29
00:00:56.659 --> 00:00:59.428
a little nug (laughs) in there.

30
00:00:59.428 --> 00:01:03.581
And if you ever have to deal string length and emojis,

31
00:01:03.581 --> 00:01:04.658
it's actually a little bit harder.

32
00:01:04.658 --> 00:01:06.411
You have to use some external packages there.

33
00:01:06.411 --> 00:01:09.329
So, I wouldn't recommend padding it with an emoji.

34
00:01:09.329 --> 00:01:10.632
But, generally what you do is

35
00:01:10.632 --> 00:01:12.108
you do something like an underscore,

36
00:01:12.108 --> 00:01:15.535
or just a space, which is actually the default.

37
00:01:15.535 --> 00:01:17.629
So, why is that useful?

38
00:01:17.629 --> 00:01:19.740
Well, let's say you've got an array of strings here

39
00:01:19.740 --> 00:01:22.793
and you want to right align all of those items.

40
00:01:22.793 --> 00:01:24.749
Well, all you need to do there is,

41
00:01:24.749 --> 00:01:27.249
let's just say strings.foreach

42
00:01:28.169 --> 00:01:31.700
and for each string, we'll just say str,

43
00:01:31.700 --> 00:01:33.789
we're going to console.log.

44
00:01:33.789 --> 00:01:35.895
Let's just console log the string.

45
00:01:35.895 --> 00:01:37.754
And when I give it a refresh, you'll see,

46
00:01:37.754 --> 00:01:39.481
actually let me make this a little bit wider

47
00:01:39.481 --> 00:01:41.090
so we can see everything.

48
00:01:41.090 --> 00:01:42.502
It's all right aligned

49
00:01:42.502 --> 00:01:44.913
and the string just goes as long as it wants.

50
00:01:44.913 --> 00:01:46.327
However, if I were to take that string

51
00:01:46.327 --> 00:01:48.348
and pad the start of it

52
00:01:48.348 --> 00:01:50.611
with something like maybe 30 characters,

53
00:01:50.611 --> 00:01:51.930
not sure how long this is,

54
00:01:51.930 --> 00:01:54.504
we'll tackle that in a second,

55
00:01:54.504 --> 00:01:56.461
we're gonna see that they all line up

56
00:01:56.461 --> 00:01:57.927
on the right-hand side,

57
00:01:57.927 --> 00:02:00.607
and that's great if you're doing any sort of console output

58
00:02:00.607 --> 00:02:02.039
where you need to make a table

59
00:02:02.039 --> 00:02:05.042
or you need to align things underneath a title

60
00:02:05.042 --> 00:02:06.056
that you have there.

61
00:02:06.056 --> 00:02:07.492
So that's looping over it.

62
00:02:07.492 --> 00:02:11.550
How could I actually figure out what to padStart here

63
00:02:11.550 --> 00:02:12.750
based on the longest one?

64
00:02:12.750 --> 00:02:16.108
Well, first we could make a new array of length.

65
00:02:16.108 --> 00:02:17.187
So we could say

66
00:02:17.187 --> 00:02:20.354
const length is equal to strings.sort.

67
00:02:22.225 --> 00:02:23.959
And we will sort each string

68
00:02:23.959 --> 00:02:26.821
based on the string length,

69
00:02:26.821 --> 00:02:29.145
and let's just console.log the lengths there,

70
00:02:29.145 --> 00:02:30.478
see what we got.

71
00:02:31.675 --> 00:02:34.453
So that will give us an array of all of our items.

72
00:02:34.453 --> 00:02:36.594
The longest one being the first one.

73
00:02:36.594 --> 00:02:39.060
And then we could go even further there

74
00:02:39.060 --> 00:02:41.232
and to map over each one,

75
00:02:41.232 --> 00:02:43.808
and then just return the string length.

76
00:02:43.808 --> 00:02:45.473
And of course we could do this in a single reduce

77
00:02:45.473 --> 00:02:46.739
if we'd like, as well.

78
00:02:46.739 --> 00:02:50.488
And then we have an actual array of lengths

79
00:02:50.488 --> 00:02:52.823
and then here we could

80
00:02:52.823 --> 00:02:56.073
maybe just change this to longestString

81
00:02:57.468 --> 00:02:59.518
and then we would just grab the

82
00:02:59.518 --> 00:03:01.997
first thing out of that zero.

83
00:03:01.997 --> 00:03:03.770
And then, instead of hard coding 30,

84
00:03:03.770 --> 00:03:06.234
we would just say longestString,

85
00:03:06.234 --> 00:03:07.298
and that'd be a nice little function

86
00:03:07.298 --> 00:03:08.569
where you could pass in an array

87
00:03:08.569 --> 00:03:10.166
and it would bring it back to you.

88
00:03:10.166 --> 00:03:10.999
So there we go.

89
00:03:10.999 --> 00:03:12.347
That's as long as we want.

90
00:03:12.347 --> 00:03:14.429
But, if I were to add a fourth one

91
00:03:14.429 --> 00:03:16.593
that was extremely long,

92
00:03:16.593 --> 00:03:17.652
so maybe something like

93
00:03:17.652 --> 00:03:20.652
really, really, really, really long,

94
00:03:25.670 --> 00:03:27.680
Then, it's going to be really, really, really long

95
00:03:27.680 --> 00:03:29.486
and it's going to pick that up.

96
00:03:29.486 --> 00:03:32.548
Where this is also useful if you have showNumbers.

97
00:03:32.548 --> 00:03:35.766
So, on our podcast, SyntaxFM,

98
00:03:35.766 --> 00:03:38.236
we have showNumbers and we make,

99
00:03:38.236 --> 00:03:41.533
we expect to go up to 999 shows

100
00:03:41.533 --> 00:03:42.951
and then call it quits.

101
00:03:42.951 --> 00:03:44.715
So, (laughs) I'm joking, I have no idea.

102
00:03:44.715 --> 00:03:47.882
But, we like to do 007, 008, 009, 010.

103
00:03:49.298 --> 00:03:51.736
So, that's kind of how we like to display it, right?

104
00:03:51.736 --> 00:03:54.920
So, the showNumber is stored in a actual number.

105
00:03:54.920 --> 00:03:56.076
But, when we wanna display it,

106
00:03:56.076 --> 00:03:57.640
we wanna put a zero in front of it

107
00:03:57.640 --> 00:03:59.660
and display it as a string.

108
00:03:59.660 --> 00:04:00.670
Where that's useful is

109
00:04:00.670 --> 00:04:03.984
if you have showNumber 1 and you want to pad the start of it

110
00:04:03.984 --> 00:04:07.605
with let's say we're going up to three characters,

111
00:04:07.605 --> 00:04:09.305
and you wanna, let's just start with that.

112
00:04:09.305 --> 00:04:11.409
That's obviously gonna give you three spaces,

113
00:04:11.409 --> 00:04:13.393
but you can pad it with a zero,

114
00:04:13.393 --> 00:04:14.588
and that will give you 00.

115
00:04:14.588 --> 00:04:16.384
Obviously, it's going to take the number here,

116
00:04:16.384 --> 00:04:17.217
if you pass it a number

117
00:04:17.217 --> 00:04:19.220
it will call two string on it,

118
00:04:19.220 --> 00:04:21.339
and convert it over to that.

119
00:04:21.339 --> 00:04:22.418
Another thing here is

120
00:04:22.418 --> 00:04:24.113
if I were to say hi,

121
00:04:24.113 --> 00:04:25.601
what is it going to do?

122
00:04:25.601 --> 00:04:26.631
It's going to say hi1.

123
00:04:26.631 --> 00:04:27.464
Why?

124
00:04:27.464 --> 00:04:29.302
Because if you have two characters in here

125
00:04:29.302 --> 00:04:30.852
and it needs to fill two spots,

126
00:04:30.852 --> 00:04:33.963
it's going to take the first two characters out of that.

127
00:04:33.963 --> 00:04:36.133
So, if I have 10,

128
00:04:36.133 --> 00:04:37.793
it's going to say hihihihihi,

129
00:04:37.793 --> 00:04:40.908
or if I have something like wes,

130
00:04:40.908 --> 00:04:43.291
it's going to say wesweswes three times,

131
00:04:43.291 --> 00:04:44.842
'cause it needs nine spaces

132
00:04:44.842 --> 00:04:46.340
and then put the one in there.

133
00:04:46.340 --> 00:04:48.972
So, it's not going to repeat the thing that you put in here,

134
00:04:48.972 --> 00:04:51.820
but it's going to take whatever string you want

135
00:04:51.820 --> 00:04:52.949
and keep dumping that in

136
00:04:52.949 --> 00:04:55.562
until there is no more space left.

137
00:04:55.562 --> 00:04:57.232
Obviously, we have padEnd as well,

138
00:04:57.232 --> 00:04:59.300
which can be used for tacking on the end.

139
00:04:59.300 --> 00:05:02.992
These are not to be used for any sort of stylistic approach

140
00:05:02.992 --> 00:05:03.986
unless you're doing,

141
00:05:03.986 --> 00:05:06.703
trying to dump something into a terminal or a console.

142
00:05:06.703 --> 00:05:08.783
They're purely meant for when you need to

143
00:05:08.783 --> 00:05:11.534
actually tack on more blank characters,

144
00:05:11.534 --> 00:05:13.636
or any type of character, onto your string.

145
00:05:13.636 --> 00:05:15.189
So, not all that useful,

146
00:05:15.189 --> 00:05:18.302
but, you do run into it every now and then.

147
00:05:18.302 --> 00:05:19.950
Hopefully you can put that in your back pocket

148
00:05:19.950 --> 00:05:21.839
and pull it out when you need it.

