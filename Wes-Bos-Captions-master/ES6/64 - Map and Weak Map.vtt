WEBVTT

1
00:00:03.010 --> 00:00:03.250
 Instructor: If sets 

2
00:00:03.260 --> 00:00:05.750
are to arrays, then maps are to 

3
00:00:05.790 --> 00:00:07.680
objects. A map works very 

4
00:00:07.690 --> 00:00:09.970
similar to a set, however it has 

5
00:00:09.980 --> 00:00:11.690
a key and a value instead of 

6
00:00:11.700 --> 00:00:14.070
just values. Right here, 

7
00:00:13.850 --> 00:00:15.190
I've gone ahead and created a 

8
00:00:15.200 --> 00:00:17.210
new map, which is dogs, and I've 

9
00:00:17.220 --> 00:00:20.140
set Snickers to 3, Sunny to 2, 

10
00:00:20.215 --> 00:00:19.340
and Hugo to 10. We'll talk about 

11
00:00:19.340 --> 00:00:23.240
the actual values that this can 

12
00:00:23.250 --> 00:00:25.790
take. Spoiler -- both the keys 

13
00:00:25.800 --> 00:00:27.410
and the values can be absolutely 

14
00:00:27.420 --> 00:00:30.480
anything. There is a very 

15
00:00:30.490 --> 00:00:32.740
simple API for actually working 

16
00:00:32.750 --> 00:00:34.530
with it. We called .set() here 

17
00:00:34.540 --> 00:00:35.660
when you want to set something 

18
00:00:35.700 --> 00:00:38.240
on it. Let's bring it over to 

19
00:00:38.250 --> 00:00:40.630
here. dogs.has(Snickers), that 

20
00:00:41.850 --> 00:00:44.470
will be true. You use .has() and 

21
00:00:44.470 --> 00:00:46.420
you use the key of it. You can 

22
00:00:46.430 --> 00:00:50.230
use dog.get() to actually get 

23
00:00:50.240 --> 00:00:52.060
the item. Whereas with sets, we 

24
00:00:52.070 --> 00:00:53.660
weren't able to reference it at 

25
00:00:53.700 --> 00:00:55.980
all. You can use dogs.delete(

26
00:00:56.650 --> 00:00:59.940
Hugo) to see who's in there. Now, 

27
00:00:59.950 --> 00:01:02.440
dogs is just a map of Snickers 

28
00:01:02.450 --> 00:01:08.370
and Sunny. One interesting 

29
00:01:08.380 --> 00:01:10.270
thing about maps is that you can 

30
00:01:10.280 --> 00:01:11.560
loop over them in two ways. 

31
00:01:11.860 --> 00:01:13.450
First of all, we can use dot for 

32
00:01:13.460 --> 00:01:17.360
each, and that will give us a 

33
00:01:17.370 --> 00:01:20.280
value and a key. You can console.

34
00:01:20.390 --> 00:01:23.080
log() the val and the key, and 

35
00:01:24.550 --> 00:01:26.550
that will give us the value of 

36
00:01:26.130 --> 00:01:28.370
the key, value of key, value of 

37
00:01:28.445 --> 00:01:29.240
key. We can also use our 

38
00:01:29.250 --> 00:01:31.140
trusty for-of loop that we've 

39
00:01:31.150 --> 00:01:32.640
been using all over this series. 

40
00:01:32.715 --> 00:01:39.900
For const dog of dogs, open that 

41
00:01:39.910 --> 00:01:41.980
sucker up, console.log(dog). 

42
00:01:44.390 --> 00:01:45.590
What's interesting about that is 

43
00:01:45.600 --> 00:01:47.810
it actually gives us an array, 

44
00:01:48.130 --> 00:01:50.880
where the first item is the key 

45
00:01:51.090 --> 00:01:52.790
and the second item is the value. 

46
00:01:53.480 --> 00:01:54.400
You might be thinking, "I know 

47
00:01:54.430 --> 00:01:56.190
what to use for that. We can use 

48
00:01:56.200 --> 00:01:57.790
the actual destructuring here.{ 

49
00:01:57.865 --> 00:02:00.060
Instead of saying key dogs, we 

50
00:02:00.070 --> 00:02:03.680
can say key in val, and then we 

51
00:02:03.720 --> 00:02:05.600
have a key and a val, separate 

52
00:02:05.610 --> 00:02:07.700
variables here, that log out 

53
00:02:07.850 --> 00:02:09.930
separately for us. You can use 

54
00:02:09.940 --> 00:02:12.680
dogs.clear() to get rid of them, 

55
00:02:12.990 --> 00:02:14.920
or you can individually delete 

56
00:02:15.190 --> 00:02:17.870
one with .delete(). That's 

57
00:02:17.880 --> 00:02:20.020
interesting about a map, but why 

58
00:02:20.030 --> 00:02:22.310
is that better than actually 

59
00:02:22.320 --> 00:02:25.080
using an object? It seems like 

60
00:02:25.155 --> 00:02:27.090
it has a little bit of a limited 

61
00:02:27.090 --> 00:02:28.960
API. The one benefit here is 

62
00:02:28.970 --> 00:02:30.290
that you can use your for-of 

63
00:02:30.300 --> 00:02:33.130
loop with a map, but that is 

64
00:02:33.140 --> 00:02:34.940
also coming to objects sometime 

65
00:02:34.950 --> 00:02:36.290
in the future of JavaScript. 

66
00:02:36.365 --> 00:02:37.440
In the next video, what I want 

67
00:02:37.515 --> 00:02:38.860
to do is show you how you can 

68
00:02:38.870 --> 00:02:41.450
actually use a map for what's 

69
00:02:41.510 --> 00:02:42.250
called metadata.

