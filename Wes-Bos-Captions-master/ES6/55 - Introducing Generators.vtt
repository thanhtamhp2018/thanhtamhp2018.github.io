WEBVTT

1
00:00:02.360 --> 00:00:02.500
 Instructor: Let's 

2
00:00:02.500 --> 00:00:03.580
take some time to learn all 

3
00:00:03.590 --> 00:00:05.510
about generators in ES6. 

4
00:00:05.500 --> 00:00:06.790
Currently with functions in 

5
00:00:06.800 --> 00:00:08.280
JavaScript, when you run a 

6
00:00:08.290 --> 00:00:10.000
function, it runs top to bottom 

7
00:00:10.050 --> 00:00:11.680
and that function is done. 

8
00:00:11.980 --> 00:00:13.290
However, with a generator 

9
00:00:13.300 --> 00:00:15.300
function, what we are 

10
00:00:15.310 --> 00:00:16.840
essentially going to be making 

11
00:00:16.880 --> 00:00:18.860
is a function that you can start 

12
00:00:18.960 --> 00:00:20.980
and stop, or a function that you 

13
00:00:20.990 --> 00:00:23.410
can pause for an indefinite 

14
00:00:23.420 --> 00:00:24.760
amount of time, and a function 

15
00:00:24.770 --> 00:00:26.470
that you can pass additional 

16
00:00:26.480 --> 00:00:28.750
information to at a later point 

17
00:00:28.760 --> 00:00:31.330
in time. When we create a 

18
00:00:31.340 --> 00:00:32.990
generator function, what you do 

19
00:00:33.000 --> 00:00:34.750
is you put an asterisk after the 

20
00:00:34.760 --> 00:00:36.330
keyword function. We'll look at 

21
00:00:36.340 --> 00:00:37.610
the syntax for doing it with a 

22
00:00:37.620 --> 00:00:40.480
method in a bit. Then, we 

23
00:00:40.490 --> 00:00:42.870
learn a new keyword, that is 

24
00:00:42.880 --> 00:00:45.840
called yield. The yield keyword 

25
00:00:45.850 --> 00:00:48.750
is sort of like a return for now. 

26
00:00:49.350 --> 00:00:50.840
If I were to return from a 

27
00:00:50.850 --> 00:00:52.180
function, that would be it for 

28
00:00:52.190 --> 00:00:54.010
the function. But if we yield 

29
00:00:54.020 --> 00:00:54.940
from a function, 

30
00:00:55.100 --> 00:00:58.110
what that will do is it 

31
00:00:58.120 --> 00:01:00.550
will return that one item until 

32
00:01:00.560 --> 00:01:02.170
the function is then called 

33
00:01:02.180 --> 00:01:04.440
again. I could yield Wes, and 

34
00:01:04.450 --> 00:01:06.040
then I could yield Kate, and 

35
00:01:05.910 --> 00:01:07.540
then I could yield Snickers. 

36
00:01:08.070 --> 00:01:09.190
That function will need to be 

37
00:01:09.200 --> 00:01:11.200
called three times in order for 

38
00:01:11.290 --> 00:01:12.550
me to get all of that 

39
00:01:12.640 --> 00:01:15.110
information. This is a generator 

40
00:01:15.110 --> 00:01:16.500
function. The only thing that is 

41
00:01:16.510 --> 00:01:17.690
different is that we have an 

42
00:01:17.700 --> 00:01:19.920
asterisk here, and we yield 

43
00:01:19.980 --> 00:01:22.380
values from it. To use a 

44
00:01:22.490 --> 00:01:23.960
generator function, what you 

45
00:01:23.960 --> 00:01:26.010
need to do is first invoke this 

46
00:01:26.020 --> 00:01:27.640
function and store that in a 

47
00:01:27.650 --> 00:01:29.810
variable. I'm going to say, 

48
00:01:29.885 --> 00:01:35.040
const people = listPeople. Let's 

49
00:01:35.050 --> 00:01:36.530
take a look at it in the browser 

50
00:01:36.540 --> 00:01:38.390
here. We have people. Did 

51
00:01:38.400 --> 00:01:39.500
that give me Wes, Kate, and 

52
00:01:39.510 --> 00:01:42.740
Snickers? No. That gives me this, 

53
00:01:42.740 --> 00:01:44.380
which is a generator. It is 

54
00:01:44.390 --> 00:01:46.050
currently suspended, which means 

55
00:01:46.060 --> 00:01:47.650
it's not running, and there's 

56
00:01:47.660 --> 00:01:49.420
really no other information 

57
00:01:49.430 --> 00:01:51.650
about it on there. Now, how 

58
00:01:51.660 --> 00:01:52.840
do we get this information out 

59
00:01:52.915 --> 00:01:55.920
of there? We call .next on the 

60
00:01:55.930 --> 00:01:58.620
generator. We say, people .next. 

61
00:01:59.740 --> 00:02:01.330
That returns to us -- this is 

62
00:02:01.390 --> 00:02:02.130
kind of interesting -- it 

63
00:02:02.290 --> 00:02:04.600
returns to us not Wes, but it 

64
00:02:04.675 --> 00:02:06.920
returns to us an object. In 

65
00:02:06.930 --> 00:02:08.330
that object we have the value, 

66
00:02:08.340 --> 00:02:09.920
which you would expect, and then 

67
00:02:09.720 --> 00:02:11.000
we have another property called 

68
00:02:11.010 --> 00:02:12.450
done. That means is this 

69
00:02:12.460 --> 00:02:13.860
generator done running? Well, 

70
00:02:13.870 --> 00:02:16.070
it's not, because we've only run 

71
00:02:16.080 --> 00:02:17.430
it once, and Wes is being 

72
00:02:17.440 --> 00:02:19.100
returned. You could probably 

73
00:02:19.110 --> 00:02:21.780
imagine, I call people .next and 

74
00:02:21.855 --> 00:02:23.030
that gives me value Kate, done 

75
00:02:23.200 --> 00:02:25.290
false. Then we call it once more, 

76
00:02:25.560 --> 00:02:27.790
and we get value Snickers, still 

77
00:02:27.800 --> 00:02:29.830
done false. Call it once more, 

78
00:02:30.430 --> 00:02:32.200
and you get done is true, and 

79
00:02:32.200 --> 00:02:34.100
obviously, we don't get a value 

80
00:02:34.150 --> 00:02:35.840
there. You see how we can 

81
00:02:35.850 --> 00:02:37.480
create these functions that 

82
00:02:37.560 --> 00:02:40.190
offer up maybe multiple returns 

83
00:02:40.350 --> 00:02:42.800
to us? Then when we want to use 

84
00:02:42.875 --> 00:02:46.240
it, we simply just call .next on 

85
00:02:46.590 --> 00:02:48.350
that generator. It will give us 

86
00:02:48.360 --> 00:02:49.470
sort of the next thing in the 

87
00:02:49.480 --> 00:02:51.180
line. I've hard-coded these 

88
00:02:51.190 --> 00:02:52.540
values here, but those yields 

89
00:02:52.550 --> 00:02:54.960
could be generated dynamically 

90
00:02:54.970 --> 00:02:56.220
with you. If you had some 

91
00:02:56.230 --> 00:02:57.770
variables inside of here, maybe 

92
00:02:57.780 --> 00:03:04.840
it would say, let i = 0The first 

93
00:03:04.850 --> 00:03:07.190
time we'll yield i. Then we'll 

94
00:03:07.190 --> 00:03:09.980
do i++. Then the next time we'll 

95
00:03:09.990 --> 00:03:12.480
yield i again. Let's say, i++, 

96
00:03:12.555 --> 00:03:14.040
and you could obviously do this 

97
00:03:14.040 --> 00:03:15.900
in a loop as well. The third 

98
00:03:15.910 --> 00:03:18.510
time we'll yield i. Now every 

99
00:03:18.520 --> 00:03:20.380
single time that I call it, I'm 

100
00:03:20.455 --> 00:03:22.590
going to say, people .next, what 

101
00:03:22.600 --> 00:03:24.190
that does is it creates a 

102
00:03:24.200 --> 00:03:26.430
variable called i, it set to 

103
00:03:26.440 --> 00:03:28.590
zero when I initialized it here 

104
00:03:29.180 --> 00:03:31.090
and the first time we yield the 

105
00:03:31.100 --> 00:03:33.780
variable i. The reference to 

106
00:03:33.790 --> 00:03:36.090
the variable i is scoped to this 

107
00:03:36.160 --> 00:03:38.030
function right here, and that is 

108
00:03:38.080 --> 00:03:40.070
kept. When I were to call people .

109
00:03:40.310 --> 00:03:42.220
next again, the variable i is 

110
00:03:42.230 --> 00:03:43.760
still living inside of this 

111
00:03:43.790 --> 00:03:45.050
function, because it is not yet 

112
00:03:45.060 --> 00:03:47.000
done. I call it again and again 

113
00:03:47.190 --> 00:03:49.300
and again. Finally, we hit done 

114
00:03:49.500 --> 00:03:51.360
true, and it gets cleaned up 

115
00:03:51.370 --> 00:03:53.690
inside of that. The things to 

116
00:03:53.700 --> 00:03:55.050
know, this is a generator 

117
00:03:55.060 --> 00:03:56.470
function, it will keep its 

118
00:03:56.480 --> 00:03:58.060
variables until it's finished, 

119
00:03:58.390 --> 00:03:59.890
and you can yield multiple 

120
00:03:59.900 --> 00:04:01.710
values from it. Let's look at 

121
00:04:01.720 --> 00:04:03.420
another example where we iterate 

122
00:04:03.030 --> 00:04:04.550
through an array. Instead of 

123
00:04:04.560 --> 00:04:05.740
just console.logging them or 

124
00:04:05.750 --> 00:04:07.160
showing them all at once, we're 

125
00:04:07.170 --> 00:04:08.720
going to use next, next, next to 

126
00:04:08.730 --> 00:04:10.880
get through them. I've got an 

127
00:04:10.890 --> 00:04:14.010
array of inventors here. I'm 

128
00:04:14.020 --> 00:04:15.750
going to create a new generator 

129
00:04:15.760 --> 00:04:17.850
function called, loop. I'm 

130
00:04:17.925 --> 00:04:20.280
going to say, function* loop, 

131
00:04:21.450 --> 00:04:22.680
and that loop is going to take 

132
00:04:22.690 --> 00:04:26.510
in an array. Inside of it, we 

133
00:04:26.520 --> 00:04:29.310
need to do our looping. We would 

134
00:04:29.320 --> 00:04:34.080
use, for const item of, we're 

135
00:04:34.155 --> 00:04:36.270
going to use for of here, array. 

136
00:04:36.490 --> 00:04:38.770
Or you can think of that as a 

137
00:04:38.845 --> 00:04:40.240
const inventor of inventors. 

138
00:04:40.780 --> 00:04:42.610
Then for each one, we are going 

139
00:04:42.620 --> 00:04:45.980
to yield the item. That's 

140
00:04:45.990 --> 00:04:47.090
kind of interesting here, 

141
00:04:47.100 --> 00:04:49.280
because we aren't giving 

142
00:04:49.290 --> 00:04:51.410
ourselves three yields, we're 

143
00:04:51.420 --> 00:04:53.040
simply just giving ourselves one 

144
00:04:53.050 --> 00:04:54.800
yield. That's going to create 

145
00:04:55.230 --> 00:04:57.390
one, two, three, four, five, six, 

146
00:04:57.400 --> 00:05:00.200
seven yields for us when we loop. 

147
00:05:00.670 --> 00:05:02.070
The generator is smart enough to 

148
00:05:02.080 --> 00:05:03.650
know that when there are no more 

149
00:05:03.660 --> 00:05:05.250
to loop through, the entire 

150
00:05:05.260 --> 00:05:07.390
function will be done. How do 

151
00:05:07.465 --> 00:05:08.810
we actually call it? We have to 

152
00:05:08.850 --> 00:05:11.580
create that generator. I'm going 

153
00:05:11.240 --> 00:05:14.650
to say, const inventor gen = 

154
00:05:14.860 --> 00:05:18.180
loop through the inventors. 

155
00:05:18.220 --> 00:05:19.440
That's the array that we have 

156
00:05:19.450 --> 00:05:21.200
right here. You'll see that 

157
00:05:21.210 --> 00:05:22.880
we don't have it anywhere in 

158
00:05:22.890 --> 00:05:24.350
here. You don't actually see the 

159
00:05:24.360 --> 00:05:26.260
inventors getting console.logged. 

160
00:05:26.550 --> 00:05:28.000
Even if I console.log the 

161
00:05:28.010 --> 00:05:29.900
inventors right here, do you 

162
00:05:29.910 --> 00:05:32.080
expect to see the inventors log 

163
00:05:32.090 --> 00:05:33.110
as soon as we create the 

164
00:05:33.120 --> 00:05:34.780
generator? No. It actually 

165
00:05:34.790 --> 00:05:36.320
doesn't show up until we do the 

166
00:05:36.330 --> 00:05:38.490
first next. We'll say, 

167
00:05:38.490 --> 00:05:41.870
inventor gen, that's our 

168
00:05:41.880 --> 00:05:43.760
generator there. If we want to 

169
00:05:43.280 --> 00:05:45.590
call it, we call .next against 

170
00:05:45.600 --> 00:05:47.780
it. The first time we see that 

171
00:05:47.790 --> 00:05:49.360
huge array of all the inventors, 

172
00:05:49.940 --> 00:05:51.830
but then we see this. The object, 

173
00:05:52.020 --> 00:05:53.970
where is it done, no, and then 

174
00:05:54.045 --> 00:05:56.380
the value is Albert Einstein. 

175
00:05:56.390 --> 00:05:58.740
That's the first one there. I 

176
00:05:58.815 --> 00:06:01.070
could call inventor gen .next. 

177
00:06:01.680 --> 00:06:03.480
That will give me the next one 

178
00:06:03.910 --> 00:06:05.770
value, one little trick you can 

179
00:06:05.845 --> 00:06:06.680
do is you can just tack on .

180
00:06:06.690 --> 00:06:08.240
value onto the end if you don't 

181
00:06:08.250 --> 00:06:09.580
care about the done status, 

182
00:06:09.670 --> 00:06:12.440
Galileo, 

183
00:06:13.690 --> 00:06:17.010
Curie, Kepler, Copernicus -- I 

184
00:06:17.085 --> 00:06:21.350
don't know how to say that -- 

185
00:06:21.510 --> 00:06:22.970
and then we're done. You see 

186
00:06:22.970 --> 00:06:24.040
how we went through it. I could 

187
00:06:24.050 --> 00:06:25.160
keep calling this until we're 

188
00:06:25.170 --> 00:06:26.850
done, but what's really cool 

189
00:06:26.860 --> 00:06:29.350
about that is it will just 

190
00:06:29.360 --> 00:06:30.940
finish once it actually went 

191
00:06:30.950 --> 00:06:32.530
through every single one. Again, 

192
00:06:32.760 --> 00:06:35.040
we did a yield inside of here 

193
00:06:35.220 --> 00:06:37.230
and a yield returned multiple 

194
00:06:37.240 --> 00:06:38.550
values to us.

