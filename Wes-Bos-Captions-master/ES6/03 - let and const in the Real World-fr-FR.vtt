WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.800 --> 00:00:04.070
Vous pouvez probablement voir où let 

3
00:00:04.270 --> 00:00:05.440
et const nous serons utiles. 

4
00:00:05.450 --> 00:00:06.460
Là où nous avons besoin de délimiter 

5
00:00:06.470 --> 00:00:07.880
la portée de notre variable à un bloc, ou quand nous 

6
00:00:07.890 --> 00:00:08.980
voulons rendre une variable 

7
00:00:08.990 --> 00:00:11.180
impossible à modifier par qui 

8
00:00:11.190 --> 00:00:12.910
que ce soit, par accident ou intentionnellement. 

9
00:00:12.985 --> 00:00:13.950
Regardons quelques 

10
00:00:13.960 --> 00:00:15.540
exemples pratiques 

11
00:00:15.550 --> 00:00:17.170
d'utilisation. Le premier 

12
00:00:17.240 --> 00:00:20.040
remplace le IFFE. Je ne sais pas 

13
00:00:20.050 --> 00:00:20.950
si vous en avez entendu parler, 

14
00:00:21.140 --> 00:00:23.090
mais ça a été inventé par Ben 

15
00:00:23.100 --> 00:00:24.460
Alman en 2010. Ça s'appelle 

16
00:00:24.470 --> 00:00:25.530
"Immediately-Invoked 

17
00:00:25.760 --> 00:00:28.090
Function Expression". Il s'agit 

18
00:00:28.100 --> 00:00:31.060
pour une fonction de 

19
00:00:31.070 --> 00:00:32.910
s'exécuter elle-même immédiatement, et cela 

20
00:00:32.920 --> 00:00:35.160
créé un périmètre où 

21
00:00:35.170 --> 00:00:36.960
rien ne va déborder dans 

22
00:00:36.970 --> 00:00:38.470
le périmètre parent. Dans notre cas, rien 

23
00:00:38.760 --> 00:00:40.750
ne pas déborder vers la 

24
00:00:41.640 --> 00:00:43.530
portée globale du "window". 

25
00:00:43.930 --> 00:00:46.190
Si j'ai une variable, juste 

26
00:00:46.265 --> 00:00:48.730
une variable var, name = Wes. Je 

27
00:00:48.740 --> 00:00:50.210
rafraîchis et maintenant j'affiche 

28
00:00:50.220 --> 00:00:52.480
"name". Ça marche et c'est OK 

29
00:00:52.490 --> 00:00:54.640
pour la démonstration ici. Ce que vous  

30
00:00:54.650 --> 00:00:56.240
pourriez ne pas savoir est 

31
00:00:56.250 --> 00:00:57.720
que "window" a un attribut "name", 

32
00:00:57.730 --> 00:00:59.800
dont on a besoin quand 

33
00:00:59.810 --> 00:01:01.880
nous avons une fenêtre qui en ouvre 

34
00:01:01.890 --> 00:01:03.070
une autre. C'est quelque chose 

35
00:01:03.670 --> 00:01:05.450
qu'une partie tierce 

36
00:01:05.460 --> 00:01:07.100
JavaScript a besoin, afin de 

37
00:01:07.110 --> 00:01:09.020
fonctionner, ou peut-être que quelqu'un d'autre 

38
00:01:09.030 --> 00:01:10.620
a une variable avec le même nom, et vous 

39
00:01:10.630 --> 00:01:12.200
l'écrasez accidentellement, et 

40
00:01:12.850 --> 00:01:14.160
ça commence à être un peu 

41
00:01:14.170 --> 00:01:16.290
le bazar. Pour réparer ça, vous 

42
00:01:16.300 --> 00:01:18.220
pouvez utiliser cette chose 

43
00:01:18.230 --> 00:01:19.460
appelée IFFE, qui est une 

44
00:01:19.470 --> 00:01:22.280
fonction qui s'exécute immédiatement, 

45
00:01:22.290 --> 00:01:23.760
et vous mettez vos variables à 

46
00:01:23.820 --> 00:01:25.890
l'intérieur. Ces variables ont 

47
00:01:25.900 --> 00:01:27.530
maintenant une portée définie par les limites 

48
00:01:27.540 --> 00:01:30.530
de cette fonction ici, parce que les variables var 

49
00:01:30.850 --> 00:01:32.350
sont définies pour une fonction donnée, 

50
00:01:32.360 --> 00:01:33.790
et qu'elles ne sont pas disponibles dans la 

51
00:01:33.800 --> 00:01:35.440
portée globale. J'écris "name" ici, 

52
00:01:35.450 --> 00:01:36.900
et elle n'est pas non définie, 

53
00:01:36.910 --> 00:01:38.650
c'est juste vide parce que c'est 

54
00:01:38.660 --> 00:01:40.010
une propriété qui existe dans l'objet 

55
00:01:40.020 --> 00:01:41.590
"window" nativement en JavaScript. 

56
00:01:41.665 --> 00:01:43.990
Si j'avais besoin d'y accéder, 

57
00:01:44.065 --> 00:01:45.100
évidemment, j'aurais à effectuer 

58
00:01:44.710 --> 00:01:46.670
mon affichage à l'intérieur, mais 

59
00:01:46.680 --> 00:01:47.820
la chose importante à retenir est 

60
00:01:47.990 --> 00:01:49.520
que ça ne déborde plus vers 

61
00:01:49.530 --> 00:01:51.580
la portée globale. Avec les variables 

62
00:01:51.655 --> 00:01:52.640
let et const, nous n'avons même pas 

63
00:01:52.650 --> 00:01:54.020
besoin d'une fonction pour que 

64
00:01:54.030 --> 00:01:55.380
nos variables aient leur portée limitée. 

65
00:01:55.390 --> 00:01:57.230
Pourquoi, parce que let et const ont 

66
00:01:57.380 --> 00:01:59.020
une portée par les blocs. C'est tout ce dont 

67
00:01:59.030 --> 00:02:01.550
vous avez besoin de faire, nous ramenons ça ici 

68
00:02:01.560 --> 00:02:03.750
et on en fait une variable const. 

69
00:02:03.825 --> 00:02:05.450
Assurons-nous d'avoir encore comme 

70
00:02:05.450 --> 00:02:06.690
portée la portée globale. 

71
00:02:06.700 --> 00:02:08.340
Entrez le nom, et voilà. 

72
00:02:07.940 --> 00:02:10.190
Nous avons "Wes". Mais si 

73
00:02:10.200 --> 00:02:11.660
j'ouvrais et fermais 

74
00:02:11.660 --> 00:02:13.480
simplement une paire d'accolades, 

75
00:02:13.670 --> 00:02:16.110
ce qui en fait un bloc, maintenant on aura 

76
00:02:16.120 --> 00:02:17.910
une portée limitée par le bloc. 

77
00:02:18.240 --> 00:02:20.010
Rafraîchissez-ça, rentrez le nom, vous 

78
00:02:20.020 --> 00:02:22.820
obtenez encore la paire de guillements. Si 

79
00:02:22.820 --> 00:02:23.950
j'écris un console.log(name) 

80
00:02:23.960 --> 00:02:26.680
à l'intérieur, ça me donne "Wes". 

81
00:02:26.880 --> 00:02:28.030
Pas mal. On n'a dorénavant plus 

82
00:02:28.040 --> 00:02:29.550
besoin de tout ce IFFE. 

83
00:02:29.625 --> 00:02:31.060
Vous utilisez let et const 

84
00:02:30.690 --> 00:02:31.640
parce qu'ils vont être 

85
00:02:31.715 --> 00:02:33.360
limités par les blocs. L'autre 

86
00:02:33.435 --> 00:02:34.810
problème résolu par l'utilisation de let 

87
00:02:34.885 --> 00:02:36.520
et const est notre boucle 

88
00:02:36.530 --> 00:02:37.750
for. C'est quelque chose que vous avez 

89
00:02:37.750 --> 00:02:39.050
probablement rencontré avec votre 

90
00:02:39.060 --> 00:02:41.990
boucle for classique. Maintenant, je 

91
00:02:41.990 --> 00:02:44.820
vais juste tenter de faire console.log(i), 

92
00:02:44.820 --> 00:02:46.690
et nous devrions voir que nous avons 

93
00:02:46.700 --> 00:02:48.720
zéro jusqu'à neuf. Il y a deux problèmes 

94
00:02:48.730 --> 00:02:50.420
qui surviennent ici. 

95
00:02:50.430 --> 00:02:51.770
Premièrement, si je rentre "i" 

96
00:02:51.780 --> 00:02:54.230
dans la console, vous voyez que ça 

97
00:02:54.290 --> 00:02:55.830
vaut 10. Nous avons cette 

98
00:02:55.840 --> 00:02:58.110
variable qui a débordée de sa 

99
00:02:58.370 --> 00:03:00.160
portée et qui est maintenant soit dans le window, 

100
00:03:00.170 --> 00:03:01.750
soit dans la portée parente, ce 

101
00:03:01.825 --> 00:03:03.180
qui n'est pas vraiment ce que l'on 

102
00:03:03.260 --> 00:03:04.680
veut. C'est juste une variable 

103
00:03:04.470 --> 00:03:06.000
temporaire dont nous avons besoin 

104
00:03:06.010 --> 00:03:08.920
à l'intérieur de notre boucle. Deuxièmement, 

105
00:03:08.930 --> 00:03:10.910
supposons que vous voulez faire 

106
00:03:10.920 --> 00:03:12.450
quelque chose à l'intérieur de cette 

107
00:03:12.460 --> 00:03:14.960
boucle. Peut-être que vous avez quelque chose 

108
00:03:14.960 --> 00:03:16.170
qui va s'exécuter après un certain laps 

109
00:03:16.250 --> 00:03:18.230
de temps, une requête AJAX,

110
00:03:18.305 --> 00:03:19.930
ou faire un 

111
00:03:20.005 --> 00:03:21.930
setTimeout(). Allons-y pour le 

112
00:03:22.005 --> 00:03:23.990
setTimeout(). Nous avons une fonction 

113
00:03:24.000 --> 00:03:25.910
ici et cette fonction va 

114
00:03:25.985 --> 00:03:30.070
s'exécuter après une seconde. 

115
00:03:30.145 --> 00:03:31.250
Après une seconde, faisons un 

116
00:03:31.290 --> 00:03:34.970
console.log, le nombre est ... 

117
00:03:35.450 --> 00:03:37.260
On va mettre la variable i 

118
00:03:37.335 --> 00:03:39.660
à l'intérieur. Ça va s'exécuter 

119
00:03:40.580 --> 00:03:43.100
après une seconde. C'est bizarre. 

120
00:03:43.660 --> 00:03:46.830
Après une seconde, ils sont tous 

121
00:03:46.905 --> 00:03:50.430
à 10. La raison pour laquelle nous avons ça 

122
00:03:50.490 --> 00:03:52.940
est parce que, juste ici, console.log(i), 

123
00:03:52.950 --> 00:03:54.740
va s'exécuter immédiatement et référencer 

124
00:03:54.750 --> 00:03:56.090
i, peu importe ce que 

125
00:03:56.100 --> 00:03:57.560
i est. Ceci s'exécute 

126
00:03:57.560 --> 00:03:58.800
immédiatement au console log 

127
00:03:58.920 --> 00:04:01.090
lui-même. Cependant, après 

128
00:04:01.100 --> 00:04:03.150
une seconde, la boucle entière 

129
00:04:03.160 --> 00:04:05.530
a déjà traversé toutes les 

130
00:04:05.540 --> 00:04:07.400
itérations qu'il devait faire et 

131
00:04:07.410 --> 00:04:09.180
la variable i, ici, est 

132
00:04:09.290 --> 00:04:11.950
écrasée à chaque fois. Le problème 

133
00:04:12.240 --> 00:04:14.070
avec ça est que, le temps 

134
00:04:14.080 --> 00:04:15.640
que le premier setTimeout() 

135
00:04:16.210 --> 00:04:18.440
s'exécute, la variable i est déjà 

136
00:04:18.515 --> 00:04:19.610
à 10, et nous n'avons aucun 

137
00:04:20.100 --> 00:04:21.220
moyen d'en garder la trace. De manière similaire, 

138
00:04:21.230 --> 00:04:23.130
si vous avez une requête AJAX 

139
00:04:23.140 --> 00:04:24.060
où vous bouclez sur les 

140
00:04:24.070 --> 00:04:26.080
variables, il n'y a aucun moyen 

141
00:04:26.280 --> 00:04:28.840
efficace à part en utilisant IFFE 

142
00:04:28.850 --> 00:04:31.030
pour référencer ce que la variable i 

143
00:04:31.040 --> 00:04:32.800
était au temps d'exécution, et non 

144
00:04:32.810 --> 00:04:34.550
à l'instant actuel. Un moyen 

145
00:04:34.560 --> 00:04:36.710
rapide de contourner ce problème est 

146
00:04:36.360 --> 00:04:38.540
de juste changer var par let. Qu'est 

147
00:04:38.615 --> 00:04:40.780
ce qu'on sait à propos de let ? Let 

148
00:04:40.830 --> 00:04:42.910
a une portée limitée par son bloc. Regardez ! 

149
00:04:42.985 --> 00:04:44.780
C'est l'étendue du bloc, alors nos 

150
00:04:44.790 --> 00:04:46.140
variables vont maintenant n'être 

151
00:04:46.215 --> 00:04:48.340
disponibles qu'ici. Je réexécute ceci. 

152
00:04:49.900 --> 00:04:51.180
Voilà. Après une seconde, 

153
00:04:51.190 --> 00:04:52.970
de zéro à neuf. Nous n'obtenons 

154
00:04:52.980 --> 00:04:55.080
pas 10, 10 fois. Nous obtenons 

155
00:04:55.150 --> 00:04:58.210
la variable telle qu'elle est à 

156
00:04:58.220 --> 00:04:59.700
chaque fois. Vous ne pouvez pas utiliser 

157
00:04:59.775 --> 00:05:01.260
un const pour ça parce qu'il 

158
00:05:01.630 --> 00:05:03.140
va s'écraser lui-même. Vous ne pouvez 

159
00:05:03.150 --> 00:05:04.870
pas réaffecter la même variable deux fois. 

160
00:05:05.840 --> 00:05:07.260
Quand nous utilisons let, ça va 

161
00:05:07.320 --> 00:05:09.800
délimiter la portée de cette variable i 

162
00:05:10.000 --> 00:05:11.040
à l'intérieur de nos accolades. 

