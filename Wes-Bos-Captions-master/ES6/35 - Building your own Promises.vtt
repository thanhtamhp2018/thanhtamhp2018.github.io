WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.910 --> 00:00:04.290
Promises are built into a lot of 

3
00:00:04.290 --> 00:00:05.270
things in the browser like, 

4
00:00:05.270 --> 00:00:06.730
fetch and getUserMedia. We're 

5
00:00:06.730 --> 00:00:07.990
starting to see libraries 

6
00:00:07.990 --> 00:00:09.620
implement promises on their own, 

7
00:00:09.620 --> 00:00:10.710
and it's probably a good idea 

8
00:00:10.710 --> 00:00:12.090
for you to implement promises 

9
00:00:12.090 --> 00:00:13.660
into your own code base. To 

10
00:00:13.660 --> 00:00:14.680
create your own promise, you 

11
00:00:14.680 --> 00:00:16.170
create a variable, and you store 

12
00:00:16.170 --> 00:00:18.630
a new promise inside of it. A 

13
00:00:18.650 --> 00:00:20.380
promise constructor takes one 

14
00:00:20.630 --> 00:00:22.150
function here, which passes you 

15
00:00:22.150 --> 00:00:26.490
resolve and reject. The idea 

16
00:00:26.490 --> 00:00:28.500
here is that your promise is 

17
00:00:28.500 --> 00:00:30.250
either going to resolve, which 

18
00:00:30.250 --> 00:00:31.920
means it finishes and passes 

19
00:00:31.960 --> 00:00:33.610
data back to you. For example, 

20
00:00:33.610 --> 00:00:35.390
when we used the JSON API, When 

21
00:00:35.390 --> 00:00:37.300
the data actually came back, it 

22
00:00:37.300 --> 00:00:39.020
resolved itself and it passed us 

23
00:00:39.290 --> 00:00:40.970
a list of my blog posts. Or it 

24
00:00:40.970 --> 00:00:42.480
could reject itself, because 

25
00:00:42.480 --> 00:00:43.770
maybe there was an error or the 

26
00:00:43.770 --> 00:00:45.270
data was malformed, or for 

27
00:00:45.270 --> 00:00:46.440
whatever reason you'd like to 

28
00:00:46.440 --> 00:00:48.270
reject the actual promise and 

29
00:00:49.130 --> 00:00:50.640
that will error on out. 

30
00:00:51.500 --> 00:00:52.660
We've got these two things right 

31
00:00:52.660 --> 00:00:54.160
here, and you just call them 

32
00:00:54.380 --> 00:00:56.460
when you are ready to finish 

33
00:00:56.490 --> 00:00:57.770
this promise. I'm going to 

34
00:00:57.770 --> 00:01:00.270
call one immediately, and we're 

35
00:01:00.270 --> 00:01:02.190
going to pass is like "Wes is 

36
00:01:02.350 --> 00:01:03.970
cool," because that's the data 

37
00:01:04.290 --> 00:01:05.980
for this promise. Then we go 

38
00:01:05.980 --> 00:01:08.650
ahead and say p, and we say .

39
00:01:09.010 --> 00:01:10.380
then. I'm just going to do it on 

40
00:01:10.380 --> 00:01:11.560
its own line here -- it's no 

41
00:01:11.560 --> 00:01:12.680
different than doing that, but 

42
00:01:12.750 --> 00:01:15.930
just for readability sake -- p.

43
00:01:16.280 --> 00:01:17.740
then. That's going to pass us 

44
00:01:17.740 --> 00:01:20.660
some data, which in turn we'd be 

45
00:01:20.660 --> 00:01:22.770
able to console.log the actual 

46
00:01:22.840 --> 00:01:24.050
data. Let's see what happens 

47
00:01:24.050 --> 00:01:26.470
here when we reload. Immediately 

48
00:01:26.470 --> 00:01:27.850
we see "Wes is cool." Why? 

49
00:01:28.070 --> 00:01:30.040
Because we created a promise and 

50
00:01:30.040 --> 00:01:31.450
then just immediately resolved 

51
00:01:31.450 --> 00:01:33.490
it by passing back "Wes is cool." 

52
00:01:33.770 --> 00:01:35.300
It's really not that useful, but 

53
00:01:35.520 --> 00:01:36.980
what you can probably see is 

54
00:01:36.980 --> 00:01:38.540
that if we wanted to resolve 

55
00:01:38.540 --> 00:01:40.220
something after some amount of 

56
00:01:40.220 --> 00:01:42.420
time, maybe after some 

57
00:01:42.420 --> 00:01:43.750
processing has been done... 

58
00:01:44.260 --> 00:01:45.230
Maybe you wanted to do some 

59
00:01:45.230 --> 00:01:46.420
processing on the background 

60
00:01:46.420 --> 00:01:47.950
that's really intensive. Maybe 

61
00:01:47.950 --> 00:01:49.590
you wanted to do an AJAX request 

62
00:01:49.590 --> 00:01:51.080
in the background, and then when 

63
00:01:51.080 --> 00:01:52.440
the data comes back to you. 

64
00:01:52.990 --> 00:01:53.710
There's a whole bunch of 

65
00:01:53.710 --> 00:01:55.490
different use cases for when you 

66
00:01:55.490 --> 00:01:57.500
would want to use a promise. 

67
00:01:57.930 --> 00:01:59.470
Essentially it all boils down to "

68
00:01:59.470 --> 00:02:01.200
I don't want to stop JavaScript 

69
00:02:01.200 --> 00:02:02.500
from running, I just want to 

70
00:02:02.500 --> 00:02:03.690
start this thing, and then when 

71
00:02:03.690 --> 00:02:05.000
it comes back I'll deal with the 

72
00:02:05.000 --> 00:02:07.210
actual result." Let's see what 

73
00:02:07.340 --> 00:02:09.210
happens when we put a set 

74
00:02:09.210 --> 00:02:13.850
timeout on here. Maybe after one 

75
00:02:13.850 --> 00:02:15.840
second, we're going to see that 

76
00:02:15.890 --> 00:02:20.150
we're going to resolve it. There 

77
00:02:20.150 --> 00:02:21.610
we go, one second later, "Wes is 

78
00:02:21.610 --> 00:02:23.860
cool" pops up. You'll notice 

79
00:02:23.860 --> 00:02:24.730
that it doesn't pop up 

80
00:02:24.730 --> 00:02:27.030
immediately. Similarly, we 

81
00:02:27.030 --> 00:02:31.370
could also call reject on it. 

82
00:02:32.000 --> 00:02:33.410
Look at this, uncaught, in 

83
00:02:33.410 --> 00:02:35.400
promise, "Wes is cool." That's 

84
00:02:35.400 --> 00:02:36.720
the actual error. Maybe we'll 

85
00:02:36.720 --> 00:02:38.270
change that to say, "Error, Wes 

86
00:02:38.960 --> 00:02:44.010
isn't cool." Why is that 

87
00:02:44.070 --> 00:02:45.630
uncaught in promise? Because we 

88
00:02:45.630 --> 00:02:47.600
didn't catch it, right? We 

89
00:02:47.600 --> 00:02:51.420
should catch the error, and then 

90
00:02:51.420 --> 00:02:52.990
we'll do console.error. The 

91
00:02:53.040 --> 00:02:54.860
actual error there, and now when 

92
00:02:54.860 --> 00:02:56.230
we refresh this after a second, 

93
00:02:56.860 --> 00:02:58.190
there we go. That is a caught 

94
00:02:58.240 --> 00:03:01.000
one on line 20. One thing 

95
00:03:01.200 --> 00:03:02.630
that you might notice is that it 

96
00:03:02.630 --> 00:03:04.400
tells us Line 20, but that's 

97
00:03:04.400 --> 00:03:05.370
where we caught the error. 

98
00:03:05.370 --> 00:03:06.130
Obviously that is where we 

99
00:03:06.130 --> 00:03:07.780
caught it, but didn't the error 

100
00:03:07.780 --> 00:03:09.810
actually happen on Line 11? Why 

101
00:03:09.810 --> 00:03:10.960
doesn't it say anything about 

102
00:03:10.960 --> 00:03:12.690
Line 11 in here? Ideally 

103
00:03:12.690 --> 00:03:13.740
what you do is you throw in an 

104
00:03:13.740 --> 00:03:15.230
error object, not just a string, 

105
00:03:15.230 --> 00:03:17.160
so we'll wrap that sucker in an 

106
00:03:17.240 --> 00:03:19.660
error object, and then when it 

107
00:03:20.310 --> 00:03:22.260
console.logs the error, we see 

108
00:03:22.330 --> 00:03:24.020
that we have information about 

109
00:03:24.270 --> 00:03:25.550
where it happened. It happened 

110
00:03:25.550 --> 00:03:27.700
in the timeout on Line 11.

