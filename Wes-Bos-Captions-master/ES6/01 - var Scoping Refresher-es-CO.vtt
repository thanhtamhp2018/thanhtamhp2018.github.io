WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.310 --> 00:00:03.900
En Javascript hay 3 opciones

3
00:00:03.900 --> 00:00:05.390
para declarar variables. Tenemos 

4
00:00:05.690 --> 00:00:07.470
var, la que siempre hemos usado, 

5
00:00:07.480 --> 00:00:08.840
y hora tenemos dos nuevas

6
00:00:08.850 --> 00:00:11.080
let y const. Las dos nuevas 

7
00:00:11.090 --> 00:00:12.840
tienen ciertos atributos 

8
00:00:12.850 --> 00:00:13.970
que nos serán muy útiles,

9
00:00:13.980 --> 00:00:15.750
pero primero tenemos 

10
00:00:15.760 --> 00:00:16.800
que hacer una revisión rápida 

11
00:00:16.810 --> 00:00:18.880
de la palabra clave var 

12
00:00:18.970 --> 00:00:20.370
para poder entender

13
00:00:20.380 --> 00:00:22.220
sus beneficios y las 

14
00:00:22.230 --> 00:00:24.190
diferencias entre let y 

15
00:00:24.265 --> 00:00:24.930
const. Lo primero que necesitamos 

16
00:00:24.940 --> 00:00:26.890
saber de las variables var es 

17
00:00:26.900 --> 00:00:28.450
que las podemos reasignar. 

18
00:00:28.460 --> 00:00:30.560
y también actualizar. Usemos 

19
00:00:30.570 --> 00:00:32.570
console log para ver el ancho(width), and we'll 

20
00:00:32.610 --> 00:00:34.510
luego actualizaremos el ancho a 200 y 

21
00:00:34.520 --> 00:00:36.390
finalmente usaremos console log para ver el ancho

22
00:00:36.490 --> 00:00:39.070
otra vez. Cuando actualizamos 

23
00:00:39.070 --> 00:00:40.990
puedes ver 100, 200. Nada 

24
00:00:41.000 --> 00:00:42.420
sorprendente, podemos actualizar 

25
00:00:42.430 --> 00:00:43.880
los valores. Lo que también podemos hacer 

26
00:00:43.890 --> 00:00:45.200
es poner var antes de ellas. 

27
00:00:45.220 --> 00:00:46.040
Aunque esto es algo que 

28
00:00:46.040 --> 00:00:47.510
no debemos hacer, todos hemos

29
00:00:47.520 --> 00:00:48.940
estado en la situación que se nos acaban 

30
00:00:48.950 --> 00:00:50.350
los nombres para las variables y 

31
00:00:50.360 --> 00:00:51.600
accidentalmente usamos el mismo  

32
00:00:51.610 --> 00:00:53.690
varias veces. What's going to 

33
00:00:53.300 --> 00:00:55.350
happen here is it doesn't do 

34
00:00:55.470 --> 00:00:57.420
anything. Esto funciona como 

35
00:00:57.430 --> 00:00:58.630
esperaríamos, pero no nos notifica 

36
00:00:58.705 --> 00:01:00.830
por crear la misma 

37
00:01:01.130 --> 00:01:03.160
variable dos veces en el mismo 

38
00:01:03.170 --> 00:01:05.880
ambiente(scope). Esta es una característica 

39
00:01:05.955 --> 00:01:06.890
de las variables var, pueden 

40
00:01:06.900 --> 00:01:08.420
ser actaulizadas o redefinidas.

41
00:01:08.750 --> 00:01:09.750
Otra cosa que debemos saber 

42
00:01:09.825 --> 00:01:11.590
acerca de las variables var es en que

43
00:01:12.430 --> 00:01:13.540
ambiente estan definidas. Definir un ambiente  

44
00:01:13.550 --> 00:01:15.140
significa, "Dónde estan estas 

45
00:01:15.150 --> 00:01:18.780
variables disponibles para mi?" Las  

46
00:01:18.880 --> 00:01:21.060
variables var son ambientadas por función, 

47
00:01:21.070 --> 00:01:22.650
esto significa que sólo están 

48
00:01:22.660 --> 00:01:23.990
disponibles dentro de la función 

49
00:01:24.000 --> 00:01:25.520
en la que fueron creadas. Si 

50
00:01:25.530 --> 00:01:27.130
no fueron creadas dentro de una 

51
00:01:26.740 --> 00:01:28.100
función, como en este caso, 

52
00:01:28.110 --> 00:01:29.810
están en el ambiente. 

53
00:01:29.885 --> 00:01:30.870
global. Éstas estan disponibles en 

54
00:01:30.880 --> 00:01:32.210
window, y es por esto que podemos usar 

55
00:01:32.460 --> 00:01:34.330
width aquí en la consola. Pero 

56
00:01:34.340 --> 00:01:35.840
qué pasaría si creamos una función,

57
00:01:35.850 --> 00:01:37.680
aquí, luego ponemos la variable width dentro 

58
00:01:37.690 --> 00:01:39.210
de ella, usamos la consola para mostrar

59
00:01:39.220 --> 00:01:40.900
el valor de width y finalmente ejecutaramos ? 

60
00:01:41.280 --> 00:01:42.990
Funcionaría ? Por supuesto, 

61
00:01:42.990 --> 00:01:44.370
funciona porque este 

62
00:01:44.380 --> 00:01:45.600
está disponible dentro de 

63
00:01:45.610 --> 00:01:47.490
esta función. Y si tratamos de 

64
00:01:47.560 --> 00:01:48.910
usar la consola para loguear width 

65
00:01:49.180 --> 00:01:51.470
después de haberla asignado ?

66
00:01:51.480 --> 00:01:54.940
Funcionaría ? Este caso no funciona. 

67
00:01:54.950 --> 00:01:56.250
Por qué no funciona ? Porque 

68
00:01:56.260 --> 00:01:58.540
width sólo está disponible en el ambiente 

69
00:01:58.550 --> 00:02:00.150
de esa función. Es una variable local 

70
00:02:00.160 --> 00:02:01.680
en esta función y no está

71
00:02:01.690 --> 00:02:03.170
disponible por fuera de este ambiente. 

72
00:02:03.180 --> 00:02:04.140
Me gusta pensar que las llaves {}

73
00:02:04.150 --> 00:02:05.920
son las puertas de la función 

74
00:02:05.930 --> 00:02:07.490
y las variables no están 

75
00:02:07.500 --> 00:02:08.990
disponibles por fuera de las puertas. 

76
00:02:09.000 --> 00:02:10.700
Podemos pennsar que la 

77
00:02:10.700 --> 00:02:12.350
 función las tiene encarceladas. 

78
00:02:12.360 --> 00:02:14.960
Es importante para

79
00:02:14.970 --> 00:02:16.570
nosotros saber esto. Lo que podriamos hacer es 

80
00:02:16.580 --> 00:02:18.270
poner var width acá 

81
00:02:18.280 --> 00:02:20.500
arriba y luego la podriamos actualizar. 

82
00:02:20.510 --> 00:02:22.380
Ahora hemos declarado 

83
00:02:22.455 --> 00:02:23.740
la variable en el ambiente global y la

84
00:02:23.750 --> 00:02:25.700
stamos actualizando. Esto debe funcionar. 

85
00:02:26.070 --> 00:02:27.260
Generalmente, esto no 

86
00:02:27.270 --> 00:02:28.790
es lo que queremos hacer. Queremos

87
00:02:28.865 --> 00:02:30.360
mantener las variables dentro de 

88
00:02:29.970 --> 00:02:30.900
nuestra función. Si queremos 

89
00:02:30.910 --> 00:02:31.940
algo afuera de ella, queremos 

90
00:02:31.950 --> 00:02:33.510
retornarlo y almacenarlo 

91
00:02:33.520 --> 00:02:35.580
en una variable. Esto es algo 

92
00:02:35.590 --> 00:02:37.860
que debemos saber acerca de los 

93
00:02:37.870 --> 00:02:39.700
ambientes en funciones. Voy a 

94
00:02:39.120 --> 00:02:41.660
mostrar un ejemplo en el que

95
00:02:41.670 --> 00:02:43.300
limitando al ambiente de la función se 

96
00:02:43.310 --> 00:02:46.210
nos presentan complicaciones. Digamos 

97
00:02:46.210 --> 00:02:48.830
que tenemos una variable age y que tenemos 

98
00:02:48.840 --> 00:02:52.810
una condición if. Queremos 

99
00:02:52.230 --> 00:02:58.540
crear un número que represente los años perrunos. Si 

100
00:02:58.600 --> 00:03:01.000
son mayores que 12,

101
00:03:01.010 --> 00:03:02.070
calculemos sus edades en años 

102
00:03:02.080 --> 00:03:04.360
de perro y mostrémoslo en consola. "You are 

103
00:03:09.380 --> 00:03:12.140
dog years old." If they are 

104
00:03:12.150 --> 00:03:13.870
Si son mayores que 12, los mostramos en 

105
00:03:13.260 --> 00:03:14.250
la consola log. Aquí estoy usando 

106
00:03:14.250 --> 00:03:15.960
 en esto. Aprenderemos

107
00:03:16.035 --> 00:03:17.170
todo acerca de esto en 

108
00:03:17.180 --> 00:03:19.760
el video "Template Strings". 

109
00:03:19.790 --> 00:03:21.990
Guardamos y funciona. 

110
00:03:22.320 --> 00:03:24.530
Lo único que es un poco 

111
00:03:24.540 --> 00:03:27.490
extraño es esta variable

112
00:03:27.780 --> 00:03:30.090
dog years, pues era 

113
00:03:30.100 --> 00:03:31.350
una variable temporal. La

114
00:03:31.360 --> 00:03:33.100
necesitaba para calcular 

115
00:03:33.110 --> 00:03:34.430
algo rápido y 

116
00:03:34.440 --> 00:03:36.280
luego mostrarlo en la consola 

117
00:03:36.290 --> 00:03:37.350
o agregarlo a la cadena

118
00:03:37.360 --> 00:03:40.600
de alguna manera. Que pasaría si vamos

119
00:03:40.610 --> 00:03:42.020
a la consola y escribimos dog years? 

120
00:03:42.020 --> 00:03:44.390
 Mira, podemos ver 

121
00:03:44.400 --> 00:03:46.020
dog years, se filtró

122
00:03:46.210 --> 00:03:48.100
afuera del condicional if y

123
00:03:49.430 --> 00:03:51.470
ahora es una variable global. Ahora 

124
00:03:51.545 --> 00:03:50.630
esta infiltrada. Aunque 

125
00:03:50.640 --> 00:03:52.210
era una variable temporal

126
00:03:52.450 --> 00:03:53.760
que sólo necesitábamos dentro de 

127
00:03:53.770 --> 00:03:56.070
de este condicional if, esto es porque 

128
00:03:56.000 --> 00:03:57.590
las variables var son ambientadas en funciones --

129
00:03:58.260 --> 00:03:59.760
pero acá no hay ninguna función -- entonces 

130
00:03:59.960 --> 00:04:01.130
no se puede limitar a 

131
00:04:01.140 --> 00:04:03.220
una función. Por esto

132
00:04:03.295 --> 00:04:06.050
se ha limitado al ambiente

133
00:04:06.060 --> 00:04:07.740
de window, lo cual es

134
00:04:07.750 --> 00:04:09.790
un poco inconveninte aquí. Esta 

135
00:04:09.870 --> 00:04:11.830
es una de las ventajas al usar 

136
00:04:12.070 --> 00:04:15.010
let y const. En vez de estar 

137
00:04:15.085 --> 00:04:17.950
ambientadas en funciones, estas 

138
00:04:18.025 --> 00:04:20.030
limitan su ambiente a bloques. Qué es un

139
00:04:20.040 --> 00:04:22.030
bloque? Aquí tenemos un buen ejemplo. 

140
00:04:22.090 --> 00:04:23.870
Cada vez que vemos una llave abriendo

141
00:04:24.130 --> 00:04:25.480
y otra cerrando, 

142
00:04:25.850 --> 00:04:27.460
 eso es un bloque. 

143
00:04:27.610 --> 00:04:28.790
Las funciones también son bloques. 

144
00:04:29.100 --> 00:04:30.380
Ellas van a seguir perteneciendo al ambiente 

145
00:04:30.330 --> 00:04:31.950
de la función. Sin embargo, si 

146
00:04:31.960 --> 00:04:33.530
dentro de la función ó 

147
00:04:33.540 --> 00:04:36.380
dentro de cualquier otro elemento 

148
00:04:36.455 --> 00:04:39.280
que tengamos, estas estarán 

149
00:04:39.355 --> 00:04:40.750
estas estarán limitadas al ambiente definido por el par 

150
00:04:40.760 --> 00:04:42.560
de llaves. Si tomamos aquí

151
00:04:43.010 --> 00:04:44.580
dog years lo cambiamos a

152
00:04:44.650 --> 00:04:47.550
let y refrescamos, todo 

153
00:04:47.560 --> 00:04:50.190
funciona como queríamos. Pero 

154
00:04:50.200 --> 00:04:51.940
si escribo dog years acá, 

155
00:04:52.850 --> 00:04:53.920
la respuesta es, "Dog years is not 

156
00:04:53.930 --> 00:04:55.860
defined." Por qué? Porque la 

157
00:04:56.590 --> 00:04:58.180
declaramos como una variable let. 

158
00:04:58.350 --> 00:04:59.720
Sólo está declarada dentro del 

159
00:04:59.730 --> 00:05:01.550
ambiente del bloque, no en el ambiente de la 

160
00:05:01.560 --> 00:05:03.450
función, un ambiente de bloque. Por esto ahora 

161
00:05:03.460 --> 00:05:05.200
la variable temporal no se ha 

162
00:05:05.240 --> 00:05:07.440
filtrado. Similarmente, podriamos 

163
00:05:07.450 --> 00:05:09.580
usar una variable const aquí 

164
00:05:10.220 --> 00:05:12.800
y funcionaría igual. 

165
00:05:12.875 --> 00:05:14.110
Si escribo dog years tenemos, "

166
00:05:14.380 --> 00:05:15.960
Dog years is not defined." Let 

167
00:05:16.035 --> 00:05:17.900
y const, comparten esta 

168
00:05:17.990 --> 00:05:19.660
característica, ambas son 

169
00:05:19.750 --> 00:05:21.660
limitadas en el ambiente de un bloque y no 

170
00:05:21.720 --> 00:05:23.030
en el ambiente de la función. En el siguiente

171
00:05:23.030 --> 00:05:25.050
video, vamos a

172
00:05:23.580 --> 00:05:24.930
profundizar en otras 

173
00:05:24.940 --> 00:05:26.590
características de las variables 

174
00:05:26.665 --> 00:05:26.990
let y const.

