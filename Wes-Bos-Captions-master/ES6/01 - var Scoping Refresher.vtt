WEBVTT

1
00:00:00.000 --> 00:00:00.000
 

2
00:00:02.310 --> 00:00:03.900
We have three ways to declare 

3
00:00:03.900 --> 00:00:05.390
variables in JavaScript. We've 

4
00:00:05.690 --> 00:00:07.470
got var, which we've always used. 

5
00:00:07.480 --> 00:00:08.840
Now we have two new ones, which 

6
00:00:08.850 --> 00:00:11.080
is let and const. These two 

7
00:00:11.090 --> 00:00:12.840
have some attributes about them 

8
00:00:12.850 --> 00:00:13.970
which are going to be helpful 

9
00:00:13.980 --> 00:00:15.750
for us  , but we 

10
00:00:15.760 --> 00:00:16.800
first need to do a quick, quick, 

11
00:00:16.810 --> 00:00:18.880
quick review of the var keyword 

12
00:00:18.970 --> 00:00:20.370
in order for us to understand 

13
00:00:20.380 --> 00:00:22.220
the benefits and just the 

14
00:00:22.230 --> 00:00:24.190
differences between let and 

15
00:00:24.265 --> 00:00:24.930
const. First thing that we need 

16
00:00:24.940 --> 00:00:26.890
to know about var variables is 

17
00:00:26.900 --> 00:00:28.450
that you can reassign them. You 

18
00:00:28.460 --> 00:00:30.560
can also update them. Let's 

19
00:00:30.570 --> 00:00:32.570
console log the width, and we'll 

20
00:00:32.610 --> 00:00:34.510
update the width to be 200, and 

21
00:00:34.520 --> 00:00:36.390
then we'll console log the width 

22
00:00:36.490 --> 00:00:39.070
again. When we refresh this, 

23
00:00:39.070 --> 00:00:40.990
you see we get 100, 200. Not a 

24
00:00:41.000 --> 00:00:42.420
big deal. We're able to update 

25
00:00:42.430 --> 00:00:43.880
them. What you can also do is 

26
00:00:43.890 --> 00:00:45.200
you can put a var in front of it. 

27
00:00:45.220 --> 00:00:46.040
Now, this is not something you 

28
00:00:46.040 --> 00:00:47.510
should ever do, but we've all 

29
00:00:47.520 --> 00:00:48.940
been there where we run out of 

30
00:00:48.950 --> 00:00:50.350
names for variables and we 

31
00:00:50.360 --> 00:00:51.600
accidentally use the same one 

32
00:00:51.610 --> 00:00:53.690
over again. What's going to 

33
00:00:53.300 --> 00:00:55.350
happen here is it doesn't do 

34
00:00:55.470 --> 00:00:57.420
anything. It works as you'd 

35
00:00:57.430 --> 00:00:58.630
expect, but it doesn't yell at 

36
00:00:58.705 --> 00:01:00.830
you for creating the same 

37
00:01:01.130 --> 00:01:03.160
variable name twice in the same 

38
00:01:03.170 --> 00:01:05.880
scope. That's one thing about 

39
00:01:05.955 --> 00:01:06.890
var variables is that they can 

40
00:01:06.900 --> 00:01:08.420
be updated or redefined. 

41
00:01:08.750 --> 00:01:09.750
Another thing we need to know 

42
00:01:09.825 --> 00:01:11.590
about var variables is how they 

43
00:01:12.430 --> 00:01:13.540
are scoped. Scoping essentially 

44
00:01:13.550 --> 00:01:15.140
means, "Where are these 

45
00:01:15.150 --> 00:01:18.780
variables available to me?" Var 

46
00:01:18.880 --> 00:01:21.060
variables are function scope, 

47
00:01:21.070 --> 00:01:22.650
which means that they are only 

48
00:01:22.660 --> 00:01:23.990
available inside the function 

49
00:01:24.000 --> 00:01:25.520
that they are created. If 

50
00:01:25.530 --> 00:01:27.130
they're not created inside of a 

51
00:01:26.740 --> 00:01:28.100
function at all, like the case 

52
00:01:28.110 --> 00:01:29.810
is right here, they are globally 

53
00:01:29.885 --> 00:01:30.870
scoped. They're available on the 

54
00:01:30.880 --> 00:01:32.210
window, which is why we can type 

55
00:01:32.460 --> 00:01:34.330
width into DevTools here. But 

56
00:01:34.340 --> 00:01:35.840
what if I created a function 

57
00:01:35.850 --> 00:01:37.680
here and put my var width inside 

58
00:01:37.690 --> 00:01:39.210
of it, and console logged the 

59
00:01:39.220 --> 00:01:40.900
width, and then I were to run it? 

60
00:01:41.280 --> 00:01:42.990
Is that going to work? Of course, 

61
00:01:42.990 --> 00:01:44.370
it's going to work because this 

62
00:01:44.380 --> 00:01:45.600
width is available inside of 

63
00:01:45.610 --> 00:01:47.490
this function. What if I also 

64
00:01:47.560 --> 00:01:48.910
tried to console log the width 

65
00:01:49.180 --> 00:01:51.470
after I've set the width? Is it 

66
00:01:51.480 --> 00:01:54.940
going to work? It doesn't work. 

67
00:01:54.950 --> 00:01:56.250
Why doesn't it work? Because 

68
00:01:56.260 --> 00:01:58.540
width is only scoped to that 

69
00:01:58.550 --> 00:02:00.150
function. It is a local variable 

70
00:02:00.160 --> 00:02:01.680
to this function. It is not 

71
00:02:01.690 --> 00:02:03.170
available outside the confines. 

72
00:02:03.180 --> 00:02:04.140
I like to think of these curly 

73
00:02:04.150 --> 00:02:05.920
brackets of your function as 

74
00:02:05.930 --> 00:02:07.490
gates, and they are not 

75
00:02:07.500 --> 00:02:08.990
available outside the gates. 

76
00:02:09.000 --> 00:02:10.700
They're in function jail, 

77
00:02:10.700 --> 00:02:12.350
 as far as you can think 

78
00:02:12.360 --> 00:02:14.960
about it. That's important for 

79
00:02:14.970 --> 00:02:16.570
us to know. What you could do is 

80
00:02:16.580 --> 00:02:18.270
you could say "var width" above 

81
00:02:18.280 --> 00:02:20.500
here, and you could just update 

82
00:02:20.510 --> 00:02:22.380
it instead. Now, we've globally 

83
00:02:22.455 --> 00:02:23.740
scoped a variable and we're 

84
00:02:23.750 --> 00:02:25.700
updating it. That should work. 

85
00:02:26.070 --> 00:02:27.260
Generally, it's probably not 

86
00:02:27.270 --> 00:02:28.790
what you want to do. You want to 

87
00:02:28.865 --> 00:02:30.360
keep your variables inside of 

88
00:02:29.970 --> 00:02:30.900
your function. If you need 

89
00:02:30.910 --> 00:02:31.940
something outside of it, you 

90
00:02:31.950 --> 00:02:33.510
want to return it and store that 

91
00:02:33.520 --> 00:02:35.580
in a variable. That's something 

92
00:02:35.590 --> 00:02:37.860
that we need to know about 

93
00:02:37.870 --> 00:02:39.700
function scoping. I'm going to 

94
00:02:39.120 --> 00:02:41.660
show you a use case where 

95
00:02:41.670 --> 00:02:43.300
function scoping sort of comes 

96
00:02:43.310 --> 00:02:46.210
back and bites us. Let's say we 

97
00:02:46.210 --> 00:02:48.830
have an age variable and we have 

98
00:02:48.840 --> 00:02:52.810
an if statement. We want to 

99
00:02:52.230 --> 00:02:58.540
create a number of dog years. If 

100
00:02:58.600 --> 00:03:01.000
they are greater than 12, let's 

101
00:03:01.010 --> 00:03:02.070
calculate their ages in dog 

102
00:03:02.080 --> 00:03:04.360
years and console log, "You are 

103
00:03:09.380 --> 00:03:12.140
dog years old." If they are 

104
00:03:12.150 --> 00:03:13.870
greater than 12, we just want to 

105
00:03:13.260 --> 00:03:14.250
console log. I'm using 

106
00:03:14.250 --> 00:03:15.960
 in this. We're going 

107
00:03:16.035 --> 00:03:17.170
to learn all about this in the "

108
00:03:17.180 --> 00:03:19.760
Template Strings" video. We'll 

109
00:03:19.790 --> 00:03:21.990
give that a save, and it works. 

110
00:03:22.320 --> 00:03:24.530
The one thing that is a little 

111
00:03:24.540 --> 00:03:27.490
bit funky here is that this var 

112
00:03:27.780 --> 00:03:30.090
right here, dog years, this was 

113
00:03:30.100 --> 00:03:31.350
just a temporary variable. I 

114
00:03:31.360 --> 00:03:33.100
just needed this real quick in 

115
00:03:33.110 --> 00:03:34.430
order to calculate something and 

116
00:03:34.440 --> 00:03:36.280
then stick it into a console log 

117
00:03:36.290 --> 00:03:37.350
or stick it into a string 

118
00:03:37.360 --> 00:03:40.600
somehow. What if I go into my 

119
00:03:40.610 --> 00:03:42.020
console and I type dog years? 

120
00:03:42.020 --> 00:03:44.390
 Look, you can now see 

121
00:03:44.400 --> 00:03:46.020
that dog years, it leaked 

122
00:03:46.210 --> 00:03:48.100
outside of this if statement and 

123
00:03:49.430 --> 00:03:51.470
it is now a global variable. It 

124
00:03:51.545 --> 00:03:50.630
has now leaked. Even though 

125
00:03:50.640 --> 00:03:52.210
this was a temporary variable 

126
00:03:52.450 --> 00:03:53.760
that I only needed inside of 

127
00:03:53.770 --> 00:03:56.070
this if statement, because var 

128
00:03:56.000 --> 00:03:57.590
variables are function scoped -- 

129
00:03:58.260 --> 00:03:59.760
there's no function here -- so 

130
00:03:59.960 --> 00:04:01.130
it's not going to scope it to 

131
00:04:01.140 --> 00:04:03.220
that function. It only has 

132
00:04:03.295 --> 00:04:06.050
scoped it or it has scoped it to 

133
00:04:06.060 --> 00:04:07.740
the entire window, which is a 

134
00:04:07.750 --> 00:04:09.790
little bit of a pain here. That 

135
00:04:09.870 --> 00:04:11.830
is one of the benefits to using 

136
00:04:12.070 --> 00:04:15.010
let and const. Rather than being 

137
00:04:15.085 --> 00:04:17.950
scoped to the function, it is 

138
00:04:18.025 --> 00:04:20.030
scoped to the block. What is a 

139
00:04:20.040 --> 00:04:22.030
block? Here is a great example. 

140
00:04:22.090 --> 00:04:23.870
Any time that you see an open 

141
00:04:24.130 --> 00:04:25.480
and a closing curly bracket, 

142
00:04:25.850 --> 00:04:27.460
that is a block statement. 

143
00:04:27.610 --> 00:04:28.790
Functions are also blocks. 

144
00:04:29.100 --> 00:04:30.380
They're still going to be scoped 

145
00:04:30.330 --> 00:04:31.950
to a function. However, if 

146
00:04:31.960 --> 00:04:33.530
inside of that function or if 

147
00:04:33.540 --> 00:04:36.380
inside of some other element 

148
00:04:36.455 --> 00:04:39.280
that you have, it will then be 

149
00:04:39.355 --> 00:04:40.750
scoped to that set of curly 

150
00:04:40.760 --> 00:04:42.560
brackets. If I now take this 

151
00:04:43.010 --> 00:04:44.580
dog years here and change it to 

152
00:04:44.650 --> 00:04:47.550
let, and I refresh, everything 

153
00:04:47.560 --> 00:04:50.190
works as we would want. But now 

154
00:04:50.200 --> 00:04:51.940
if I type dog years into here, 

155
00:04:52.850 --> 00:04:53.920
it says, "Dog years is not 

156
00:04:53.930 --> 00:04:55.860
defined." Why? Because I 

157
00:04:56.590 --> 00:04:58.180
declared it as a let variable. 

158
00:04:58.350 --> 00:04:59.720
It is only declared inside of a 

159
00:04:59.730 --> 00:05:01.550
block scope, now, not a function 

160
00:05:01.560 --> 00:05:03.450
scope, a block scope, and that 

161
00:05:03.460 --> 00:05:05.200
temporary variable has not then 

162
00:05:05.240 --> 00:05:07.440
leaked out. Similarly, we can 

163
00:05:07.450 --> 00:05:09.580
also use a const variable here 

164
00:05:10.220 --> 00:05:12.800
and it will work just the same. 

165
00:05:12.875 --> 00:05:14.110
If I type dog years, we have, "

166
00:05:14.380 --> 00:05:15.960
Dog years is not defined." Let 

167
00:05:16.035 --> 00:05:17.900
and const, one of the attributes 

168
00:05:17.990 --> 00:05:19.660
of both of them is that they are 

169
00:05:19.750 --> 00:05:21.660
block scoped rather than being 

170
00:05:21.720 --> 00:05:23.030
function scoped. In the next 

171
00:05:23.030 --> 00:05:25.050
video, we're going to take a 

172
00:05:23.580 --> 00:05:24.930
deeper look at some of the other 

173
00:05:24.940 --> 00:05:26.590
attributes of let and const 

174
00:05:26.665 --> 00:05:26.990
variables.

