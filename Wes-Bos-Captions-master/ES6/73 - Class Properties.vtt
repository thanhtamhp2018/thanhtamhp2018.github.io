WEBVTT

1
00:00:02.892 --> 00:00:03.966
<v Instructor>Now I want to talk real quick</v>

2
00:00:03.966 --> 00:00:06.535
about something called class properties.

3
00:00:06.535 --> 00:00:09.493
If you'd done any sort of React in the past,

4
00:00:09.493 --> 00:00:11.179
you probably have seen this peaking through.

5
00:00:11.179 --> 00:00:12.916
But if you're just new to ES6 class,

6
00:00:12.916 --> 00:00:14.687
this might be something that's new to you.

7
00:00:14.687 --> 00:00:16.184
There's not a whole lot of code involved here,

8
00:00:16.184 --> 00:00:17.747
so maybe just sit back,

9
00:00:17.747 --> 00:00:18.615
grab a coffee,

10
00:00:18.615 --> 00:00:19.529
and listen to this one.

11
00:00:19.529 --> 00:00:20.962
Let's go back to this example

12
00:00:20.962 --> 00:00:22.386
where we learned classes,

13
00:00:22.386 --> 00:00:23.833
where we created a class dog,

14
00:00:23.833 --> 00:00:26.133
and then we created two new dogs.

15
00:00:26.133 --> 00:00:27.657
We have Snickers, and we have Sunny.

16
00:00:27.657 --> 00:00:29.865
And we passed the name and the type of dog.

17
00:00:29.865 --> 00:00:31.877
We learned about how you can have methods

18
00:00:31.877 --> 00:00:34.127
and static methods and what not.

19
00:00:34.127 --> 00:00:36.247
But one thing that I didn't have

20
00:00:36.247 --> 00:00:38.017
is the ability to have class properties.

21
00:00:38.017 --> 00:00:40.984
Or sometimes people refer to them as class initializers.

22
00:00:40.984 --> 00:00:43.538
So let's say every time one of the dogs barked

23
00:00:43.538 --> 00:00:46.538
we want it to say how many times they're barked.

24
00:00:46.538 --> 00:00:47.371
How would we do that?

25
00:00:47.371 --> 00:00:49.712
Well we would have to first end the constructor

26
00:00:49.712 --> 00:00:51.537
'cause again, the constructor gets called

27
00:00:51.537 --> 00:00:52.998
whenever a dog gets created.

28
00:00:52.998 --> 00:00:55.815
We would have to set the default initializer

29
00:00:55.815 --> 00:00:57.915
to like, this.barks = 0.

30
00:00:57.915 --> 00:01:00.495
And then every time that they barked,

31
00:01:00.495 --> 00:01:02.946
we would have to say this.barks is equal

32
00:01:02.946 --> 00:01:04.863
to this.barks + 1.

33
00:01:06.895 --> 00:01:10.478
And then let's just console log this.barks.

34
00:01:11.831 --> 00:01:13.130
Good.

35
00:01:13.130 --> 00:01:15.287
So if I give that a show.

36
00:01:15.287 --> 00:01:18.151
If we open that up in my browser here.

37
00:01:18.151 --> 00:01:20.226
Then we say Snickers.bark.

38
00:01:20.226 --> 00:01:21.562
One, two, three.

39
00:01:21.562 --> 00:01:23.479
Then Sunny.bark.

40
00:01:23.479 --> 00:01:24.345
One, two, three.

41
00:01:24.345 --> 00:01:25.178
Good.

42
00:01:25.178 --> 00:01:27.964
But this syntax is not great

43
00:01:27.964 --> 00:01:31.100
because often you'll want to have a lot of initializers.

44
00:01:31.100 --> 00:01:33.164
And any single time that you want to bind

45
00:01:33.164 --> 00:01:34.557
something to the instance,

46
00:01:34.557 --> 00:01:36.895
you need to put it in the constructor.

47
00:01:36.895 --> 00:01:40.133
So what's happening is we have a proposal out right now,

48
00:01:40.133 --> 00:01:42.070
and it looks like it's going to make its way in.

49
00:01:42.070 --> 00:01:44.548
It's been heavily adopted by the React Community.

50
00:01:44.548 --> 00:01:47.469
And it's for class properties.

51
00:01:47.469 --> 00:01:48.542
And it's pretty simple.

52
00:01:48.542 --> 00:01:50.894
You simply, instead of saying this.barks = 0,

53
00:01:50.894 --> 00:01:52.204
we would take that out,

54
00:01:52.204 --> 00:01:54.166
and we would do something like this:

55
00:01:54.166 --> 00:01:56.541
Barks is equal to 0.

56
00:01:56.541 --> 00:01:57.851
In then what that will do.

57
00:01:57.851 --> 00:02:00.691
Actually semicolon goes after those properties.

58
00:02:00.691 --> 00:02:03.087
Every single time that you create a dog,

59
00:02:03.087 --> 00:02:05.403
it's going to get its own property called barks,

60
00:02:05.403 --> 00:02:08.966
and you'll be able to access it inside of it

61
00:02:08.966 --> 00:02:11.006
via this.barks.

62
00:02:11.006 --> 00:02:12.399
So if I run that,

63
00:02:12.399 --> 00:02:13.722
it's not going to work

64
00:02:13.722 --> 00:02:15.159
because we're going to get an error.

65
00:02:15.159 --> 00:02:17.122
This is not part of JavaScript just yet.

66
00:02:17.122 --> 00:02:19.062
However, there is a Babel transform

67
00:02:19.062 --> 00:02:21.444
that we have here called transform class properties.

68
00:02:21.444 --> 00:02:24.288
And we can actually take that script here,

69
00:02:24.288 --> 00:02:26.788
run it through the Try it out,

70
00:02:29.706 --> 00:02:30.959
and when I paste it in there,

71
00:02:30.959 --> 00:02:34.482
you see that it then takes the barks property

72
00:02:34.482 --> 00:02:35.901
off of the class,

73
00:02:35.901 --> 00:02:38.922
and it puts it in the constructor

74
00:02:38.922 --> 00:02:40.316
that it's being called

75
00:02:40.316 --> 00:02:42.660
along with the sought name and stop breed

76
00:02:42.660 --> 00:02:43.716
that we have here.

77
00:02:43.716 --> 00:02:45.152
So pretty straight forward.

78
00:02:45.152 --> 00:02:47.149
It's going to make things a lot easier for us.

79
00:02:47.149 --> 00:02:49.340
Instead of sticking absolutely everything

80
00:02:49.340 --> 00:02:51.474
inside of the constructor,

81
00:02:51.474 --> 00:02:53.356
you'll be able to put it alongside here.

82
00:02:53.356 --> 00:02:55.227
In React, we see that with with things

83
00:02:55.227 --> 00:02:57.793
like state is equal to something like that,

84
00:02:57.793 --> 00:03:00.960
or initialProps is equal to an object.

85
00:03:02.538 --> 00:03:03.865
You get the point that we have there.

86
00:03:03.865 --> 00:03:05.530
So keep your eyes peeled for that.

87
00:03:05.530 --> 00:03:07.972
Hopefully it will make it into the language.

