WEBVTT

00:00:00.323 --> 00:00:04.336 line:100% position:50% align:middle
♪[music]♪

00:00:06.540 --> 00:00:09.780 line:100% position:50% align:middle
So what we want to do is we want to
display our actual order here.

00:00:09.780 --> 00:00:15.130 line:100% position:50% align:middle
So we have the sort of object here which
has all the keys in the number of pounds

00:00:15.130 --> 00:00:19.000 line:100% position:50% align:middle
I want, but we want to actually display
that to a user in a way that's meaningful.

00:00:19.000 --> 00:00:22.600 line:100% position:50% align:middle
So we want to show them how many pounds
they've bought, what type of fish they

00:00:22.600 --> 00:00:26.570 line:100% position:50% align:middle
bought, and allow them to remove it from
their order, show them the cumulative

00:00:26.570 --> 00:00:31.490 line:100% position:50% align:middle
total of that one line item as well as
show them the entire reduced total of

00:00:31.490 --> 00:00:32.560 line:100% position:50% align:middle
their entire order.

00:00:32.560 --> 00:00:37.020 line:100% position:50% align:middle
So how do we do that? Well, our order
component here, which if you go into

00:00:37.020 --> 00:00:40.220 line:100% position:50% align:middle
app.js, you're going to see our Order
component, and it needs two things.

00:00:40.220 --> 00:00:43.740 line:100% position:50% align:middle
First, it needs all the fishes because
we're going to need things like the name

00:00:43.740 --> 00:00:49.130 line:100% position:50% align:middle
of it and the price of it. So we'll pass
it to that. So "this.state.fishes".

00:00:49.130 --> 00:00:54.190 line:100% position:50% align:middle
And we also need the order itself, so
we'll say "order = {this.state.order}".

00:00:54.190 --> 00:00:57.370 line:100% position:50% align:middle
And you may be saying say like, "Why don't
I just pass the entire state down?" Well,

00:00:57.370 --> 00:01:00.870 line:100% position:50% align:middle
I probably will have more stuff in the
future in my application and this is

00:01:00.870 --> 00:01:03.670 line:100% position:50% align:middle
probably not a good practice just to pass
your entire state all the way down.

00:01:03.670 --> 00:01:07.270 line:100% position:50% align:middle
Just pick and choose the actual things
that you need, especially when we get into

00:01:07.270 --> 00:01:09.300 line:100% position:50% align:middle
propTypes, that's going to come in handy.

00:01:09.300 --> 00:01:13.720 line:100% position:50% align:middle
Now let's go over to our Order component
here. And first of all, we need to replace

00:01:13.720 --> 00:01:19.610 line:100% position:50% align:middle
this paragraph tag with a div with a class
of "order-wrap". And then inside of that,

00:01:19.610 --> 00:01:24.640 line:100% position:50% align:middle
give yourself an 'h2' that says "Order" or
"Your Order," whatever you feel like

00:01:24.640 --> 00:01:28.060 line:100% position:50% align:middle
saying. Inside of here I want to show all
of my orders as well as the total,

00:01:28.060 --> 00:01:31.840 line:100% position:50% align:middle
so we need a couple variables actually to
work with before we return this JSX.

00:01:31.840 --> 00:01:36.760 line:100% position:50% align:middle
So right above in our 'return', I'm going to
make a new variable called "orderIds"

00:01:36.760 --> 00:01:44.040 line:100% position:50% align:middle
and that's going to be 'Object.keys()' of
'this.props.order', right? Because the order

00:01:44.040 --> 00:01:48.080 line:100% position:50% align:middle
got passed down via props and we want
an array of all of the keys.

00:01:48.080 --> 00:01:55.900 line:100% position:50% align:middle
Now I could just go ahead and put that in
here if I wanted with some curly brackets.

00:01:56.000 --> 00:01:59.800 line:100% position:50% align:middle
Load some type of fishes, and when I add
it to the order, you see that fish1,

00:01:59.800 --> 00:02:03.950 line:100% position:50% align:middle
fish2, that's getting added to my actual
order. But we don't just want to show

00:02:03.950 --> 00:02:07.280 line:100% position:50% align:middle
that, we want to show the total and
everything else along with it.

00:02:07.280 --> 00:02:12.300 line:100% position:50% align:middle
So along with 'orderIds', we want the
totals. So we say, "const total ="

00:02:12.300 --> 00:02:18.050 line:100% position:50% align:middle
and we're going to take this 'orderIds'
and 'reduce' it. And if you've never used

00:02:18.050 --> 00:02:22.920 line:100% position:50% align:middle
reduce() before, it allows you to loop over
an array and add up a whole bunch of

00:02:22.920 --> 00:02:27.430 line:100% position:50% align:middle
stuff, or just really return a new
something, an object, array, or something

00:02:27.430 --> 00:02:31.330 line:100% position:50% align:middle
like that. In our case, we're using a very
simple use case, which would be adding up

00:02:31.330 --> 00:02:32.020 line:100% position:50% align:middle
a bunch of things.

00:02:32.020 --> 00:02:38.470 line:100% position:50% align:middle
So we'll have a prevTotal and we'll have a
key for that. Use an arrow function here.

00:02:38.470 --> 00:02:43.510 line:100% position:50% align:middle
Then inside of it, we need the fish, which
is we have all of the fishes but we don't

00:02:43.510 --> 00:02:49.610 line:100% position:50% align:middle
have the one specific fish. So
"this.props.fish[key]", that's the fish1,

00:02:49.610 --> 00:02:54.280 line:100% position:50% align:middle
fish2, fish 3, etc., etc. We
need the count, how many of them did they

00:02:54.280 --> 00:03:05.320 line:100% position:50% align:middle
buy? So "const count = this.props.order[key]".
So if there is like

00:03:05.320 --> 00:03:09.430 line:100% position:50% align:middle
a 'fish1' in the order, it's going to tell
us how many they have purchased.

00:03:09.430 --> 00:03:13.960 line:100% position:50% align:middle
And then finally, we need to know is that
fish available? Because they may have

00:03:13.960 --> 00:03:17.090 line:100% position:50% align:middle
bought it, but then it might be removed
from the order at a later time.

00:03:17.090 --> 00:03:20.500 line:100% position:50% align:middle
Remember, this is a real time application
where things can change at any given

00:03:20.500 --> 00:03:27.200 line:100% position:50% align:middle
moment. So we check first is there a fish,
and then we also check if the fish status

00:03:27.200 --> 00:03:29.199 line:100% position:50% align:middle
is equal to available.

00:03:31.610 --> 00:03:37.570 line:100% position:50% align:middle
Now we simply just go ahead and add it up.
So we say if the fish is available then we

00:03:37.570 --> 00:03:42.270 line:100% position:50% align:middle
can go ahead and add it to the total.
So we return the prevTotal.

00:03:42.270 --> 00:03:47.030 line:100% position:50% align:middle
So the amount that we added up in the last
run plus and we're going to take the count

00:03:47.030 --> 00:03:55.420 line:100% position:50% align:middle
times the fish.price or zero. And why you
do that or zero, that's because

00:03:55.420 --> 00:03:59.090 line:100% position:50% align:middle
sometimes the fish will be in our order
but then it will be deleted,

00:03:59.090 --> 00:04:03.920 line:100% position:50% align:middle
and we don't want to...we want to make
sure that we don't run into any issues

00:04:03.920 --> 00:04:07.780 line:100% position:50% align:middle
there. Otherwise, we're just going to
return the prevTotal, and why do we do

00:04:07.780 --> 00:04:11.510 line:100% position:50% align:middle
that? Because if it's available, we'll
return the new amount, otherwise,

00:04:11.510 --> 00:04:13.560 line:100% position:50% align:middle
we'll return the last amount.

00:04:13.560 --> 00:04:18.490 line:100% position:50% align:middle
This reduce() right here, we need to start
with a starting value.

00:04:18.490 --> 00:04:25.290 line:100% position:50% align:middle
So you need to make sure we put a comma
zero here, and then we should have a value

00:04:25.290 --> 00:04:31.110 line:100% position:50% align:middle
called total. So let's take it and
we'll put it in here, just as total, and

00:04:31.110 --> 00:04:37.330 line:100% position:50% align:middle
when we add things to our order,
fishes.order. "Cannot read property 'fish1' of

00:04:37.330 --> 00:04:44.520 line:100% position:50% align:middle
undefined," and that is because we forgot
this is not...it's not "this.props.fish" and

00:04:44.520 --> 00:04:48.720 line:100% position:50% align:middle
if I had propTypes, that would have
caught it, we will go into that in

00:04:48.720 --> 00:04:54.490 line:100% position:50% align:middle
just a second. It's "fishes", and save that.
Now you're going to load some in,

00:04:54.490 --> 00:04:56.450 line:100% position:50% align:middle
add them to order... there we go.

00:04:56.450 --> 00:05:03.310 line:100% position:50% align:middle
So as I am adding in my values here, the
amount that we're paying is just going up

00:05:03.310 --> 00:05:07.960 line:100% position:50% align:middle
and up and up. So that's good.
Now, it's not formatted properly,

00:05:07.960 --> 00:05:11.930 line:100% position:50% align:middle
so how do we do that? Well, we know in
our helpers file, you have this function

00:05:11.930 --> 00:05:17.760 line:100% position:50% align:middle
called formatPrice. So we can just
import formatPrice function from our

00:05:17.760 --> 00:05:26.500 line:100% position:50% align:middle
helpers file. And then we'll go down to
our total here, grab that,

00:05:26.500 --> 00:05:31.260 line:100% position:50% align:middle
add it , add to order. Here we go, looking
good. Just get this formatted properly or

00:05:31.260 --> 00:05:35.194 line:100% position:50% align:middle
get rid of this 'orderIds', don't need it.
We'll have an unordered list with

00:05:35.194 --> 00:05:37.443 line:100% position:50% align:middle
the class of "order".

00:05:37.930 --> 00:05:44.390 line:100% position:50% align:middle
And inside of that, give yourselves a
list item with a class of "total". Inside

00:05:44.390 --> 00:05:49.480 line:100% position:50% align:middle
of that, give yourself a 'strong' tag that
says "Total:", and below that we're going

00:05:49.480 --> 00:05:54.830 line:100% position:50% align:middle
to move our formatted price total up below
it just so that some of the CSS that I've

00:05:54.830 --> 00:06:00.050 line:100% position:50% align:middle
written for you will kick and it'll look a
little bit better. Let's take a look.

00:06:00.050 --> 00:06:04.590 line:100% position:50% align:middle
Very nice. Okay, so let's do the other
part, which is displaying each individual

00:06:04.590 --> 00:06:09.760 line:100% position:50% align:middle
fish that is currently in our order. Now,
in order to render out each of the

00:06:09.760 --> 00:06:13.790 line:100% position:50% align:middle
individual items from our order, I'm not
going to make a separate component in this

00:06:13.790 --> 00:06:16.870 line:100% position:50% align:middle
case, and I could. And if you're thinking
that, you can go ahead.

00:06:16.870 --> 00:06:19.690 line:100% position:50% align:middle
However, I wanted to show you another
thing that's called a render function,

00:06:19.690 --> 00:06:26.170 line:100% position:50% align:middle
where sometimes it doesn't make sense to
create an entirely new component where you

00:06:26.170 --> 00:06:31.820 line:100% position:50% align:middle
have to pass everything down, but you also
know that it's a lot to put a lot of code

00:06:31.820 --> 00:06:36.330 line:100% position:50% align:middle
in just one render function in here and it
starts to get a little bit overwhelming.

00:06:36.330 --> 00:06:42.220 line:100% position:50% align:middle
So what we could also do is shell out some
of the work to a separate render function

00:06:42.220 --> 00:06:45.790 line:100% position:50% align:middle
that just lives inside of our order
component. So I'll show you what I mean

00:06:45.790 --> 00:06:52.950 line:100% position:50% align:middle
here. Let's go to this order here and
let's grab some curly brackets.

00:06:52.950 --> 00:06:58.317 line:100% position:50% align:middle
And we have this array of orderIds. So
we're going to grab all of those orderIds

00:06:58.317 --> 00:07:02.540 line:100% position:50% align:middle
here and we are going to loop over
them with a 'map'.

00:07:02.540 --> 00:07:07.240 line:100% position:50% align:middle
Now, usually we would have something like
this, a key, and then we would return a

00:07:07.240 --> 00:07:11.720 line:100% position:50% align:middle
paragraph with that actual key in it. And
you don't have to do this because I'm

00:07:11.720 --> 00:07:14.640 line:100% position:50% align:middle
going to delete it. But I'll just show
you, let's use a list item because we're

00:07:14.640 --> 00:07:18.900 line:100% position:50% align:middle
inside of an unordered list. And there's
some fishes in, and you see that now when

00:07:18.900 --> 00:07:22.770 line:100% position:50% align:middle
I add the items in, it's yelling at me for
not having a key. That's fine,

00:07:22.770 --> 00:07:27.730 line:100% position:50% align:middle
don't worry about that. But now when I add
them, it will render it out for us. But

00:07:27.730 --> 00:07:31.910 line:100% position:50% align:middle
I've got a lot more to put on in here, and
in also we're going to do animation in a

00:07:31.910 --> 00:07:36.920 line:100% position:50% align:middle
future video where we animate in this
value right here, and that's going to take

00:07:36.920 --> 00:07:38.680 line:100% position:50% align:middle
a lot more code as well.

00:07:38.680 --> 00:07:43.400 line:100% position:50% align:middle
So I don't want to do it right in here,
I'm going to shell it off to a render

00:07:43.400 --> 00:07:46.450 line:100% position:50% align:middle
function. So I'm going to delete this and
we're just going to say,

00:07:46.450 --> 00:07:52.160 line:100% position:50% align:middle
"this.renderOrder". And what that does is
it says all right, renderOrder, and we can

00:07:52.160 --> 00:07:55.740 line:100% position:50% align:middle
go up here right before our render and
we'll make our renderOrder() function.

00:07:55.740 --> 00:08:00.950 line:100% position:50% align:middle
And I just made this method up, it's not a
specific one to React,

00:08:00.950 --> 00:08:05.520 line:100% position:50% align:middle
I can call it whatever I want. That will
give us the key for each one, and then we

00:08:05.520 --> 00:08:08.480 line:100% position:50% align:middle
need a couple lines here, we need the
actual fish, say,

00:08:08.480 --> 00:08:18.590 line:100% position:50% align:middle
"this.props.fishes[key];" And then we also
need the count, which is going to be

00:08:18.590 --> 00:08:27.510 line:100% position:50% align:middle
"this.props.fishes[key];" Actually not
"fishes", it's going to be "order",

00:08:27.510 --> 00:08:29.850 line:100% position:50% align:middle
because that will tell us how many
they have ordered.

00:08:29.850 --> 00:08:37.880 line:100% position:50% align:middle
Now, if there is no fish or the
fish.status is equal to unavailable,

00:08:37.880 --> 00:08:44.080 line:100% position:50% align:middle
then we need to return a list item. And
we're going to do this because we're going

00:08:44.080 --> 00:08:48.730 line:100% position:50% align:middle
to be able to delete a fish. And if
someone has it in their basket and then we

00:08:48.730 --> 00:08:53.370 line:100% position:50% align:middle
delete the fish or we mark it as
"unavailable" then they need to know that

00:08:53.370 --> 00:08:59.820 line:100% position:50% align:middle
they can't buy that fish because it's no
longer available, right? And we give this

00:08:59.820 --> 00:09:05.770 line:100% position:50% align:middle
one a key of "{key}", and again, that will help
React determine which actual domino this

00:09:05.770 --> 00:09:13.650 line:100% position:50% align:middle
is, and then inside of that we'll say,
"Sorry," and we'll say, "Fish is no longer

00:09:13.650 --> 00:09:15.060 line:100% position:50% align:middle
available!"

00:09:15.060 --> 00:09:21.174 line:100% position:50% align:middle
Now, we can actually take it one step
further and say, "If there is a fish,"

00:09:21.174 --> 00:09:26.510 line:100% position:50% align:middle
then we can say the fish.name. So if I
have like Pacific Halibut and I mark it as

00:09:26.510 --> 00:09:32.298 line:100% position:50% align:middle
unavailable, we'll say, "Pacific Halibut
is no longer available."

00:09:32.298 --> 00:09:37.130 line:100% position:50% align:middle
Otherwise, if someone totally
deletes the fish entirely from our

00:09:37.130 --> 00:09:40.640 line:100% position:50% align:middle
inventory management system that we're
going to build, then we won't know the

00:09:40.640 --> 00:09:45.310 line:100% position:50% align:middle
name of it because it will be deleted and
we'll just say "fish". So if there's a fish,

00:09:45.310 --> 00:09:48.760 line:100% position:50% align:middle
put the fish's name there, otherwise,
just put the word, "Fish is no longer

00:09:48.760 --> 00:09:49.270 line:100% position:50% align:middle
available."

00:09:49.270 --> 00:09:58.410 line:100% position:50% align:middle
Good, then let's go down here and we will
return the actual list item for when the

00:09:58.410 --> 00:10:05.700 line:100% position:50% align:middle
fish is available. Key equals key. Inside
of that we'll give ourselves a span

00:10:05.700 --> 00:10:16.950 line:100% position:50% align:middle
where we say "count lbs", fish.name, so "3lbs
of Pacific Halibut." And then we'll

00:10:16.950 --> 00:10:24.330 line:100% position:50% align:middle
have a span with the class of "price", where
we will not just give the fish.price

00:10:24.330 --> 00:10:29.310 line:100% position:50% align:middle
because that is just one pound, but we'll
take the count and multiply that by the

00:10:29.310 --> 00:10:36.980 line:100% position:50% align:middle
fish.price. And then we'll wrap that
entire thing here in our formatPrice

00:10:36.980 --> 00:10:43.050 line:100% position:50% align:middle
function. See where we're at right now,
add it in, add some stuff to our order.

00:10:43.050 --> 00:10:50.256 line:100% position:50% align:middle
We got an error, "Cannot read property
'props' of undefined." This is the exact

00:10:50.256 --> 00:10:51.994 line:100% position:50% align:middle
problem that we were having earlier.

00:10:52.330 --> 00:10:57.802 line:100% position:50% align:middle
I use 'this' inside of a function that
wasn't render(). What do we do when you

00:10:57.802 --> 00:11:05.120 line:100% position:50% align:middle
want to be able to access 'this' inside of a
method? You need to bind it. So we can

00:11:06.231 --> 00:11:14.080 line:100% position:50% align:middle
grab a constructor or run super(), and we'll
say "this.renderorder =

00:11:14.080 --> 00:11:22.250 line:100% position:50% align:middle
this.renderOrder.bind(this);" And with that
one line this renderOrder() function should

00:11:22.250 --> 00:11:29.490 line:100% position:50% align:middle
now be bound to Order and we'll able to
access thing on Order, such as 'props'.

00:11:29.490 --> 00:11:30.415 line:100% position:50% align:middle
Load it in.

00:11:31.006 --> 00:11:34.850 line:100% position:50% align:middle
Oh, you have to know how to spell
"return." You're probably screaming at me

00:11:34.850 --> 00:11:38.530 line:100% position:50% align:middle
this whole time while I was coding.
Otherwise, JavaScript won't work.

00:11:38.530 --> 00:11:43.080 line:100% position:50% align:middle
Load it in, and there we go, one pound of
Pacific Halibut, one pound of Lobster, and

00:11:43.080 --> 00:11:46.000 line:100% position:50% align:middle
then when I add additional ones,
it will just keep adding up.
