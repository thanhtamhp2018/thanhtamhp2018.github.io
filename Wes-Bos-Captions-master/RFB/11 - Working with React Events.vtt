WEBVTT

00:00:00.000 --> 00:00:02.960 line:100% position:50% align:middle
♪ [music] ♪

00:00:06.902 --> 00:00:10.476 line:100% position:50% align:middle
Events in React are exactly the same as
events in regular JavaScript,

00:00:10.476 --> 00:00:12.376 line:100% position:50% align:middle
or if you're coming from
a jQuery background,

00:00:12.376 --> 00:00:16.320 line:100% position:50% align:middle
if you're used to listening to onClick or
onSubmit, things like that,

00:00:16.320 --> 00:00:20.020 line:100% position:50% align:middle
you're going to feel right at home in the
React event system. Really the only

00:00:20.020 --> 00:00:23.840 line:100% position:50% align:middle
difference with React events is that they
wrap them in this cross-browser wrapper

00:00:23.840 --> 00:00:28.660 line:100% position:50% align:middle
called SyntheticEvent. It works exactly
the same as regular JavaScript events,

00:00:28.660 --> 00:00:31.270 line:100% position:50% align:middle
it just does a little bit of stuff under
the hood.

00:00:31.270 --> 00:00:36.180 line:100% position:50% align:middle
Make sure that it works cross-browser for
you. Now one thing that people see at

00:00:36.180 --> 00:00:41.770 line:100% position:50% align:middle
first about React, is that events are done
in line. If you're coming from regular

00:00:41.770 --> 00:00:46.160 line:100% position:50% align:middle
JavaScript or jQuery you know that you
would have your HTML in one place and then

00:00:46.160 --> 00:00:49.780 line:100% position:50% align:middle
you would write your JavaScript which
would then select that HTML and then come

00:00:49.780 --> 00:00:55.980 line:100% position:50% align:middle
back and listen for a click on that event.
In React, there really isn't a whole lot

00:00:55.980 --> 00:01:00.070 line:100% position:50% align:middle
of separations of concerns and we just
attach the event

00:01:00.070 --> 00:01:07.070 line:100% position:50% align:middle
via an onClick or an onSubmit event
handler right in line on the form.

00:01:07.070 --> 00:01:10.820 line:100% position:50% align:middle
So the way that we're going to do that,
and let's take a look at what we've got

00:01:10.820 --> 00:01:16.070 line:100% position:50% align:middle
here in our app. When I submit this visit
store, a couple things need to happen.

00:01:16.070 --> 00:01:20.210 line:100% position:50% align:middle
First of all, I need to pull whatever the
person has typed into this box,

00:01:20.210 --> 00:01:25.960 line:100% position:50% align:middle
and we need to get that into React. And
second we need to transition the URL from

00:01:25.960 --> 00:01:30.800 line:100% position:50% align:middle
just '/', onto 'store/glamorous-clumsy-children'

00:01:30.800 --> 00:01:34.990 line:100% position:50% align:middle
or whatever the user has typed in
there. So what we're going to do is we're

00:01:34.990 --> 00:01:39.610 line:100% position:50% align:middle
going to open up our StorePicker
component right here and we are going

00:01:39.610 --> 00:01:44.410 line:100% position:50% align:middle
to...what event do we need to listen for
here? You might think...everyone always

00:01:44.410 --> 00:01:48.960 line:100% position:50% align:middle
thinks you listen for a click on the
button, but you also want to cover anyone

00:01:48.960 --> 00:01:53.790 line:100% position:50% align:middle
hitting enter on the button. Really the
event that we want here is called the

00:01:53.790 --> 00:01:59.650 line:100% position:50% align:middle
"onSubmit" event. So we've got a form element
here, and I'm going to say "onSubmit="...

00:01:59.650 --> 00:02:04.910 line:100% position:50% align:middle
Now, what happens? Well, we are going to

00:02:04.910 --> 00:02:08.630 line:100% position:50% align:middle
create our own method. I'm going to leave
this empty right now and this is the first

00:02:08.630 --> 00:02:13.030 line:100% position:50% align:middle
time that we're adding an additional
method to our React component.

00:02:13.030 --> 00:02:16.880 line:100% position:50% align:middle
So right above render(), what I'm going to
tell you to do, is we're going to create a

00:02:16.880 --> 00:02:23.160 line:100% position:50% align:middle
method called "goToStore". Now if you've
never used an ES6 class,

00:02:23.160 --> 00:02:27.010 line:100% position:50% align:middle
you may immediately put a comma there
because that's how you would normally do

00:02:27.010 --> 00:02:32.390 line:100% position:50% align:middle
it in an object, but ES6 classes do not
have any commas after them.

00:02:32.390 --> 00:02:34.910 line:100% position:50% align:middle
And then inside of the store we're going
to do those two things that we said,

00:02:34.910 --> 00:02:40.230 line:100% position:50% align:middle
we're going to say first grab the text
from the box, and second,

00:02:40.230 --> 00:02:46.820 line:100% position:50% align:middle
we're going to transition from '/' to
'/store/:storeID'.

00:02:46.820 --> 00:02:50.530 line:100% position:50% align:middle
Whatever the actual store ID.
That's going to be a variable for us.

00:02:50.530 --> 00:02:58.350 line:100% position:50% align:middle
Let's just get this goToStore() working. Console log
"You changed the URL."

00:02:58.350 --> 00:03:03.590 line:100% position:50% align:middle
So when someone submits it
we need to then go to store. So how do we

00:03:03.590 --> 00:03:09.870 line:100% position:50% align:middle
do that? Well, we simply just say "this.goToStore".
Now let's take a quick look

00:03:09.870 --> 00:03:16.090 line:100% position:50% align:middle
at that. 'this', what is 'this'? In
render()...render methods are bound to the

00:03:16.090 --> 00:03:19.940 line:100% position:50% align:middle
actual class that you're in. All the other
methods that we have on this React,

00:03:19.940 --> 00:03:24.430 line:100% position:50% align:middle
the ones we make up, like goToStore(),
that isn't going to be bound to the actual

00:03:24.430 --> 00:03:27.230 line:100% position:50% align:middle
component, and we're going to have to
figure out how do we actually bind that to

00:03:27.230 --> 00:03:30.270 line:100% position:50% align:middle
the component. So that when we use 'this',
it's going to equal to the component.

00:03:30.270 --> 00:03:34.460 line:100% position:50% align:middle
But render(), render() is a method which is
bound to the component,

00:03:34.460 --> 00:03:39.360 line:100% position:50% align:middle
meaning that we can use this inside of the
render() component, and it's always going to

00:03:39.360 --> 00:03:43.750 line:100% position:50% align:middle
equal to the actual component. So we can
say "this.goToStore",

00:03:43.750 --> 00:03:48.400 line:100% position:50% align:middle
and then we said "You changed the URL." So
let's open up our dev tools here,

00:03:48.400 --> 00:03:51.890 line:100% position:50% align:middle
and we should see console log "You changed
the URL" when I click submit.

00:03:51.890 --> 00:03:56.570 line:100% position:50% align:middle
Oh, you see it just a second, and then it
reloads the page. You see this little

00:03:56.570 --> 00:04:00.170 line:100% position:50% align:middle
question mark get's thrown in it. And if
we preserve the log

00:04:00.170 --> 00:04:06.060 line:100% position:50% align:middle
you'll see it works. But then we refresh
the page. And why is that?

00:04:06.060 --> 00:04:10.340 line:100% position:50% align:middle
That's because when you submit a form, by
default it's going to take all of the data

00:04:10.340 --> 00:04:14.950 line:100% position:50% align:middle
that you've put in here, and it's going to
send it along to whatever the action of

00:04:14.950 --> 00:04:19.780 line:100% position:50% align:middle
the form is, or it's just going to refresh
the page if we haven't provided any action

00:04:19.780 --> 00:04:23.790 line:100% position:50% align:middle
there. So how do we do that in just
regular JavaScript? That's "preventDefault()".

00:04:23.790 --> 00:04:29.480 line:100% position:50% align:middle
So we go up to this event right
here, we pass ourselves the event,

00:04:29.480 --> 00:04:32.550 line:100% position:50% align:middle
which is all the information.
This is not anything special in React.

00:04:32.550 --> 00:04:37.430 line:100% position:50% align:middle
This is just regular JavaScript. And we
type "event.preventDefault()" and that

00:04:37.430 --> 00:04:41.130 line:100% position:50% align:middle
will stop the default from happening,
which is refreshing the page.

00:04:41.130 --> 00:04:46.980 line:100% position:50% align:middle
So give that a save. Now when I click this
it will say "You changed the URL."

00:04:46.980 --> 00:04:53.560 line:100% position:50% align:middle
Good. So we have stopped the form from
submitting. Now we need to grab the text

00:04:53.560 --> 00:05:00.280 line:100% position:50% align:middle
from the box. You might be tempted to just
reach for 'document.querySelect'

00:05:00.280 --> 00:05:06.150 line:100% position:50% align:middle
or 'getElementByID', or in jQuery, you
might do something like this.

00:05:06.150 --> 00:05:11.960 line:100% position:50% align:middle
'const value='...and you might select
the input and call '.val()' on it and

00:05:11.960 --> 00:05:19.400 line:100% position:50% align:middle
call it a day. In React you want to stay
away from actually touching the DOM as

00:05:19.400 --> 00:05:24.290 line:100% position:50% align:middle
much as possible, because the way that
React works, is that we just modify the

00:05:24.290 --> 00:05:30.000 line:100% position:50% align:middle
data, we render out this JSX and we are
hands-off with touching the DOM.

00:05:30.000 --> 00:05:34.660 line:100% position:50% align:middle
We let React actually handle that part.
How do we actually do it in the case where

00:05:34.660 --> 00:05:40.120 line:100% position:50% align:middle
we actually need to get data out to...out
of an input? The way that we do that is

00:05:40.120 --> 00:05:45.040 line:100% position:50% align:middle
with something called a "ref." A ref is a
way to reference the actual input.

00:05:45.040 --> 00:05:49.010 line:100% position:50% align:middle
I'm going to go down to this input here,
we actually need access to it,

00:05:49.010 --> 00:05:55.500 line:100% position:50% align:middle
and say "ref="... Now previously in
React, you would just say something like

00:05:55.500 --> 00:06:00.710 line:100% position:50% align:middle
"storeInput", and then it would be
available to this actual component.

00:06:00.710 --> 00:06:05.610 line:100% position:50% align:middle
React is phasing out what's called "string
refs" in favor of something called "function

00:06:05.610 --> 00:06:10.560 line:100% position:50% align:middle
refs." They're a little more complicated to
understand, but as far as I can understand

00:06:10.560 --> 00:06:14.120 line:100% position:50% align:middle
they're going to allow us to do a lot more
and it's going to make React faster.

00:06:14.120 --> 00:06:18.070 line:100% position:50% align:middle
So we're not going to use a string ref
that maybe you have seen before.

00:06:18.070 --> 00:06:23.820 line:100% position:50% align:middle
We're going to open and close a set of
curly brackets here and we will run a

00:06:23.820 --> 00:06:27.620 line:100% position:50% align:middle
function. So we're going to run a little
arrow function here, this is ES6 arrow

00:06:27.620 --> 00:06:30.000 line:100% position:50% align:middle
functions. I've got some other videos on
that.

00:06:30.000 --> 00:06:35.670 line:100% position:50% align:middle
We'll say input arrow function, and then when
this actually runs,

00:06:35.670 --> 00:06:40.660 line:100% position:50% align:middle
we're going to run this little function
and say "this.storeInput = input".

00:06:40.660 --> 00:06:46.910 line:100% position:50% align:middle
Now, what is that actually doing? What
that's going to do is when this input is

00:06:46.910 --> 00:06:52.920 line:100% position:50% align:middle
rendered onto the page, it's going to put
a reference to this input right here,

00:06:52.920 --> 00:07:01.600 line:100% position:50% align:middle
on the class itself. If I give that a save
and we go to our React dev tools here.

00:07:01.600 --> 00:07:07.430 line:100% position:50% align:middle
We open up and we look for our StorePicker
component. Now it's going to be a

00:07:07.430 --> 00:07:12.910 line:100% position:50% align:middle
couple levels nested deep because the
router does all kinds of matching here.

00:07:12.910 --> 00:07:16.520 line:100% position:50% align:middle
If you find that that's a little bit much
to keep going through,

00:07:16.520 --> 00:07:21.710 line:100% position:50% align:middle
you can always search for the StorePicker
component and that's going to make it a

00:07:21.710 --> 00:07:26.620 line:100% position:50% align:middle
little bit easier to find it. Now, this is
the StorePicker right here and if I were

00:07:26.620 --> 00:07:32.940 line:100% position:50% align:middle
then to go to my console here
and type '$r', that's the 

00:07:32.940 --> 00:07:37.240 line:100% position:50% align:middle
StorePicker, and actually 'storeInput'...
Aha...look what's happening.

00:07:37.240 --> 00:07:41.590 line:100% position:50% align:middle
So the component, which is $r,
StorePicker.storeInput,

00:07:41.590 --> 00:07:46.650 line:100% position:50% align:middle
I've referenced that actual input there,
and you can see that when I hover over top

00:07:46.650 --> 00:07:51.090 line:100% position:50% align:middle
of it, that is the reference to the
element in the DOM. So it's a little bit

00:07:51.090 --> 00:07:55.430 line:100% position:50% align:middle
of a roundabout, rather than selecting it,
and you might think that that's a little

00:07:55.430 --> 00:07:58.930 line:100% position:50% align:middle
bit of extra work, rather than just trying
to select it directly,

00:07:58.930 --> 00:08:04.230 line:100% position:50% align:middle
but that's the way that
we like to do it inside of React. If you

00:08:04.230 --> 00:08:10.900 line:100% position:50% align:middle
just...but that's the way that we do it
in React. There's are a lot of things in

00:08:10.900 --> 00:08:15.450 line:100% position:50% align:middle
React where I go, hmm that seems a little
bit weird, but I just trust the people

00:08:15.450 --> 00:08:18.320 line:100% position:50% align:middle
that are building React and they really
know what they're doing.

00:08:18.320 --> 00:08:24.590 line:100% position:50% align:middle
We've got this '$r.storeInput,'
now we go back into goToStore() and

00:08:24.590 --> 00:08:29.190 line:100% position:50% align:middle
instead of...we're not going to use jQuery
right here...we just want to...let's just

00:08:29.190 --> 00:08:32.430 line:100% position:50% align:middle
say "console.log(this.storeInput);" to

00:08:32.430 --> 00:08:41.560 line:100% position:50% align:middle
see if we can actually access that input
when we click it. Visit store.

00:08:41.560 --> 00:08:48.590 line:100% position:50% align:middle
"Uncaught typeError. Cannot read property
'storeInput' of null."

00:08:48.590 --> 00:08:53.260 line:100% position:50% align:middle
So it can't read storeInput of 'this'. So
what is 'this'? I thought that 'this' meant

00:08:53.260 --> 00:09:01.070 line:100% position:50% align:middle
the StorePicker. Let's go and see. Let's
see console log what actually 'this' is.

00:09:01.070 --> 00:09:07.300 line:100% position:50% align:middle
'this' is null. So what's going on here,
where here I can use 'Store'...

00:09:07.300 --> 00:09:11.350 line:100% position:50% align:middle
I can reference the StorePicker. But if I
create my own method,

00:09:11.350 --> 00:09:16.750 line:100% position:50% align:middle
'this' is not equal to StorePicker? How do
I get 'this'? How do I reference the StorePicker

00:09:16.750 --> 00:09:22.980 line:100% position:50% align:middle
component inside of another method?
Let's take a look at how to do that.

00:09:22.980 --> 00:09:27.620 line:100% position:50% align:middle
There's a couple ways we can make 'this'
equal to the actual StorePicker

00:09:27.620 --> 00:09:31.270 line:100% position:50% align:middle
component. You might not
have ever done React before,

00:09:31.270 --> 00:09:34.240 line:100% position:50% align:middle
and that's fine. This is "React For
Beginners." If you have done React before,

00:09:34.240 --> 00:09:39.610 line:100% position:50% align:middle
you might remember that there was this
thing called 'React.createClass()',

00:09:39.610 --> 00:09:43.840 line:100% position:50% align:middle
where you would create a class this way,
and you would obviously have your render()

00:09:43.840 --> 00:09:49.200 line:100% position:50% align:middle
method on it where you would return like a
paragraph tag. However,

00:09:49.200 --> 00:09:57.200 line:100% position:50% align:middle
if you had additional methods, like goToStore(),
you could just console log 'this'

00:09:57.200 --> 00:10:00.800 line:100% position:50% align:middle
inside of it, no problem, and 'this' would
always equal

00:10:00.800 --> 00:10:10.500 line:100% position:50% align:middle
the actual component itself. So why, when
we switch to this "class StorePicker

00:10:10.500 --> 00:10:16.570 line:100% position:50% align:middle
extends...", this is an ES6 class, how come it
changed? The reason is because when React

00:10:16.570 --> 00:10:20.730 line:100% position:50% align:middle
switched to ES6 classes, and you can still
use this syntax, however they're

00:10:20.730 --> 00:10:24.400 line:100% position:50% align:middle
recommending against it. They're probably
eventually going to deprecate it in favor

00:10:24.400 --> 00:10:30.490 line:100% position:50% align:middle
of just using the 'extend' syntax. It
doesn't implicitly bind

00:10:30.490 --> 00:10:35.600 line:100% position:50% align:middle
all of the methods on our component to the
actual component itself.

00:10:35.600 --> 00:10:41.190 line:100% position:50% align:middle
If we want 'this' to equal StorePicker,
there's a couple ways which we actually

00:10:41.190 --> 00:10:46.180 line:100% position:50% align:middle
need to go ahead and change it. One way
that we could do it is that we could use

00:10:46.180 --> 00:10:51.640 line:100% position:50% align:middle
the constructor of the component. And the
constructor of a component is sort of like

00:10:51.640 --> 00:10:57.000 line:100% position:50% align:middle
the thing that happens...the bunch of code
that runs when that component is created.

00:10:57.000 --> 00:11:02.070 line:100% position:50% align:middle
So we would simply type "constructor".
You have to run super() in it,

00:11:02.070 --> 00:11:05.570 line:100% position:50% align:middle
and what super() does is it will first
create a React component and then we

00:11:05.570 --> 00:11:12.040 line:100% position:50% align:middle
extend the StorePicker component by
adding on our own stuff. The base one is

00:11:12.040 --> 00:11:15.580 line:100% position:50% align:middle
the React component, and that's got some
stuff like render() on all of them,

00:11:15.580 --> 00:11:18.910 line:100% position:50% align:middle
and then we create our own StorePicker
component which adds our custom stuff,

00:11:18.910 --> 00:11:23.140 line:100% position:50% align:middle
like goToStore(). That's what super() does,
it runs React component first and then

00:11:23.140 --> 00:11:26.770 line:100% position:50% align:middle
allows us to sprinkle on our extra stuff
onto StorePicker. So that's what super()

00:11:26.770 --> 00:11:35.110 line:100% position:50% align:middle
does. Then super() allows us to say
"this.goToStore = this.goToStore.bind(this);"

00:11:35.110 --> 00:11:41.960 line:100% position:50% align:middle
What!? So "this, this, this..."
"bind"... what's going on here?

00:11:41.960 --> 00:11:47.020 line:100% position:50% align:middle
Essentially what this does is it looks for
the goToStore() method and it just sets

00:11:47.020 --> 00:11:53.340 line:100% position:50% align:middle
itself to it's own self, but then binds it
to 'this'. Which inside of the constructor,

00:11:53.340 --> 00:11:58.470 line:100% position:50% align:middle
'this' is equal to the StorePicker
component. That's a little bit weird,

00:11:58.470 --> 00:12:02.890 line:100% position:50% align:middle
because you have to do that for
absolutely every single one. I'll do that

00:12:02.890 --> 00:12:08.360 line:100% position:50% align:middle
for methods that I need to use more than
once, but I want to show you another way

00:12:08.360 --> 00:12:12.640 line:100% position:50% align:middle
to go ahead and do it as well. They both
have their benefits and their cons.

00:12:12.640 --> 00:12:16.140 line:100% position:50% align:middle
And a comment that I'm not going to
actually use the constructor in this case.

00:12:16.140 --> 00:12:20.180 line:100% position:50% align:middle
I will in a couple of other videos, and
you can make your own decisions on that.

00:12:20.180 --> 00:12:25.920 line:100% position:50% align:middle
The other way you can do it is you can go
to your onSubmit() and you could say

00:12:25.920 --> 00:12:33.440 line:100% position:50% align:middle
"this.goToStore.bind", pass it 'this' and
what that will do is it will bind the

00:12:33.440 --> 00:12:37.920 line:100% position:50% align:middle
goToStore() method to 'this'. The exact same
thing we did here. So let's see if that

00:12:37.920 --> 00:12:43.350 line:100% position:50% align:middle
works here. "You changed the URL" and we
console log 'this' is equal to the

00:12:43.350 --> 00:12:47.960 line:100% position:50% align:middle
StorePicker. That's another way to do it. Then
just another syntactically different way

00:12:47.960 --> 00:12:52.470 line:100% position:50% align:middle
to do it is you can give it an arrow
function here, which is "this.goToStore()".

00:12:52.470 --> 00:12:59.370 line:100% position:50% align:middle
And you need to pass it that actual
event. This is a little bit cleaner

00:12:59.370 --> 00:13:02.350 line:100% position:50% align:middle
in my opinion.
The one downside to doing it this way is

00:13:02.350 --> 00:13:07.060 line:100% position:50% align:middle
if I were to render seven or eight
StorePickers on a page, or maybe this was a

00:13:07.060 --> 00:13:10.930 line:100% position:50% align:middle
different component where I would have
multiple on a page, what would then...what

00:13:10.930 --> 00:13:16.120 line:100% position:50% align:middle
we're actually doing right here is we're
creating a individual function for every

00:13:16.120 --> 00:13:19.950 line:100% position:50% align:middle
single component that gets rendered.
Rather than when you do it this way,

00:13:19.950 --> 00:13:24.370 line:100% position:50% align:middle
it's all referring to this single goToStore().
We're doing a little bit of

00:13:24.370 --> 00:13:28.090 line:100% position:50% align:middle
duplication here. If we were to have
multiple ones on a page, whether that

00:13:28.090 --> 00:13:30.210 line:100% position:50% align:middle
affects your performance or not is really
up to you.

00:13:30.210 --> 00:13:36.970 line:100% position:50% align:middle
This will only reference one of them.
Knowing that, we have 'this' and then we

00:13:36.970 --> 00:13:41.000 line:100% position:50% align:middle
will say ".storeInput". Why can we say
"this.storeInput"?

00:13:41.000 --> 00:13:48.020 line:100% position:50% align:middle
Because we have done it with a ref. Let's
see where we're at now.

00:13:48.020 --> 00:13:52.220 line:100% position:50% align:middle
Good. Now that's the actual input here.
It's just a DOM element,

00:13:52.220 --> 00:13:55.740 line:100% position:50% align:middle
so we can just say ".value". Because at
that point it's just an element.

00:13:55.740 --> 00:14:02.283 line:100% position:50% align:middle
We can work with it. Visit store. Here we
go: "plain-elegant-potatoes". Every scene

00:14:02.283 --> 00:14:07.388 line:100% position:50% align:middle
that we do it. Now what we need to
do in the next video is figure out how do

00:14:07.388 --> 00:14:12.410 line:100% position:50% align:middle
we use React router to do this last one.
Which is change from '/' to

00:14:12.410 --> 00:14:16.000 line:100% position:50% align:middle
'/store/plain-elegant-potatoes'.
