WEBVTT

00:00:00.793 --> 00:00:02.861 line:100% position:50% align:middle
♪ [música] ♪

00:00:07.280 --> 00:00:10.240 line:100% position:50% align:middle
Ok, vamos falar um pouco sobre
o que são componentes. Caso

00:00:10.240 --> 00:00:14.260 line:100% position:50% align:middle
você esteja vindo de qualquer outro framework
e está tentando entender,

00:00:14.260 --> 00:00:19.800 line:100% position:50% align:middle
"Onde estão os modelos, ou os módulos, ou
as views ou as diretivas?" ou qualquer

00:00:19.800 --> 00:00:23.510 line:100% position:50% align:middle
uma dessas coisas, você precisa colocar
isso de lado. Porque React é um pouco

00:00:23.510 --> 00:00:28.720 line:100% position:50% align:middle
diferente, já que tudo em React é
o que chamamos de componente.

00:00:28.720 --> 00:00:32.660 line:100% position:50% align:middle
Vou mostrar alguns
exemplos do que seria um componente e

00:00:32.660 --> 00:00:35.720 line:100% position:50% align:middle
então vamos construir alguns
nossos.

00:00:35.720 --> 00:00:40.220 line:100% position:50% align:middle
Então, o que é um componente? Um componente é
pedaço reusável do seu site.

00:00:40.220 --> 00:00:45.882 line:100% position:50% align:middle
Se você pensar nas suas páginas HTML
construídas com um monte de tags, h1 e

00:00:45.882 --> 00:00:51.918 line:100% position:50% align:middle
div e article, React meio que leva
isso a um passo a frente e nos permite

00:00:51.918 --> 00:00:57.770 line:100% position:50% align:middle
construir nossas próprias tags ou componentes.
Você pode dar a essas tags um monte

00:00:57.770 --> 00:01:01.200 line:100% position:50% align:middle
de informação. Se olharmos
esse aplicação aqui,

00:01:01.200 --> 00:01:05.530 line:100% position:50% align:middle
temos isto, onde temos a figura do
peixe, temos que adicionar um botão "order",

00:01:05.530 --> 00:01:08.510 line:100% position:50% align:middle
quando clicarmos no botão, ele o adicionará
à conta.

00:01:08.510 --> 00:01:13.390 line:100% position:50% align:middle
Temos o título, o preço,
está bem formatado e temos uma

00:01:13.390 --> 00:01:18.260 line:100% position:50% align:middle
descrição. Agora, toda vez que
quiser renderizar isto,

00:01:18.260 --> 00:01:21.390 line:100% position:50% align:middle
eu não preciso copiar e colar este código.
Digamos que eu quisesse em outro lugar

00:01:21.390 --> 00:01:25.530 line:100% position:50% align:middle
da minha aplicação, não preciso copiar
e colar o código, é só renderizar

00:01:25.530 --> 00:01:30.610 line:100% position:50% align:middle
o componente que chamamos de "fish". Agora,
vamos dar uma olhada no React

00:01:30.610 --> 00:01:34.840 line:100% position:50% align:middle
DevTools. Se você não encontrar React DevTools,
assegure-se que você o tem instalado.

00:01:34.840 --> 00:01:38.650 line:100% position:50% align:middle
E em segundo lugar, assegure-se que você está
numa página que tem o React carregado.

00:01:38.650 --> 00:01:44.300 line:100% position:50% align:middle
Facebook, Instagram são bons exemplos disto,
tanto quanto estaa aplicação de demonstração

00:01:44.300 --> 00:01:48.400 line:100% position:50% align:middle
Catch of the Day. O que eu gosto de fazer
para realmente pegar o componente que quero

00:01:48.400 --> 00:01:52.550 line:100% position:50% align:middle
é usar o Inspecionar Elemento.
Clique com botão direito e então inspecionar ou use seu atalho.

00:01:52.550 --> 00:01:58.270 line:100% position:50% align:middle
Vá em alguma parte deste HTML. e
este é o HTML que React dá para

00:01:58.270 --> 00:02:02.820 line:100% position:50% align:middle
você, este é o HTML que ele renderiza para
você. Mas se você for até o React

00:02:02.820 --> 00:02:08.520 line:100% position:50% align:middle
DevTools, você verá que o que ele realmente
te traz como React realmente o vê,

00:02:08.520 --> 00:02:12.050 line:100% position:50% align:middle
e você pode ver todas estas coisas, elas
são como tags personalizadas mas elas são apenas

00:02:12.050 --> 00:02:17.100 line:100% position:50% align:middle
componentes dentro do React. E você pode ver
que eu tenho todos esses componentes "fish"

00:02:17.100 --> 00:02:22.320 line:100% position:50% align:middle
diferentes. Agora, toda vez que eu quiser
renderizar esse display aqui,

00:02:22.320 --> 00:02:26.570 line:100% position:50% align:middle
tanto quanto trazer a funcionalidade
que ele tem, eu preciso

00:02:26.570 --> 00:02:30.090 line:100% position:50% align:middle
apenas renderizar uma tag "fish" e passar
qualquer informação que ela precise.

00:02:30.090 --> 00:02:33.700 line:100% position:50% align:middle
E caso ele precise de um monte de
informação sobre, tipo,

00:02:33.700 --> 00:02:38.670 line:100% position:50% align:middle
"Qual é a imagem? Qual é a descrição?
Etc., etc." Esse é o componente "fish",

00:02:38.670 --> 00:02:42.560 line:100% position:50% align:middle
e ele é componente pequeno, limpo e bom.
Um dos benefícios disto,

00:02:42.560 --> 00:02:46.800 line:100% position:50% align:middle
além de outras coisas, é que se você tem
outra pessoa no seu time e você quer que ela

00:02:46.800 --> 00:02:50.940 line:100% position:50% align:middle
trabalhe apenas num componente específico, você pode
liberar o acesso ao arquivo daquele componente

00:02:50.940 --> 00:02:55.050 line:100% position:50% align:middle
e ela não precisará trabalhar
na aplicação inteira.

00:02:55.050 --> 00:02:58.650 line:100% position:50% align:middle
Isso é realmente útil quando você está
trabalhando com designers que precisam fazer o mock up

00:02:58.650 --> 00:03:02.630 line:100% position:50% align:middle
do HTML e do CSS e eles não
precisam escrever um monte de

00:03:02.630 --> 00:03:07.540 line:100% position:50% align:middle
Javascript. Então, eu tenho meu componente "fish",
e eu tenho esse componente "header" aqui.

00:03:07.540 --> 00:03:10.950 line:100% position:50% align:middle
Você vê que eu passo uma coisa
com o que é chamado "props".

00:03:10.950 --> 00:03:15.650 line:100% position:50% align:middle
Vamos aprender tudo sobre props,
state e context. Também temos um componente

00:03:15.650 --> 00:03:19.610 line:100% position:50% align:middle
"order" aqui. E temos o componente
"inventory". Se você abrí-los,

00:03:19.610 --> 00:03:23.550 line:100% position:50% align:middle
verá alguns outros
componentes aqui dentro. Vamos usar

00:03:23.550 --> 00:03:29.150 line:100% position:50% align:middle
componentes de animação para animar os
valores nele. Toda vez que você tiver

00:03:29.150 --> 00:03:33.760 line:100% position:50% align:middle
um pedaço da sua aplicação, geralmente
é bom construí-lo no seu próprio

00:03:33.760 --> 00:03:37.990 line:100% position:50% align:middle
componente. Isso nos permitirá ter
código reusável,

00:03:37.990 --> 00:03:43.220 line:100% position:50% align:middle
e usar React DevTools para ver onde
cada coisa está. Agora,

00:03:43.220 --> 00:03:47.570 line:100% position:50% align:middle
se eu clicar no componente app, é
tipo o componente pai,

00:03:47.570 --> 00:03:50.980 line:100% position:50% align:middle
e existe um monte de outras coisas
para roteamento, você verá que temos o que

00:03:50.980 --> 00:03:55.720 line:100% position:50% align:middle
temos esta coisa chamada "state". E se você
abrir, estes são todos os "fish"

00:03:55.720 --> 00:04:00.040 line:100% position:50% align:middle
que temos listados no nosso documento aqui.
E você pode ver que esses dados de "fish",

00:04:00.040 --> 00:04:05.990 line:100% position:50% align:middle
se abrirmos o primeiro "fish", teremos Pacific
Halibut. E é o que está referenciado aqui,

00:04:05.990 --> 00:04:10.360 line:100% position:50% align:middle
está referenciado na ordem,
tanto quanto está referenciado no "inventory".

00:04:10.360 --> 00:04:14.550 line:100% position:50% align:middle
Se você fosse mudar este state,
e vamos aprender tudo sobre como

00:04:14.550 --> 00:04:21.310 line:100% position:50% align:middle
fazer isso para algo como, "Yummy Fish,"
e apertar enter, você verá que em todos os lugares

00:04:21.310 --> 00:04:26.820 line:100% position:50% align:middle
desse state, em todos os lugares que esses dados são
referenciados, mudaram para Yummy Fish.

00:04:26.820 --> 00:04:31.850 line:100% position:50% align:middle
Está atualizado aqui, aqui e aqui. E
isso é meio que o grande poder por trás do

00:04:31.850 --> 00:04:36.030 line:100% position:50% align:middle
React, vamos construir esses
componentes, como o componente "fish" e um

00:04:36.030 --> 00:04:41.350 line:100% position:50% align:middle
componente "order" e um componente
"inventory", e eles vão pegar informações que

00:04:41.350 --> 00:04:45.990 line:100% position:50% align:middle
teremos que passar. E toda vez
que essas informações mudarem, não haverá problema

00:04:45.990 --> 00:04:49.430 line:100% position:50% align:middle
porque o React vai saber onde
ele deve atualizá-las.

00:04:49.430 --> 00:04:53.410 line:100% position:50% align:middle
Eu gosto bastante de ir nos sites de outras
pessoas que usam React e ver como

00:04:53.410 --> 00:04:59.050 line:100% position:50% align:middle
eles fizeram. O player
desta série de vídeos é também

00:04:59.050 --> 00:05:03.310 line:100% position:50% align:middle
construído com React. Se eu fosse
inspecionar um desses links de vídeos

00:05:03.310 --> 00:05:06.720 line:100% position:50% align:middle
aqui... e esses títulos podem estar um
pouco diferentes para você porque eu estou

00:05:06.720 --> 00:05:10.870 line:100% position:50% align:middle
os regravando agora. E go até
o React DevTools,

00:05:10.870 --> 00:05:16.060 line:100% position:50% align:middle
você verá que eu criei um
monte de componentes. Estes são os componentes do

00:05:16.060 --> 00:05:21.160 line:100% position:50% align:middle
vídeo que eu fiz, e cada componente "video"
renderizará o

00:05:21.160 --> 00:05:25.830 line:100% position:50% align:middle
número, o vídeo, o título, o
timestamp formatadinho legal

00:05:25.830 --> 00:05:29.620 line:100% position:50% align:middle
e todo o comportamento
Javascript que ele precisa para funcionar.

00:05:29.620 --> 00:05:33.120 line:100% position:50% align:middle
Se eu clicar em um, ele vai atualizar
o player, vai atualizar a barra de URL

00:05:33.120 --> 00:05:36.460 line:100% position:50% align:middle
e o roteamento vai entrar em ação.
Se eu clicar em um deles,

00:05:36.460 --> 00:05:40.120 line:100% position:50% align:middle
você verá que existem algumas "props",
existe um "context", veremos

00:05:40.120 --> 00:05:45.150 line:100% position:50% align:middle
"state" em alguns outros. Se eu fosse
até o viewer,

00:05:45.150 --> 00:05:51.470 line:100% position:50% align:middle
veja o meu "state", você vê que eu tenho esse
array de vídeos que são todos os 17 videos,

00:05:51.470 --> 00:05:56.790 line:100% position:50% align:middle
ou quantos vídeos seu pacote atual
tem. Você pode ver que eu posso mudar

00:05:56.790 --> 00:06:02.690 line:100% position:50% align:middle
isto para "Wes é legal." E, de novo,
onde quer que esta informação tenha sido

00:06:02.690 --> 00:06:07.960 line:100% position:50% align:middle
referenciada, tipo aqui e
aqui, React irá atualizá-la

00:06:07.960 --> 00:06:13.540 line:100% position:50% align:middle
em qualquer lugar da página. Não precisamos selecionar
o elemento no DOM element e atualizá-lo,

00:06:13.540 --> 00:06:18.260 line:100% position:50% align:middle
porque fomos e
criamos esses componentes "video" antes

00:06:18.260 --> 00:06:22.050 line:100% position:50% align:middle
e vamos ver como podemos infundir
esta informação direto no componente.

00:06:22.050 --> 00:06:25.620 line:100% position:50% align:middle
É divertido ir em sites
diferentes. Instagram e Facebook são

00:06:25.620 --> 00:06:29.940 line:100% position:50% align:middle
os dois maiores usuários de React. Eles que
inicialmente criaram o React,

00:06:29.940 --> 00:06:35.010 line:100% position:50% align:middle
e você pode ver o que eles fizeram
aqui. Eles são um pouquinho mais

00:06:35.010 --> 00:06:40.620 line:100% position:50% align:middle
complicados no Facebook e no Instagram,
porque eles não usam componentes com

00:06:40.620 --> 00:06:44.760 line:100% position:50% align:middle
bons nomes. Eles têm, tipo,
"i" e "r" mas você pode ver que "r" é

00:06:44.760 --> 00:06:49.350 line:100% position:50% align:middle
algo como a fonte da
imagem, quantos likes estão associados a ela,

00:06:49.350 --> 00:06:54.040 line:100% position:50% align:middle
a legenda. E talvez "i" aqui seja
todos os comentários.

00:06:54.040 --> 00:06:57.790 line:100% position:50% align:middle
Vamos ver. Sim, eles têm um array
de todos os comentários aqui,

00:06:57.790 --> 00:07:02.560 line:100% position:50% align:middle
então eu poderia ir aqui e mudar isto para
"cool" e irá atualizar o comentário

00:07:02.560 --> 00:07:06.640 line:100% position:50% align:middle
aqui. É divertido brincar
com todos os componentes

00:07:06.640 --> 00:07:10.940 line:100% position:50% align:middle
diferentes aqui. Componentes são pedaços
de código reusáveis que vamos usar na

00:07:10.940 --> 00:07:15.620 line:100% position:50% align:middle
nossa aplicação uma e outra vez, e
também anexar dados a um evento,

00:07:15.620 --> 00:07:19.240 line:100% position:50% align:middle
listeners, como clique, hover,
scroll e todo o resto.

00:07:19.240 --> 00:07:22.670 line:100% position:50% align:middle
Vamos então começar a construir
alguns dos nossos componentes que poderíamos

00:07:22.670 --> 00:07:25.000 line:100% position:50% align:middle
construir em nossa app Catch of the Day.
