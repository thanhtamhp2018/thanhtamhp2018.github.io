WEBVTT

00:00:00.000 --> 00:00:03.000 line:100% position:50% align:middle
♪ [music] ♪

00:00:06.200 --> 00:00:10.160 line:100% position:50% align:middle
One of the things that I really like about
React is that it forces you to write well

00:00:10.160 --> 00:00:13.640 line:100% position:50% align:middle
structured code, and I feel like as I've
learned React over the years I've become a

00:00:13.640 --> 00:00:18.290 line:100% position:50% align:middle
much better and stronger JavaScript
developer. Sometimes things in React seem

00:00:18.290 --> 00:00:21.235 line:100% position:50% align:middle
a little bit harder than they actually
have to be, and that's just because React

00:00:21.235 --> 00:00:25.545 line:100% position:50% align:middle
is forcing us to write really well
structured and modular components.

00:00:25.545 --> 00:00:28.917 line:100% position:50% align:middle
One of the things that we can use to make
these modular components is something

00:00:28.917 --> 00:00:32.490 line:100% position:50% align:middle
called PropTypes. Now we're making
these components here and eventually

00:00:32.490 --> 00:00:35.070 line:100% position:50% align:middle
what's going to happen is that
you're going to want to share them.

00:00:35.070 --> 00:00:38.720 line:100% position:50% align:middle
You might want to share them with your
coworkers that are working on the same

00:00:38.720 --> 00:00:41.580 line:100% position:50% align:middle
application as you or just share them at
open source on the internet,

00:00:41.580 --> 00:00:45.940 line:100% position:50% align:middle
and one thing that we can use is called
PropTypes which will allow us to validate

00:00:45.940 --> 00:00:51.350 line:100% position:50% align:middle
the data that is coming into our actual
components. So what that means is,

00:00:51.350 --> 00:00:58.390 line:100% position:50% align:middle
I've got this header here and this header
relies on us taking in a Prop of tagline,

00:00:58.390 --> 00:01:02.700 line:100% position:50% align:middle
and we need to know that that is a string.
Now we built it so we know that, that is a

00:01:02.700 --> 00:01:06.370 line:100% position:50% align:middle
string, however, let's say I built this
actual component and then someone else on

00:01:06.370 --> 00:01:11.200 line:100% position:50% align:middle
my team was using the component. They
need to know what needs to be passed to

00:01:11.200 --> 00:01:16.052 line:100% position:50% align:middle
that specific component, whether it's a
string of tagline, or a number, or

00:01:16.052 --> 00:01:21.172 line:100% position:50% align:middle
function, or an object or you get the
point, right? So what I want to then do is

00:01:21.172 --> 00:01:24.670 line:100% position:50% align:middle
we're going to make our components a
little bit more resilient by going through

00:01:24.670 --> 00:01:29.120 line:100% position:50% align:middle
everything, all the components that we've
built, and adding PropTypes to them.

00:01:29.120 --> 00:01:32.620 line:100% position:50% align:middle
So I'm just going to take a look at an
example, I just pulled up a random react

00:01:32.620 --> 00:01:36.000 line:100% position:50% align:middle
component here, this one's called react-
tabs, and you can see that they have

00:01:36.000 --> 00:01:40.496 line:100% position:50% align:middle
PropTypes here which are, they have
children, which could be an array, an

00:01:40.496 --> 00:01:44.875 line:100% position:50% align:middle
object or a string. They have a class name
so they're expecting someone to pass a

00:01:44.875 --> 00:01:49.611 line:100% position:50% align:middle
class name of string, if they pass an idea
it should be a string, if it's selected it

00:01:49.611 --> 00:01:55.157 line:100% position:50% align:middle
has to be true or false, nothing else. A
style could be an object and the tabId

00:01:55.157 --> 00:01:59.435 line:100% position:50% align:middle
needs to be a string. So those are all the
things that this component needs to

00:01:59.435 --> 00:02:05.621 line:100% position:50% align:middle
actually run and it needs to either be
exactly the one that they pass or one of

00:02:05.621 --> 00:02:10.827 line:100% position:50% align:middle
an array, an object or a string. So that
just helps me as a user use this component

00:02:10.827 --> 00:02:14.199 line:100% position:50% align:middle
because it's going to yell at me
if I don't use this properly.

00:02:14.199 --> 00:02:18.088 line:100% position:50% align:middle
So let's close this down, let's
open up our header js and do a

00:02:18.088 --> 00:02:23.200 line:100% position:50% align:middle
really simple one here. We've got our
header and we want to go below where we

00:02:23.200 --> 00:02:27.563 line:100% position:50% align:middle
actually declare this component here and
we're going to say Header.PropTypes equals

00:02:27.563 --> 00:02:31.788 line:100% position:50% align:middle
and it's going to be an object. Now we
just need to specify every single Prop

00:02:31.788 --> 00:02:36.011 line:100% position:50% align:middle
that is used in that component. In this
case, it's just tagline, and then we

00:02:36.011 --> 00:02:41.500 line:100% position:50% align:middle
specify it is going to be a
React.PropTypes, now that's capital P and

00:02:41.500 --> 00:02:43.818 line:100% position:50% align:middle
then .string. Now there's a
whole bunch of different

00:02:43.818 --> 00:02:48.450 line:100% position:50% align:middle
types of PropTypes and we can take a look
at them one sec. If you look at the Prop

00:02:48.450 --> 00:02:53.059 line:100% position:50% align:middle
validation on the React documentation, you
can see that there's examples of all

00:02:53.059 --> 00:02:56.660 line:100% position:50% align:middle
different kinds of PropTypes that you're
going to be going through as well as the

00:02:56.660 --> 00:03:00.960 line:100% position:50% align:middle
ability to do custom Prop validation if
you have something that's very specific to

00:03:00.960 --> 00:03:05.600 line:100% position:50% align:middle
your needs. So here, we have React.
PropTypes.string. If I give that a save

00:03:05.600 --> 00:03:12.100 line:100% position:50% align:middle
and this thing refreshes, nothing happens.
However, watch if I were then to go into

00:03:12.100 --> 00:03:17.780 line:100% position:50% align:middle
our app.js where we use header, and let's
say instead of passing it fresh seafood

00:03:17.780 --> 00:03:25.000 line:100% position:50% align:middle
market, but we pass it a number of 500. It
then yells at us and says, "Failed

00:03:25.000 --> 00:03:29.694 line:100% position:50% align:middle
PropType, invalid Prop tagline of number
supplied to header expected string,"

00:03:29.694 --> 00:03:32.895 line:100% position:50% align:middle
so these warnings are only shown in
development if you push this to

00:03:32.895 --> 00:03:36.607 line:100% position:50% align:middle
production it's not going to show you any
of this. But as you're developing,

00:03:36.607 --> 00:03:41.044 line:100% position:50% align:middle
if I was a user, if I was someone else on
the team I would immediately know that oh,

00:03:41.044 --> 00:03:45.879 line:100% position:50% align:middle
I didn't pass in the right thing or I
didn't pass in it at all.

00:03:45.879 --> 00:03:51.043 line:100% position:50% align:middle
So what if I pass nothing at all, I just
do header? Nothing happens but, like, you

00:03:51.043 --> 00:03:54.085 line:100% position:50% align:middle
can see we have a bit of a broken
component, so what we could do is we go

00:03:54.085 --> 00:04:01.595 line:100% position:50% align:middle
back to our header and we add .isrequired
to the end, and then it's going to yell

00:04:01.595 --> 00:04:06.005 line:100% position:50% align:middle
at us for not "Failed PropType,
required PropType tagline was not

00:04:06.005 --> 00:04:09.845 line:100% position:50% align:middle
specified." So in this case, we didn't
specify anything, in this case, we

00:04:09.845 --> 00:04:14.700 line:100% position:50% align:middle
specified a number so we need to go all
the way back to when we did a string and

00:04:14.700 --> 00:04:19.573 line:100% position:50% align:middle
then nothing happens. So sort of the rule
of thumb that you should do is anytime

00:04:19.573 --> 00:04:24.442 line:100% position:50% align:middle
that you pass a Prop into a component and
you use it, just take a second, pause and

00:04:24.442 --> 00:04:28.368 line:100% position:50% align:middle
declare that actual PropType at the time
of doing it. So now, we're going to go

00:04:28.368 --> 00:04:32.360 line:100% position:50% align:middle
through the rest of
them and re-declare them,

00:04:32.360 --> 00:04:38.932 line:100% position:50% align:middle
so let's go to our components folder here
and let's start with our AddFishForm and

00:04:38.932 --> 00:04:44.264 line:100% position:50% align:middle
we'll see where did we use Props and we
passed in the addFish anywhere else we

00:04:44.264 --> 00:04:50.153 line:100% position:50% align:middle
used Props? Nope, that's it, so we'll go
to the bottom here say AddFishForm.

00:04:50.153 --> 00:04:56.867 line:100% position:50% align:middle
PropTypes equals addFish and we say
React.PropTypes, again make sure

00:04:56.867 --> 00:04:58.958 line:100% position:50% align:middle
it's a capital P dot in.

00:04:58.958 --> 00:05:03.370 line:100% position:50% align:middle
what type is it? Well it gets passed in as
a function and if we go to the React

00:05:03.370 --> 00:05:08.620 line:100% position:50% align:middle
docs here, you'll notice that boolean and
function are not spelled as boolean and

00:05:08.620 --> 00:05:12.160 line:100% position:50% align:middle
function I guess because they're reserved
words so we have to say func,

00:05:12.160 --> 00:05:18.860 line:100% position:50% align:middle
which is kind of fun to say, and then is
required. Press save and it should then

00:05:18.860 --> 00:05:24.880 line:100% position:50% align:middle
work if I change this to object, it's
going to break on us because it is

00:05:24.880 --> 00:05:30.050 line:100% position:50% align:middle
actually passing a function when we asked
for an object so it should be func.

00:05:30.050 --> 00:05:35.940 line:100% position:50% align:middle
Let's go to the next one, app and let's
look where did we use Props.

00:05:35.940 --> 00:05:49.040 line:100% position:50% align:middle
We used it for params and just for params,
good. Go to the bottom here say App.

00:05:49.040 --> 00:05:58.153 line:100% position:50% align:middle
PropTypes equals params react.PropTypes,
capital P dot...so we're passing in an

00:05:58.153 --> 00:06:02.975 line:100% position:50% align:middle
object here, so just say the word object
and is required. Good now, let's just go

00:06:02.975 --> 00:06:07.028 line:100% position:50% align:middle
through all of them right now if you sort
of get the point what I would encourage

00:06:07.028 --> 00:06:11.900 line:100% position:50% align:middle
you to do is try to do them yourself,
otherwise if you want to come along for

00:06:11.900 --> 00:06:15.671 line:100% position:50% align:middle
the ride with me we can. So I'm going to
open up fish here, I'm going to look,

00:06:15.671 --> 00:06:21.560 line:100% position:50% align:middle
we have details, index, add to
order and it's just those three,

00:06:21.560 --> 00:06:34.860 line:100% position:50% align:middle
good. So fish.PropTypes I'm going to make
them all function right now and then we'll

00:06:34.860 --> 00:06:43.360 line:100% position:50% align:middle
go through each one so details is an
object, index is a number and add to order

00:06:43.360 --> 00:06:48.036 line:100% position:50% align:middle
is a function, good. Let's see
if it yells at us for anything,

00:06:48.036 --> 00:06:54.428 line:100% position:50% align:middle
oh good! Invalid Prop index, oh it should
be not a... We passed it in as a string I

00:06:54.428 --> 00:07:01.830 line:100% position:50% align:middle
guess not as a number. Good, next one,
header already did it. Inventory,

00:07:01.830 --> 00:07:14.460 line:100% position:50% align:middle
Props so fishes, updateFish,
removeFish and I think that's it.

00:07:14.460 --> 00:07:20.360 line:100% position:50% align:middle
Oh, addFish and loadSamples. Good
lots of them here. Inventory.

00:07:20.360 --> 00:07:32.550 line:100% position:50% align:middle
PropTypes. So fishes is going to be an
object, updateFish is going to be a

00:07:32.550 --> 00:07:37.158 line:100% position:50% align:middle
function, removeFish is a function,
addFish is a function and loadSamples is a

00:07:37.158 --> 00:07:41.042 line:100% position:50% align:middle
function, good. See if it yells at us,
nope we're in good shape.

00:07:41.042 --> 00:07:52.391 line:100% position:50% align:middle
Not found, doesn't take in any Props,
good. Order, fishes, order,

00:07:52.391 --> 00:07:59.176 line:100% position:50% align:middle
removeFromOrder, fishes, Order
fishes order, got that one.

00:07:59.176 --> 00:08:02.632 line:100% position:50% align:middle
One cool thing you can do
sometimes is, I'll just grab them all,

00:08:02.632 --> 00:08:07.349 line:100% position:50% align:middle
anywhere that it says Props I'll just grab
whatever's after it and then I will create

00:08:07.349 --> 00:08:15.315 line:100% position:50% align:middle
my order.PropTypes here. And then I will
paste them all in and sometimes there's

00:08:15.315 --> 00:08:19.559 line:100% position:50% align:middle
going to be duplicates here, so I'll just
use sublime text and I'll type in unique,

00:08:19.559 --> 00:08:24.337 line:100% position:50% align:middle
if you can spell unique it'd be great. I
can't see because there's a microphone in

00:08:24.337 --> 00:08:28.860 line:100% position:50% align:middle
front of my keyboard, here we go, unique
and that will just make them unique right,

00:08:28.860 --> 00:08:41.856 line:100% position:50% align:middle
and then we'll grab all of them React.
PropTypes.func.isRequired so fishes in

00:08:41.856 --> 00:08:47.061 line:100% position:50% align:middle
order is going to be an object and
removeFromOrder is going to be a function.

00:08:47.061 --> 00:08:56.140 line:100% position:50% align:middle
Good last one, star picker, you notice
that we already have context types and

00:08:56.140 --> 00:08:59.725 line:100% position:50% align:middle
remember we use PropTypes here, that's
just because we want it to surface the

00:08:59.725 --> 00:09:04.333 line:100% position:50% align:middle
react-router that would allow us to use
transition too, but it doesn't look like

00:09:04.333 --> 00:09:08.220 line:100% position:50% align:middle
we used Props in this component at
all. Good, so just doing that is going to

00:09:08.220 --> 00:09:13.090 line:100% position:50% align:middle
make your component much more resilient
and stop us from either passing the wrong

00:09:13.090 --> 00:09:17.133 line:100% position:50% align:middle
type of data and getting errors,
or not passing the data at all.
