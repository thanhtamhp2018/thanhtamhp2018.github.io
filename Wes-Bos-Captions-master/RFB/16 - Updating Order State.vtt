WEBVTT

00:00:00.000 --> 00:00:03.000 line:100% position:50% align:middle
♪ [music] ♪

00:00:07.154 --> 00:00:09.026 line:100% position:50% align:middle
All right, so we've got this
"Add To Order" button,

00:00:09.026 --> 00:00:11.680 line:100% position:50% align:middle
however, when I click it nothing
happens and then also,

00:00:11.680 --> 00:00:14.760 line:100% position:50% align:middle
if we take a look at the answer here, if I
change it from "Fresh!"

00:00:14.760 --> 00:00:17.610 line:100% position:50% align:middle
to "Sold Out!" you see that that "Add To
Order" button actually just,

00:00:17.610 --> 00:00:21.340 line:100% position:50% align:middle
like, moves itself, animates itself, and
overlays the entire thing.

00:00:21.340 --> 00:00:25.040 line:100% position:50% align:middle
So let's actually build that "Add To Order"
button first and then when you click it

00:00:25.040 --> 00:00:28.390 line:100% position:50% align:middle
we'll have to build the method that will
add it to our Order component here.

00:00:28.390 --> 00:00:33.890 line:100% position:50% align:middle
So we're going to go down to this 'button'
right here and the actual text inside of

00:00:33.890 --> 00:00:37.490 line:100% position:50% align:middle
that button can't just be "Add To Order"
because it changes from "Add To Order" to

00:00:37.490 --> 00:00:40.800 line:100% position:50% align:middle
"Sold Out!" so that needs to be a little bit
dynamic. We're going to go right below

00:00:40.800 --> 00:00:46.820 line:100% position:50% align:middle
this "const { details } = props;" and we need
to make a variable called "isAvailable".

00:00:46.820 --> 00:00:53.080 line:100% position:50% align:middle
And that's going to check if the
'details.status' is equal to "available".

00:00:53.080 --> 00:00:56.040 line:100% position:50% align:middle
Right? And that's going to be a Boolean,
either true or false.

00:00:56.040 --> 00:00:58.740 line:100% position:50% align:middle
And then we need to make another variable
that is the 'buttonText'.

00:00:58.740 --> 00:01:08.180 line:100% position:50% align:middle
And if the 'buttonText' is "available" it's
going to be "Add To Order". Otherwise,

00:01:08.180 --> 00:01:13.850 line:100% position:50% align:middle
it's going to be "Sold Out!" So let's go
ahead and take that 'buttonText' and we'll

00:01:13.850 --> 00:01:18.690 line:100% position:50% align:middle
add it down to this 'Add To Order'. And
we'll just pop the variable 'buttonText' in

00:01:18.690 --> 00:01:22.460 line:100% position:50% align:middle
there. We got an error here. Let's see
what we're dealing with.

00:01:22.460 --> 00:01:27.820 line:100% position:50% align:middle
"SyntaxError: Unexpected token... isAvailable...
Sold Out!" ...that's because I don't know

00:01:27.820 --> 00:01:32.090 line:100% position:50% align:middle
how to do a ternary operator. That's ":"
there. Probably yelling at me for that.

00:01:32.090 --> 00:01:34.430 line:100% position:50% align:middle
All right, load a sample fishes, good.

00:01:34.430 --> 00:01:39.290 line:100% position:50% align:middle
Look what happened. Sea Scallops by
default is SOLD OUT, so the text will say

00:01:39.290 --> 00:01:43.350 line:100% position:50% align:middle
"Sold Out!" and the rest of them are "Add To Order." And if I change one of them,

00:01:43.350 --> 00:01:50.380 line:100% position:50% align:middle
I go to my App component here and I find
the fishes, I open up 'fish1' and I change

00:01:50.380 --> 00:01:56.670 line:100% position:50% align:middle
it from "available" to "unavailable". When
I change that state Pacific Halibut

00:01:56.670 --> 00:02:00.090 line:100% position:50% align:middle
changes to "Sold Out!". Good. Last thing we
need to do is we actually need to make

00:02:00.090 --> 00:02:03.950 line:100% position:50% align:middle
this button disabled when it's sold out
because you shouldn't be able to click it.

00:02:03.950 --> 00:02:11.910 line:100% position:50% align:middle
So what we can do is go down to this
'button' here and we'll say "disabled =

00:02:11.910 --> 00:02:16.700 line:100% position:50% align:middle
{!isAvailable}". So if the order is
not available it will be disabled and

00:02:16.700 --> 00:02:20.430 line:100% position:50% align:middle
React will just sort of toggle the
'disabled' attribute on and off and what

00:02:20.430 --> 00:02:24.460 line:100% position:50% align:middle
that will do is it will first make it
unclickable and then second I've used some

00:02:24.460 --> 00:02:30.940 line:100% position:50% align:middle
CSS here to say when the button is
disabled then change the color to that,

00:02:30.940 --> 00:02:35.630 line:100% position:50% align:middle
change the cursor to "not-allowed", as well
as I've used some animation to go in

00:02:35.630 --> 00:02:36.410 line:100% position:50% align:middle
between. Cool.

00:02:36.410 --> 00:02:39.810 line:100% position:50% align:middle
So we can't change it on the inventory
here just yet, we haven't built that part

00:02:39.810 --> 00:02:44.720 line:100% position:50% align:middle
out, but we do the same thing that we did
in our React dev tools by looking for our

00:02:44.720 --> 00:02:50.150 line:100% position:50% align:middle
App component, going to 'fish1' and changing
it to "unavailable" should animate itself

00:02:50.150 --> 00:02:53.610 line:100% position:50% align:middle
from "Add To Order" up to "Sold Out!" Good.

00:02:53.610 --> 00:02:59.590 line:100% position:50% align:middle
Now, next up we need to actually handle
the adding to order. Now where would we

00:02:59.590 --> 00:03:05.480 line:100% position:50% align:middle
create a method to add to order? Well we
already created a method of adding a fish

00:03:05.480 --> 00:03:11.790 line:100% position:50% align:middle
in our App component and we're also going
to be doing that for our add to order.

00:03:11.790 --> 00:03:21.590 line:100% position:50% align:middle
So let's go right down below our loadSamples()
here and make an addToOrder() method

00:03:21.590 --> 00:03:25.090 line:100% position:50% align:middle
and that's going to take in a key. Just so
I can show you what we're gunning for

00:03:25.090 --> 00:03:30.000 line:100% position:50% align:middle
here, let me take a look at the actual
example here. So our order state is simply

00:03:30.000 --> 00:03:35.090 line:100% position:50% align:middle
going to look little bit something like
this, where if we have a fish,

00:03:35.090 --> 00:03:38.460 line:100% position:50% align:middle
it's just counting the number of pounds.
So 'fish1' we have 1 pound,

00:03:38.460 --> 00:03:44.040 line:100% position:50% align:middle
'fish2' we have 4 pounds. And as I add
more of 'fish2', it's just going to keep

00:03:44.040 --> 00:03:48.150 line:100% position:50% align:middle
updating the number of pounds. And then
our JSX and everything is going to be

00:03:48.150 --> 00:03:52.710 line:100% position:50% align:middle
calculating how much we owe. If I add a
new one like King Crab that we haven't

00:03:52.710 --> 00:03:58.020 line:100% position:50% align:middle
added yet, it will just add it as 1. So
that's what our addToOrder() will do and

00:03:58.020 --> 00:04:01.990 line:100% position:50% align:middle
that takes in a key. We're just using the
key of the object fish1,

00:04:01.990 --> 00:04:06.950 line:100% position:50% align:middle
fish2, fish5, as our way to keep track of
that.

00:04:06.950 --> 00:04:14.350 line:100% position:50% align:middle
So, what we need to do is first take a
copy of our state. So we’ll say "const

00:04:14.350 --> 00:04:23.180 line:100% position:50% align:middle
order =", and we'll take a copy of it,
"...this.state.order". And again that is

00:04:23.180 --> 00:04:28.210 line:100% position:50% align:middle
an "object spread," which is essentially
taking a copy of the existing order state,

00:04:28.210 --> 00:04:35.850 line:100% position:50% align:middle
and then we will update or add the new
number of fish ordered.

00:04:35.850 --> 00:04:41.070 line:100% position:50% align:middle
So we'll say "order[key]" and what is that
doing? Like let's say we were buying

00:04:41.070 --> 00:04:46.890 line:100% position:50% align:middle
fish1. We'd say "order.fish1 =", but we
can't say "fish1" because we don't know

00:04:46.890 --> 00:04:50.900 line:100% position:50% align:middle
which fish it's going to be. So it's going
to be 'key'. And it's equal to,

00:04:50.900 --> 00:04:57.480 line:100% position:50% align:middle
now this is a little bit tricky, we either
want to do "order[key] + 1". And what that

00:04:57.480 --> 00:05:02.140 line:100% position:50% align:middle
will do is it will check if we actually
have an existing order for that and add

00:05:02.140 --> 00:05:06.780 line:100% position:50% align:middle
1 to it or it'll just be 1. And what
that does is, let's take a look at an

00:05:06.780 --> 00:05:10.710 line:100% position:50% align:middle
example here, 'fish1' I already have one, so
when I add it, it's just going to

00:05:10.710 --> 00:05:14.940 line:100% position:50% align:middle
increment it by 1. However, when I add
something new, like Jumbo Prawns,

00:05:14.940 --> 00:05:18.620 line:100% position:50% align:middle
it doesn't have anything to add it to
because I've never ordered 'fish9' here so

00:05:18.620 --> 00:05:22.720 line:100% position:50% align:middle
it will just add it to 1. That's a
little trick you can do with the or

00:05:22.720 --> 00:05:23.920 line:100% position:50% align:middle
operator here.

00:05:23.920 --> 00:05:31.040 line:100% position:50% align:middle
And then finally we need to just update
our state. So it's "this.setState" it's

00:05:31.040 --> 00:05:36.730 line:100% position:50% align:middle
going to be "order" and that is going to be
order. Or we can simply just pass "order"

00:05:36.730 --> 00:05:41.060 line:100% position:50% align:middle
like we did with fishes. Good. Now we just
need to go back up to our constructor

00:05:41.060 --> 00:05:46.980 line:100% position:50% align:middle
here, and just as we did with loadSamples()
and addToFish(), we need to addToOrder() so

00:05:46.980 --> 00:05:53.880 line:100% position:50% align:middle
it is then bound. Okay, now let's see if
we can do that ourselves.

00:05:53.880 --> 00:06:00.150 line:100% position:50% align:middle
Open up our App component. And open up
your order state. Now if I go to my

00:06:00.150 --> 00:06:11.820 line:100% position:50% align:middle
Console real quick and "$r.addToOrder" we
want to add "fish-1". Now go back to React.

00:06:11.820 --> 00:06:16.950 line:100% position:50% align:middle
'fish-1' is at 1. If I were to run it a
couple more times, it's incrementing the

00:06:16.950 --> 00:06:22.370 line:100% position:50% align:middle
number of fish. But we don't exactly want
to do that, we want to actually do it when

00:06:22.370 --> 00:06:27.860 line:100% position:50% align:middle
someone clicks the "Add To Order" button. So
again, how do we get this method?

00:06:27.860 --> 00:06:31.940 line:100% position:50% align:middle
You're probably starting to see a trend
here. How do we get this addToOrder() method

00:06:31.940 --> 00:06:37.220 line:100% position:50% align:middle
down to our other component? Well we pass
it via 'props'. addToOrder() method needs to be

00:06:37.220 --> 00:06:39.340 line:100% position:50% align:middle
accessible via fish, so we'll pass it
down.

00:06:39.340 --> 00:06:45.190 line:100% position:50% align:middle
So let's say "addToOrder = {this.addToOrder}".
Now when we see some of our fish being

00:06:45.190 --> 00:06:57.030 line:100% position:50% align:middle
loaded, let's take a look, you see being
passed down via Props is the addToOrder

00:06:57.030 --> 00:07:02.510 line:100% position:50% align:middle
function. Then we need to go into our
Fish. And when someone clicks on this

00:07:02.510 --> 00:07:07.200 line:100% position:50% align:middle
button right here, which is the "Add To
Order" button, we need to run

00:07:07.200 --> 00:07:15.470 line:100% position:50% align:middle
"this.props.addToOrder". So we'll say
"onClick=this.props.addToOrder". Now,

00:07:15.470 --> 00:07:23.710 line:100% position:50% align:middle
couple things here. First of all, how do
you pass an actual argument to addToOrder?

00:07:23.710 --> 00:07:26.970 line:100% position:50% align:middle
Well you can't just do this. You might
think okay I'll just do that and I'll pass

00:07:26.970 --> 00:07:31.950 line:100% position:50% align:middle
it something like "fish-1". But that will
actually run on page load and we don't

00:07:31.950 --> 00:07:36.680 line:100% position:50% align:middle
want it to happen on page load, we want it
to happen when someone clicks the button.

00:07:36.680 --> 00:07:39.530 line:100% position:50% align:middle
So the way that we can do that is, there's
a couple ways here,

00:07:39.530 --> 00:07:45.060 line:100% position:50% align:middle
we could say
"this.props.addToOrder.bind(null)" and you

00:07:45.060 --> 00:07:49.320 line:100% position:50% align:middle
want to pass it whatever key you want,
like "fish-1". But that's...

00:07:49.320 --> 00:07:53.030 line:100% position:50% align:middle
I feel like I've lost you. That's a bit
tough. So what I prefer to do,

00:07:53.030 --> 00:07:57.520 line:100% position:50% align:middle
is we'll do an arrow function in line,
which will allow us to have this much

00:07:57.520 --> 00:08:02.670 line:100% position:50% align:middle
nicer syntax here where we pass it
something like "fish-1". Okay so that makes

00:08:02.670 --> 00:08:06.620 line:100% position:50% align:middle
sense. And let's just hardcode "fish-1" here
for a second and see if that works.

00:08:06.620 --> 00:08:11.960 line:100% position:50% align:middle
So, we'll open up our App component, we'll
open up our order, load some fish,

00:08:11.960 --> 00:08:17.720 line:100% position:50% align:middle
and then when I add...look it, add add add
add add, it's adding fish-1 every single

00:08:17.720 --> 00:08:25.580 line:100% position:50% align:middle
time. But how do I make that part dynamic?
How does this fish.js know what its key

00:08:25.580 --> 00:08:31.880 line:100% position:50% align:middle
is? And the way that we sort of do that
is, we need to be able to access the key

00:08:31.880 --> 00:08:35.790 line:100% position:50% align:middle
itself. Let's look at one of our Fishes.
See how we have this 'key' value here?

00:08:35.790 --> 00:08:40.990 line:100% position:50% align:middle
However, you cannot access the key inside
of a component. Like,

00:08:40.990 --> 00:08:46.200 line:100% position:50% align:middle
look, we passed it down right here,
however, you can't access it when we're in

00:08:46.200 --> 00:08:50.610 line:100% position:50% align:middle
here. So if you need to access it, you
need to explicitly pass it down.

00:08:50.610 --> 00:08:53.500 line:100% position:50% align:middle
The key? That's not for you. You shouldn't
ever touch the key.

00:08:53.500 --> 00:08:57.390 line:100% position:50% align:middle
It's not going to let you. So if you need
that value to be passed down,

00:08:57.390 --> 00:09:00.000 line:100% position:50% align:middle
you need to pass it down yourself via any
Prop that you make up.

00:09:00.000 --> 00:09:04.090 line:100% position:50% align:middle
So I'm going to make one up called "index".
And I'm going to pass it down as a key.

00:09:04.090 --> 00:09:06.450 line:100% position:50% align:middle
So it might look a little weird because
you're passing down the same thing.

00:09:06.450 --> 00:09:10.430 line:100% position:50% align:middle
But 'index' is for you, 'key' is for React to
work with it.

00:09:10.430 --> 00:09:16.710 line:100% position:50% align:middle
And if I refresh this and I take a look at
my Fish, you see look,

00:09:16.710 --> 00:09:21.590 line:100% position:50% align:middle
okay now the 'index' is being passed down. I
should be able to just go in here and

00:09:21.590 --> 00:09:29.020 line:100% position:50% align:middle
replace the string of "fish-1" with the
actual "this.props.index".

00:09:29.020 --> 00:09:35.690 line:100% position:50% align:middle
Or even better, I could just pass an "index"
and we'll go back up here and make an

00:09:35.690 --> 00:09:40.150 line:100% position:50% align:middle
'index' variable that will pull it off of
'this.props'. So that's the same thing this,

00:09:40.150 --> 00:09:43.140 line:100% position:50% align:middle
if you're a little bit confused by that,
it's the same thing as doing this: "const

00:09:43.140 --> 00:09:51.760 line:100% position:50% align:middle
details = this.props.details" and "const
index = this.props.index". So this is ES6

00:09:51.760 --> 00:09:56.610 line:100% position:50% align:middle
destructuring, I've got many videos on
that, and that just saves us from writing

00:09:56.610 --> 00:10:00.240 line:100% position:50% align:middle
two extra lines. Or if you've got, like,
six or seven things you need to pull off

00:10:00.240 --> 00:10:07.470 line:100% position:50% align:middle
Props you can always do it in one line. So
let's give it one last shot here.

00:10:07.470 --> 00:10:12.150 line:100% position:50% align:middle
Open up our App, open up our Fishes, and
our order. Load them in.

00:10:12.150 --> 00:10:18.272 line:100% position:50% align:middle
State fish is good. We got our order here.
Now when I add two...one, one, one.

00:10:18.272 --> 00:10:22.000 line:100% position:50% align:middle
Good. Now let's look at
how we can display our order.
