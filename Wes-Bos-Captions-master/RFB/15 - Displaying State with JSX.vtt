WEBVTT

00:00:00.216 --> 00:00:04.226 line:100% position:50% align:middle
â™ª [music]  â™ª

00:00:07.107 --> 00:00:10.562 line:100% position:50% align:middle
We have some data being loaded into our
state. You can see we've got fish1

00:00:10.562 --> 00:00:14.910 line:100% position:50% align:middle
through 9 here. We need to actually
figure out how to display it right under

00:00:14.910 --> 00:00:19.200 line:100% position:50% align:middle
the header here. I've opened up my app.js
component and I'm going to give myself

00:00:19.200 --> 00:00:25.413 line:100% position:50% align:middle
an unordered list with class of "list-of-fishes".
Inside of that, we want to have

00:00:25.413 --> 00:00:29.000 line:100% position:50% align:middle
like a list item for every single fish
that we have.

00:00:29.000 --> 00:00:31.884 line:100% position:50% align:middle
However, earlier I told you
it's probably not a great idea

00:00:31.884 --> 00:00:34.830 line:100% position:50% align:middle
just to render it out
inside of this render() function,

00:00:34.830 --> 00:00:39.850 line:100% position:50% align:middle
because what happens if I want to use
that fish somewhere else in this

00:00:39.850 --> 00:00:43.730 line:100% position:50% align:middle
application? What we need to do...and
hopefully, you're screaming at the scream

00:00:43.730 --> 00:00:48.420 line:100% position:50% align:middle
right now, and you're saying, "Make a
component, Wes! Make a component." Good.

00:00:48.420 --> 00:00:51.300 line:100% position:50% align:middle
We're doing it. We're going to go to our
components and we're going to make a new

00:00:51.300 --> 00:01:00.080 line:100% position:50% align:middle
one called fish.js, we're going to
import React from 'react', and we're going

00:01:00.080 --> 00:01:09.880 line:100% position:50% align:middle
to create a component, then we'll export
it. Now, what do we need in here?

00:01:09.880 --> 00:01:14.610 line:100% position:50% align:middle
We need a render() function, and inside of
that, we'll have a list item,

00:01:14.610 --> 00:01:22.580 line:100% position:50% align:middle
which has a className of "menu-fish". And
inside of that, let's just put an emoji

00:01:22.580 --> 00:01:30.080 line:100% position:50% align:middle
fish, right? Whatever one you wish. Now,
we'll go into our app here and we will

00:01:30.080 --> 00:01:36.210 line:100% position:50% align:middle
import that emoji fish from...just take
the Inventory one and I'll call it "Fish".

00:01:36.210 --> 00:01:42.540 line:100% position:50% align:middle
And instead of actually directly rendering
out a list item, we're going to render a

00:01:42.540 --> 00:01:46.700 line:100% position:50% align:middle
'Fish' tag, right? It even looks like a
fish. Look at this little tail on it.

00:01:46.700 --> 00:01:52.990 line:100% position:50% align:middle
We got one error. Let's work through that.
Let's see what's going on.

00:01:52.990 --> 00:01:58.650 line:100% position:50% align:middle
"Invariant Violation: Fish.render(): A valid
React element (or null) must be returned."

00:01:58.650 --> 00:02:02.890 line:100% position:50% align:middle
What did we do here? Oh, we didn't return
this, right? So you can't just put some

00:02:02.890 --> 00:02:08.960 line:100% position:50% align:middle
JSX inside of your render() function, you
need to return the actual JSX that we have

00:02:08.960 --> 00:02:12.339 line:100% position:50% align:middle
here. That should do it for us.

00:02:13.419 --> 00:02:19.660 line:100% position:50% align:middle
I've got one Fish component being rendered
out, but I need to loop over every single

00:02:19.660 --> 00:02:25.230 line:100% position:50% align:middle
element in my state. And JSX has no logic
built into it. There's no loops,

00:02:25.230 --> 00:02:30.320 line:100% position:50% align:middle
or "if" statements, or anything like that in
JSX. And the way that you do that,

00:02:30.320 --> 00:02:35.040 line:100% position:50% align:middle
if you want loops or logic inside of JSX,
is that you just use regular JavaScript.

00:02:35.040 --> 00:02:40.960 line:100% position:50% align:middle
So what you do is you simply just use
curly brackets, and that tells JavaScript

00:02:40.960 --> 00:02:44.270 line:100% position:50% align:middle
or tells React that we're going to be
running a little bit of JavaScript here.

00:02:44.270 --> 00:02:49.160 line:100% position:50% align:middle
And then we will loop on every single one.
Now, normally, the way that you loop over

00:02:49.160 --> 00:02:52.690 line:100% position:50% align:middle
something in React is you use .map().
However, 'map' is for an array,

00:02:52.690 --> 00:02:58.540 line:100% position:50% align:middle
and our state is an object, so one thing
that we can do is use 'Object.keys()'.

00:02:58.540 --> 00:03:02.030 line:100% position:50% align:middle
And if you've never used 'Object.keys()',
let me show you what it's going to do real

00:03:02.030 --> 00:03:07.380 line:100% position:50% align:middle
quick. Let's find our App component here,
and we'll go to our console,

00:03:07.380 --> 00:03:12.620 line:100% position:50% align:middle
so I've clicked it. When we go to our
console, "$r" will give us our actual App,

00:03:12.620 --> 00:03:18.150 line:100% position:50% align:middle
"$r.state" will give us our state,
"$r.state.fishes" will give us the actual

00:03:18.150 --> 00:03:22.840 line:100% position:50% align:middle
object. However, I can't really...let's
load some sample fishes in there and run

00:03:22.840 --> 00:03:27.176 line:100% position:50% align:middle
that again. There we go. I can't really
loop over that, however, if I wrapped that

00:03:27.176 --> 00:03:31.310 line:100% position:50% align:middle
whole thing in 'Object.keys()',
it actually returns to me an array of

00:03:31.310 --> 00:03:34.620 line:100% position:50% align:middle
all of the keys or all of the property
names from that object.

00:03:34.620 --> 00:03:40.900 line:100% position:50% align:middle
And that is something that I can then loop
over. I'll say, "Object.keys()"...

00:03:40.900 --> 00:03:46.750 line:100% position:50% align:middle
"this.state.fishes", and then I can map
over it. And if you've never used 'map'

00:03:46.750 --> 00:03:52.190 line:100% position:50% align:middle
before, it's just a way to loop over an
array of stuff and return a second array.

00:03:52.190 --> 00:03:57.940 line:100% position:50% align:middle
I'm going to call .map() on it and put
this on its own line if you like that.

00:03:57.940 --> 00:04:03.390 line:100% position:50% align:middle
And for each of them, we're going to have
a fish, we'll call it a "key", and we're

00:04:03.390 --> 00:04:08.310 line:100% position:50% align:middle
going to render out a 'Fish' tag right here.
Now, that's going to be very simple,

00:04:08.310 --> 00:04:11.550 line:100% position:50% align:middle
we're going to have to add some more stuff
to this 'Fish' tag here,

00:04:11.550 --> 00:04:15.800 line:100% position:50% align:middle
but simply, by returning...let's put this
is doing this arrow function.

00:04:15.800 --> 00:04:21.914 line:100% position:50% align:middle
By returning a Fish component, it should
then display it on the actual page for us.

00:04:22.642 --> 00:04:26.260 line:100% position:50% align:middle
We're going to load some sample fishes in,
and as soon as I click it...aha!

00:04:26.260 --> 00:04:28.300 line:100% position:50% align:middle
We get a whole bunch of fishes.

00:04:28.300 --> 00:04:32.220 line:100% position:50% align:middle
Now, a couple of things here, we get a
warning, "Each child in an array or

00:04:32.220 --> 00:04:36.820 line:100% position:50% align:middle
iterator should have a unique 'key' prop."
The problem here is that,

00:04:36.820 --> 00:04:42.010 line:100% position:50% align:middle
if we look at our React dev tools here,
open it up, you see that we've got all

00:04:42.010 --> 00:04:47.650 line:100% position:50% align:middle
these Fish components. And while that
works, React doesn't like you to just have

00:04:47.650 --> 00:04:51.620 line:100% position:50% align:middle
a whole bunch of Fish components that look
exactly the same, because it doesn't know

00:04:51.620 --> 00:04:56.570 line:100% position:50% align:middle
how to update them. Let's say, fish4
were to get updated, it needs to know that

00:04:56.570 --> 00:05:00.000 line:100% position:50% align:middle
it should only update fish4, not have to
look at the rest of them.

00:05:00.000 --> 00:05:04.730 line:100% position:50% align:middle
What we'll need to do here is we just set
a key, and the key can be absolutely

00:05:04.730 --> 00:05:09.770 line:100% position:50% align:middle
anything as long as you know that it is
unique. And what is unique?

00:05:09.770 --> 00:05:14.960 line:100% position:50% align:middle
We can actually, just use the key here.
Let's say "key={key}",

00:05:14.960 --> 00:05:19.400 line:100% position:50% align:middle
and let's see how it does for us, load
some sample fishes in, good,

00:05:19.400 --> 00:05:21.980 line:100% position:50% align:middle
and it's no longer yelling at us.

00:05:21.980 --> 00:05:26.940 line:100% position:50% align:middle
And then the other thing that we need to
do is we need to get,

00:05:26.940 --> 00:05:31.350 line:100% position:50% align:middle
not all of the fishes, but we need to get
this one fish, whatever fish that we

00:05:31.350 --> 00:05:36.910 line:100% position:50% align:middle
currently have, we need to pass all of the
data about the fish to our 'Fish'.

00:05:36.910 --> 00:05:39.330 line:100% position:50% align:middle
And we're going to pass that via the
'details' props. We'll say,

00:05:39.330 --> 00:05:46.930 line:100% position:50% align:middle
"details={this.state.fishes}",
that's all of the fishes.

00:05:46.930 --> 00:05:50.730 line:100% position:50% align:middle
But we just want to pass one, so we'll use
square bracket, "key",

00:05:50.730 --> 00:05:57.523 line:100% position:50% align:middle
and that will be the equivalent of saying,
".fish1", or ".fish2", etc.,  etc.

00:05:57.523 --> 00:06:01.160 line:100% position:50% align:middle
But by using 'key',
it will go through it.

00:06:01.160 --> 00:06:06.890 line:100% position:50% align:middle
Now, if we load in some sample fishes
here, and open our React dev tools,

00:06:06.890 --> 00:06:10.220 line:100% position:50% align:middle
and we'd look for all of our Fish
components. Aha! Let's just click on any

00:06:10.220 --> 00:06:17.250 line:100% position:50% align:middle
one of them. You should now see, they have
a key of "fish4" and then the 'props' that got

00:06:17.250 --> 00:06:21.590 line:100% position:50% align:middle
passed down have one prop, it's a detail,
and inside that, we have description,

00:06:21.590 --> 00:06:25.880 line:100% position:50% align:middle
image, name, price, and status
of that fish. Good!

00:06:25.880 --> 00:06:30.180 line:100% position:50% align:middle
What we just did, let's do a quick review.
If you want to loop over something,

00:06:30.180 --> 00:06:35.020 line:100% position:50% align:middle
you first need an array, so that's what we
did, 'Object.keys()'. And then you can loop

00:06:35.020 --> 00:06:39.260 line:100% position:50% align:middle
over something in the standard way to loop
over something. In React,

00:06:39.260 --> 00:06:43.150 line:100% position:50% align:middle
just use .map() because it will take in
something, like a list of keys,

00:06:43.150 --> 00:06:48.140 line:100% position:50% align:middle
and return something else, like a list of
Fish components that have been set-up with

00:06:48.140 --> 00:06:50.230 line:100% position:50% align:middle
the proper 'key' in details.

00:06:50.230 --> 00:06:55.350 line:100% position:50% align:middle
We can go into our fish.js and just start
writing some actual HTML.

00:06:55.350 --> 00:06:59.867 line:100% position:50% align:middle
If I want to put a variable inside of JSX
here, I simply just need to use curly

00:06:59.867 --> 00:07:04.578 line:100% position:50% align:middle
brackets. And if I say
"this.props.details.name",

00:07:04.578 --> 00:07:07.451 line:100% position:50% align:middle
that should give us the name
for each of the fish.

00:07:07.788 --> 00:07:14.810 line:100% position:50% align:middle
Load it in. Aha! Good! "Pacific Halibut,
"Lobster, Sea Scallops." So we are able to

00:07:14.810 --> 00:07:19.440 line:100% position:50% align:middle
just then template it out. Let's actually
start with an 'img' tag,

00:07:19.440 --> 00:07:23.950 line:100% position:50% align:middle
and inside the 'img', if you want the
source, it's going to be

00:07:23.950 --> 00:07:28.350 line:100% position:50% align:middle
"this.props.details.image", you might
think, "Okay, I've got the quotes." And

00:07:28.350 --> 00:07:34.080 line:100% position:50% align:middle
then I say, "this.props.details.image". But
watch what what happens when I actually do

00:07:34.080 --> 00:07:40.390 line:100% position:50% align:middle
that. It gives a whole bunch of broken
'img's. And if I were to inspect one of

00:07:40.390 --> 00:07:43.820 line:100% position:50% align:middle
them, "this.props", it actually says,
"{this.props.details.image}",

00:07:43.820 --> 00:07:52.590 line:100% position:50% align:middle
so that's not really what we want. If you
are setting an attribute of a tag to be

00:07:52.590 --> 00:07:57.500 line:100% position:50% align:middle
something that is a variable, you do not
need the actual quotes there.

00:07:57.500 --> 00:08:02.470 line:100% position:50% align:middle
That will give it...and same with the 'alt',
if I want to put the actual name of the

00:08:02.470 --> 00:08:06.840 line:100% position:50% align:middle
fish in the 'alt', we just do
"alt={this.props.details.name}",

00:08:06.840 --> 00:08:11.500 line:100% position:50% align:middle
load it in. Look at this, we've got all of
our fish pictures showing up,

00:08:11.500 --> 00:08:15.870 line:100% position:50% align:middle
and if I were to just Inspect Element on
one of these, you'll see the 'alt' is equal

00:08:15.870 --> 00:08:16.770 line:100% position:50% align:middle
to the name. Now, typing
"this.props.details", every single time,

00:08:20.519 --> 00:08:22.690 line:100% position:50% align:middle
that gets a little bit overwhelming.

00:08:22.690 --> 00:08:27.920 line:100% position:50% align:middle
What you can do is, before you return, you
can do a little bit of data massaging.

00:08:27.920 --> 00:08:35.650 line:100% position:50% align:middle
I like to do a little bit something like
this. I'll say, "const details =

00:08:35.650 --> 00:08:42.390 line:100% position:50% align:middle
"this.props.details", or you can even use
ES6 destructuring if you've seen one of my

00:08:42.390 --> 00:08:47.530 line:100% position:50% align:middle
destructuring videos before. You can say
"{ details } =  this.props;". Now,

00:08:47.530 --> 00:08:52.950 line:100% position:50% align:middle
we just have this 'details' variable and we
can cut out the "this.props" from each of

00:08:52.950 --> 00:08:57.350 line:100% position:50% align:middle
them, makes it a little bit cleaner to do,
something like that.

00:08:57.350 --> 00:09:04.050 line:100% position:50% align:middle
Let's work through the rest of them. We'll
say 'h3' tag, className of "fish-name",

00:09:04.050 --> 00:09:10.790 line:100% position:50% align:middle
inside of that, we want to have
"{details.name}", and we want a 'span' with a

00:09:10.790 --> 00:09:17.580 line:100% position:50% align:middle
class of "price", and that is going to
have our "{details.price}" inside of it.

00:09:17.580 --> 00:09:23.291 line:100% position:50% align:middle
You need a paragraph with the
"details.description", and then we need a

00:09:23.291 --> 00:09:25.430 line:100% position:50% align:middle
button that we'll add to order.

00:09:25.430 --> 00:09:28.543 line:100% position:50% align:middle
This isn't going to work just yet,
but we're going to give

00:09:28.543 --> 00:09:35.370 line:100% position:50% align:middle
ourselves an empty button that says,
"Add To Order." Good.

00:09:35.370 --> 00:09:39.740 line:100% position:50% align:middle
We've just scaffolded that out. I'm going
to load some sample fishes in, looking

00:09:39.740 --> 00:09:45.240 line:100% position:50% align:middle
pretty good to me. Really just a couple
things here. This formatting is just in

00:09:45.240 --> 00:09:49.390 line:100% position:50% align:middle
cents, I like that whenever I work with
money, I always keep my values in cents,

00:09:49.390 --> 00:09:52.150 line:100% position:50% align:middle
so you're not dealing with decimal places
or anything like that.

00:09:52.150 --> 00:09:56.380 line:100% position:50% align:middle
But we need to display it to our actual
user. You actually need to format it

00:09:56.380 --> 00:10:00.190 line:100% position:50% align:middle
nicely. And you'll remember that we have
this helpers file, and inside that

00:10:00.190 --> 00:10:04.490 line:100% position:50% align:middle
helpers file, there's a formatPrice()
function that does all the heavy-lifting

00:10:04.490 --> 00:10:11.680 line:100% position:50% align:middle
for us, so what we can do is we can just
import that formatPrice() function from our

00:10:11.680 --> 00:10:19.640 line:100% position:50% align:middle
'helpers', and then we can wrap our
"{details.price }" in that function,

00:10:19.640 --> 00:10:22.746 line:100% position:50% align:middle
formatPrice(). Because this is just
JavaScript at the end of the day. There's

00:10:22.746 --> 00:10:26.685 line:100% position:50% align:middle
no special templating here that needs to
happen. Anything in these curly brackets

00:10:26.685 --> 00:10:29.726 line:100% position:50% align:middle
can be run as JavaScript.
Load them in. There we go.

00:10:29.726 --> 00:10:32.000 line:100% position:50% align:middle
Nice formatting being added on here.
