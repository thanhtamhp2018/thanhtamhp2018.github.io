WEBVTT

00:00:06.925 --> 00:00:09.023 line:100% position:50% align:middle
Before, all the components in
React that we've been making

00:00:09.023 --> 00:00:12.247 line:100% position:50% align:middle
have been just static, which means
that we've been hard-coding it.

00:00:12.247 --> 00:00:17.550 line:100% position:50% align:middle
Now, the question is, how do you get data
from one component into another component?

00:00:17.550 --> 00:00:22.020 line:100% position:50% align:middle
And the way that we supply data to a
component is via something called "props."

00:00:22.020 --> 00:00:27.929 line:100% position:50% align:middle
Now if you are used to HTML which I assume
you are, these are just regular HTML tags.

00:00:27.929 --> 00:00:31.742 line:100% position:50% align:middle
And we have these things called "attributes"
like `type` and `class` and `src` and `alt`.

00:00:31.742 --> 00:00:35.097 line:100% position:50% align:middle
And what are these attributes used for?
Well, maybe you have an img tag,

00:00:35.097 --> 00:00:38.676 line:100% position:50% align:middle
you have "dog.jpg," and `alt` will say,
"A Cool Dog."

00:00:38.676 --> 00:00:44.490 line:100% position:50% align:middle
These are just ways that you can supply
additional information to the tag.

00:00:44.490 --> 00:00:50.000 line:100% position:50% align:middle
Now, in React props, it works exactly the
same way. If you want to pass information

00:00:50.000 --> 00:00:56.020 line:100% position:50% align:middle
to a tag, you pass it via a prop. So what
I want to do is go to our App layout right

00:00:56.020 --> 00:01:00.000 line:100% position:50% align:middle
here, and we'll go to our Header tag.
Now this is our Header component,

00:01:00.000 --> 00:01:04.010 line:100% position:50% align:middle
which we've made, and we can simply just
make up as many attributes as we want.

00:01:04.010 --> 00:01:13.120 line:100% position:50% align:middle
So if I say tagline="Fresh Seafood
Market", what we've done there is we've

00:01:13.120 --> 00:01:19.521 line:100% position:50% align:middle
passed a `tagline` prop to that argument.
Now if we go back to our Header.js here,

00:01:19.521 --> 00:01:29.212 line:100% position:50% align:middle
and we were to then scaffold out some of
our HTML here. So we need a header tag

00:01:29.212 --> 00:01:35.561 line:100% position:50% align:middle
of the class of "top." And inside of that,
I want an h1 tag that says

00:01:35.561 --> 00:01:42.564 line:100% position:50% align:middle
"Catch of the Day." Below that, I want h3
with a class of "tagline." And that will

00:01:42.564 --> 00:01:46.067 line:100% position:50% align:middle
just say, "Fill Me In." And then we're
going to come back and make that

00:01:46.067 --> 00:01:49.674 line:100% position:50% align:middle
little bit right here dynamic. Because
maybe you're building an application

00:01:49.674 --> 00:01:53.397 line:100% position:50% align:middle
where the tagline is going to
be different from store to store.

00:01:53.397 --> 00:01:56.278 line:100% position:50% align:middle
I'll give that a save.
It should automatically refresh. Good.

00:01:56.278 --> 00:01:59.118 line:100% position:50% align:middle
Don't worry if that doesn't look exactly
like the answer here. We're going to

00:01:59.118 --> 00:02:02.019 line:100% position:50% align:middle
figure that out in a second.
But you see that we have this little bit

00:02:02.019 --> 00:02:07.750 line:100% position:50% align:middle
of "Fill Me In." Now, what I want you to
do is open your React DevTools here.

00:02:07.750 --> 00:02:14.680 line:100% position:50% align:middle
Find that Header component in React.
And you're going to see that this Header

00:02:14.680 --> 00:02:18.410 line:100% position:50% align:middle
component now has something called "Props."
And there's `tagline`.

00:02:18.410 --> 00:02:22.740 line:100% position:50% align:middle
I just made up `tagline`. I just pulled that
out of thin air. You can name your props

00:02:22.740 --> 00:02:27.165 line:100% position:50% align:middle
whatever you wish to name them.
And then that data will then be made

00:02:27.165 --> 00:02:28.961 line:100% position:50% align:middle
available to the component.

00:02:28.961 --> 00:02:36.509 line:100% position:50% align:middle
So if I had another one like
age="5000" and cool=...

00:02:36.509 --> 00:02:39.591 line:100% position:50% align:middle
like, I wanted to pass like a Boolean,
I would pass it then with a curly, we'll

00:02:39.591 --> 00:02:45.616 line:100% position:50% align:middle
look at that in a second. Then we refresh
here, go back to our React DevTools.

00:02:45.616 --> 00:02:50.335 line:100% position:50% align:middle
Click Header, you now see that we've got a
String, String and a Boolean being passed.

00:02:50.335 --> 00:02:54.157 line:100% position:50% align:middle
So that's how I give this Header component
a little bit more information.

00:02:54.157 --> 00:02:57.954 line:100% position:50% align:middle
That's gonna be really useful when you
need to pass our Fish tag information

00:02:57.954 --> 00:03:02.430 line:100% position:50% align:middle
above that specific fish. Now, if we go
on the other side, which is Header.js,

00:03:02.430 --> 00:03:07.900 line:100% position:50% align:middle
how do we access the information inside of
it? Well, that's done via something called

00:03:07.900 --> 00:03:13.540 line:100% position:50% align:middle
"props." Now, one thing we haven't done yet
is, how do you put variables into JSX?

00:03:13.540 --> 00:03:18.701 line:100% position:50% align:middle
And the way that you do that is you
delete the text here, open up one set

00:03:18.701 --> 00:03:24.266 line:100% position:50% align:middle
of curly brackets. And you say
"this.props.tagline." Now, what is

00:03:24.266 --> 00:03:29.503 line:100% position:50% align:middle
"this.props?" Well, "this" is going to
refer to the actual component.

00:03:29.503 --> 00:03:34.544 line:100% position:50% align:middle
"Props" is going to be an object like this
that's available to us. And then we can

00:03:34.544 --> 00:03:39.225 line:100% position:50% align:middle
simply call ".tagline.cool" or ".age".
Now you give that a save.

00:03:39.225 --> 00:03:43.303 line:100% position:50% align:middle
You'll see, automatically, this "Fresh
Seafood Market" has been updated.

00:03:43.303 --> 00:03:47.062 line:100% position:50% align:middle
So if I could go on into my App here,
I can change this to say anything

00:03:47.062 --> 00:03:51.370 line:100% position:50% align:middle
that I well desire, "Wes Is Cool!"
Give it a save.

00:03:51.370 --> 00:03:54.173 line:100% position:50% align:middle
And it will swap it out
with whatever text.

00:03:54.173 --> 00:04:00.710 line:100% position:50% align:middle
I also want to show you one thing here.
If we go to Header.js and right above our

00:04:00.710 --> 00:04:05.010 line:100% position:50% align:middle
`return`, inside of the render() yet, let's
just `console.log(this)` and see really what

00:04:05.010 --> 00:04:10.360 line:100% position:50% align:middle
we're dealing with here. We've got `this`,
open that up. This is our entire component

00:04:10.360 --> 00:04:13.930 line:100% position:50% align:middle
right here. And then inside of that,
you've got something called "props."

00:04:13.930 --> 00:04:17.236 line:100% position:50% align:middle
And that's just the object that contains
all of the data that you want.

00:04:17.236 --> 00:04:23.150 line:100% position:50% align:middle
And you can use `this.props.whatever`
anywhere inside of this render() method,

00:04:23.150 --> 00:04:26.021 line:100% position:50% align:middle
and it's going to be made
available to you.

00:04:26.021 --> 00:04:30.030 line:100% position:50% align:middle
One other cool thing about React DevTools
is if we go to React here,

00:04:30.030 --> 00:04:34.980 line:100% position:50% align:middle
and you open it up, and you click on one
of your components called Header,

00:04:34.980 --> 00:04:39.015 line:100% position:50% align:middle
you'll see this little thing in the corner
that says "($r in the console)."

00:04:39.015 --> 00:04:42.410 line:100% position:50% align:middle
And what that does is, if you ever need
just play with your React DevTools,

00:04:42.410 --> 00:04:47.160 line:100% position:50% align:middle
you click on the current component that
you want, go back to your console here and

00:04:47.160 --> 00:04:53.180 line:100% position:50% align:middle
just type in "$r" and that is going to be
equal to the current component.

00:04:53.180 --> 00:04:59.300 line:100% position:50% align:middle
You can say "$r.props.tagline" and that
will give you Fresh Seafood Market.

00:04:59.300 --> 00:05:02.980 line:100% position:50% align:middle
So if you're ever trying to just debug
something on the command line here,

00:05:02.980 --> 00:05:09.160 line:100% position:50% align:middle
just select the actual component that you
want and you can type "$r" in the console.

00:05:09.160 --> 00:05:15.270 line:100% position:50% align:middle
That also works in just regular JavaScript
as well. Let's say you wanted to check one

00:05:15.270 --> 00:05:18.410 line:100% position:50% align:middle
of these things right here, like this one.
So I clicked on this one,

00:05:18.410 --> 00:05:23.948 line:100% position:50% align:middle
go to your console and type "$0." That
will give you the current element there.

00:05:23.948 --> 00:05:27.587 line:100% position:50% align:middle
You can do things like classList
and see all the classes on it.

00:05:27.587 --> 00:05:31.515 line:100% position:50% align:middle
So those two are helpful when
you're working in the React DevTools.

00:05:31.515 --> 00:05:35.214 line:100% position:50% align:middle
Now, I just want to go back to our App
and clean this up.

00:05:35.214 --> 00:05:39.527 line:100% position:50% align:middle
I don't need the "cool" and "age,"
I just need tagline is equal to true.

00:05:39.527 --> 00:05:43.816 line:100% position:50% align:middle
And that is how you use props. We're going
to be doing it quite a bit more.

00:05:43.816 --> 00:05:47.130 line:100% position:50% align:middle
And then we're also going to be looking at
something called "propTypes" which will

00:05:47.130 --> 00:05:52.668 line:100% position:50% align:middle
allow you to validate that, A, data is
passed, and B, the data that is passed is

00:05:52.668 --> 00:05:58.180 line:100% position:50% align:middle
the correct type. So if it's expecting a
number or a function, it's going to error

00:05:58.180 --> 00:06:02.720 line:100% position:50% align:middle
out if it gives you a string and that will
help you make nice really rigid

00:06:02.720 --> 00:06:06.993 line:100% position:50% align:middle
components. One last thing we need to do
is make this Catch of the Day look like it

00:06:06.993 --> 00:06:10.423 line:100% position:50% align:middle
doesn't look terrible. So go to your
header and there's just some extra HTML

00:06:10.423 --> 00:06:15.284 line:100% position:50% align:middle
that we need to add to this. So put your
"Catch of the Day" on its own line.

00:06:15.284 --> 00:06:22.213 line:100% position:50% align:middle
And the word Catch, it's fine. Then we'll
have a "span" with class of "ofThe."

00:06:22.213 --> 00:06:26.951 line:100% position:50% align:middle
Inside of that, we'll have a span with the
class of "of" and a span with the class of

00:06:26.951 --> 00:06:36.531 line:100% position:50% align:middle
"the." And we'll just put "of" "the",
and then we'll leave "Day" on its own line.

00:06:36.531 --> 00:06:41.319 line:100% position:50% align:middle
That should give us the nice little
anchor. Good. You can see the anchor,

00:06:41.319 --> 00:06:45.077 line:100% position:50% align:middle
it's good. And then we also don't have
a white background behind that.

00:06:45.077 --> 00:06:50.140 line:100% position:50% align:middle
So what we're going to do here is
just wrap this entire thing in a span.

00:06:50.140 --> 00:06:52.867 line:100% position:50% align:middle
That should give us that nice,
white background. Good.
