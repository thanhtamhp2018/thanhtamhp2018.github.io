WEBVTT

00:00:00.469 --> 00:00:03.487 line:100% position:50% align:middle
♪ [music] ♪

00:00:07.000 --> 00:00:11.170 line:100% position:50% align:middle
Now we need to talk about routing.
Routing means that when I go to just

00:00:11.170 --> 00:00:15.830 line:100% position:50% align:middle
localhost or wesbos.com it's going to
render out this StorePicker component.

00:00:15.830 --> 00:00:20.740 line:100% position:50% align:middle
Then when I change the URL here to
store/something funny,

00:00:20.740 --> 00:00:25.830 line:100% position:50% align:middle
I'll show you how to get those funny names
in just a second, that will change and

00:00:25.830 --> 00:00:31.320 line:100% position:50% align:middle
show me the App component. Then when I see
any random URL, it's not going to work.

00:00:31.320 --> 00:00:34.880 line:100% position:50% align:middle
It's going to give me a "404 not found" or
something like that.

00:00:34.880 --> 00:00:37.500 line:100% position:50% align:middle
That's really all the routing that our
application is going to have.

00:00:37.500 --> 00:00:43.080 line:100% position:50% align:middle
However, routing can get really complex
and really in-depth. We are going to be

00:00:43.080 --> 00:00:47.430 line:100% position:50% align:middle
using React Router, which is not part of
React, however. It's sort of the industry

00:00:47.430 --> 00:00:51.750 line:100% position:50% align:middle
standard when you need routing inside of
React. We're going to be using React

00:00:51.750 --> 00:00:56.270 line:100% position:50% align:middle
Router 4. There's been a whole bunch of
versions of React Router and they seem to

00:00:56.270 --> 00:01:00.770 line:100% position:50% align:middle
have settled on React Router version 4.
What it allows you to do is basically just

00:01:00.770 --> 00:01:06.890 line:100% position:50% align:middle
show and hide components anywhere inside
of your application depending on if you're

00:01:06.890 --> 00:01:11.350 line:100% position:50% align:middle
on the page you wish to show them or not.
The way that we're going to do that is we

00:01:11.350 --> 00:01:17.250 line:100% position:50% align:middle
are going to open up our index.js and
instead of just rendering out our App or

00:01:17.250 --> 00:01:22.950 line:100% position:50% align:middle
our StorePicker directly, we're going to
create some routes that say, "If I'm on a

00:01:22.950 --> 00:01:27.840 line:100% position:50% align:middle
store page, show me the App component.
If I'm on the homepage,

00:01:27.840 --> 00:01:32.138 line:100% position:50% align:middle
show me the StorePicker component. And if
it doesn't match anything, like someone

00:01:32.138 --> 00:01:36.390 line:100% position:50% align:middle
mistyped a URL, show me a NotFound
component." That's what we're going to do

00:01:36.390 --> 00:01:43.897 line:100% position:50% align:middle
in index.js. We need a couple things to
import from React Router so I'm going to

00:01:43.897 --> 00:01:49.580 line:100% position:50% align:middle
import. We want to do this above
our components here.

00:01:49.580 --> 00:01:57.070 line:100% position:50% align:middle
We need the 'BrowserRouter' from 'react-router'.
We need 'Match' and we need 'Miss'.

00:01:57.070 --> 00:02:00.380 line:100% position:50% align:middle
This is a pretty cool API. I think you'll
like working with this.

00:02:00.380 --> 00:02:04.830 line:100% position:50% align:middle
I'm going to import that from React
Router. Then what we need to do is make a

00:02:04.830 --> 00:02:08.780 line:100% position:50% align:middle
component which is going to be our router.
When I said earlier,

00:02:08.780 --> 00:02:13.990 line:100% position:50% align:middle
I said everything in React is a component,
I wasn't kidding. Even the router itself

00:02:13.990 --> 00:02:17.630 line:100% position:50% align:middle
is a component. I'm going to do the
component right in my index.js.

00:02:17.630 --> 00:02:20.440 line:100% position:50% align:middle
You can do it in a separate file if you
want but I'm going to do it right above

00:02:20.440 --> 00:02:23.860 line:100% position:50% align:middle
our render here. We're going to make
ourselves a stateless functional component

00:02:23.860 --> 00:02:27.930 line:100% position:50% align:middle
just like we did with the header. We say
"const Root". I'm just naming it 'Root'.

00:02:27.930 --> 00:02:31.270 line:100% position:50% align:middle
Some people call it 'Main' or 'App' or
whatever it is, but I've already used 'App'

00:02:31.270 --> 00:02:37.240 line:100% position:50% align:middle
and I like 'Root'. So we'll say "=". And
from here I am going to open some curly

00:02:37.240 --> 00:02:45.600 line:100% position:50% align:middle
brackets and we are going to return some
JSX. Now we first wrapped the entire thing

00:02:45.600 --> 00:02:51.410 line:100% position:50% align:middle
in a BrowserRouter component and then
inside of that we have these 'Match' and

00:02:51.410 --> 00:02:58.820 line:100% position:50% align:middle
'Miss'. And this is really cool. We have a
'Match' tag and if one of those matches,

00:02:58.820 --> 00:03:06.850 line:100% position:50% align:middle
it can be self-closing if we want, we will
say "exactly pattern='/'".

00:03:06.850 --> 00:03:12.754 line:100% position:50% align:middle
When the pattern is exactly "/",
meaning that when I am exactly on the

00:03:12.754 --> 00:03:20.060 line:100% position:50% align:middle
homepage, which component should I show?
I'll say "component={StorePicker}".

00:03:20.060 --> 00:03:24.510 line:100% position:50% align:middle
Right? So that looks good. What's cool
about these matches is you can put these

00:03:24.510 --> 00:03:28.690 line:100% position:50% align:middle
'Match's anywhere in your application.
Let's say you're four or five levels deep

00:03:28.690 --> 00:03:32.530 line:100% position:50% align:middle
and you have a sidebar and the client says
"Oh I only want to show that sidebar

00:03:32.530 --> 00:03:37.400 line:100% position:50% align:middle
widget when I'm on the specific page."
What's cool about that is you can just pop

00:03:37.400 --> 00:03:41.200 line:100% position:50% align:middle
in another 'Match', match the actual pattern
that you're looking for,

00:03:41.200 --> 00:03:46.900 line:100% position:50% align:middle
and say "render out this widget into the
sidebar." So I have match '/'.

00:03:46.900 --> 00:03:50.060 line:100% position:50% align:middle
We also are going to have match '/store/'.

00:03:50.060 --> 00:03:55.230 line:100% position:50% align:middle
Then our store name could be anything.
That's when we have some parameters here.

00:03:55.230 --> 00:04:00.420 line:100% position:50% align:middle
We're going to call that 'storeID'. This storeID,
like if I visit 'fierce-clumsy-leaves',

00:04:00.420 --> 00:04:05.780 line:100% position:50% align:middle
that is going to be made available
to us when we visit that actual page.

00:04:05.780 --> 00:04:09.970 line:100% position:50% align:middle
The component we're going to render out is
App. Let's see if that works then we'll do

00:04:09.970 --> 00:04:17.700 line:100% position:50% align:middle
the 'Miss', which is our last one here. Here
we are...not working yet and the reason is

00:04:17.700 --> 00:04:21.980 line:100% position:50% align:middle
because we've made this Root component but
we're still directly rendering out this

00:04:21.980 --> 00:04:26.530 line:100% position:50% align:middle
App component. So we're going to replace
"App" with "Root", which will indirectly call

00:04:26.530 --> 00:04:31.440 line:100% position:50% align:middle
App or StorePicker. Here we go. Oh, we've
got a bit of an issue here.

00:04:31.440 --> 00:04:35.990 line:100% position:50% align:middle
"Invariant Violation: React.Children.only
expected to receive a single React

00:04:35.990 --> 00:04:42.270 line:100% position:50% align:middle
element child." I think the issue is here
that these 'Match', they can't be a direct

00:04:42.270 --> 00:04:49.840 line:100% position:50% align:middle
child of BrowserRouter. Let's try to wrap
a div around these real quick.

00:04:49.840 --> 00:04:54.550 line:100% position:50% align:middle
There we go. That worked for us. So on
'/' we see the StorePicker.

00:04:54.550 --> 00:05:00.000 line:100% position:50% align:middle
Then when I go to 'store/123',
it renders out the App.

00:05:00.000 --> 00:05:07.090 line:100% position:50% align:middle
Then if I go to nothing, let's see what
happens. We get an error here.

00:05:07.090 --> 00:05:11.590 line:100% position:50% align:middle
"Warning, 'Miss' is defined but not used" and
it doesn't render out anything to us.

00:05:11.590 --> 00:05:17.790 line:100% position:50% align:middle
Why? Because we have not yet rendered out
a 'Miss' tag. We're going to say "Miss".

00:05:17.790 --> 00:05:23.321 line:100% position:50% align:middle
Then anything that is a miss, we are going
to render out a component called 'NotFound'.

00:05:23.321 --> 00:05:28.670 line:100% position:50% align:middle
This is a new thing to us. Whenever
you pass in a JavaScript variable as

00:05:28.670 --> 00:05:34.880 line:100% position:50% align:middle
props, remember these are just props.
"pattern", "component". Whenever I pass those

00:05:34.880 --> 00:05:40.030 line:100% position:50% align:middle
in, if you're not passing like a string,
if you're passing a number,

00:05:40.030 --> 00:05:46.280 line:100% position:50% align:middle
a boolean or a variable you need to put in
it curly brackets and then pass 'NotFound'.

00:05:46.280 --> 00:05:49.920 line:100% position:50% align:middle
We don't have a NotFound component. It's
going to tell us we don't have that.

00:05:49.920 --> 00:05:54.790 line:100% position:50% align:middle
So I'm going to go back to my components
folder, make a new one called notfound.js,

00:05:54.790 --> 00:06:04.084 line:100% position:50% align:middle
and I'm just going to grab some code from
my order.js. Go to notfound, replace it

00:06:04.084 --> 00:06:06.661 line:100% position:50% align:middle
with 'NotFound'.

00:06:06.661 --> 00:06:14.487 line:100% position:50% align:middle
Here we can just maybe return an h1. Not
found. Then we'll head back to our

00:06:14.487 --> 00:06:19.980 line:100% position:50% align:middle
index.js and just as we imported App and
StorePicker, we also need to import that

00:06:19.980 --> 00:06:24.940 line:100% position:50% align:middle
last one, which is going to be NotFound.
That's our component, and it will be

00:06:24.940 --> 00:06:29.760 line:100% position:50% align:middle
rendered out. There we go. Now any time we
go to a URL that doesn't exist,

00:06:29.760 --> 00:06:33.380 line:100% position:50% align:middle
it's going to render out "Not Found!111!!" If we
go to our main, we should see, "Enter a

00:06:33.380 --> 00:06:39.580 line:100% position:50% align:middle
store." When we go to a store, any store,
it's going to show us our App component.

00:06:39.580 --> 00:06:42.150 line:100% position:50% align:middle
In the next video what we're going to do
is we're going to look at how do we

00:06:42.150 --> 00:06:45.350 line:100% position:50% align:middle
actually hook that up so I don't have to
type in the URLs here,

00:06:45.350 --> 00:06:51.060 line:100% position:50% align:middle
but if I hit submit, that data is going to
change the URL without us having to even

00:06:51.060 --> 00:06:53.000 line:100% position:50% align:middle
reload the entire page.
